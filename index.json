[{"uri":"https://plotly.net/reference/plotly-net.html","title":"Plotly.NET","content":"Chart2D \nChart3D \nChartCarpet \nChartDomain \nChartMap \nChartPolar \nChartTemplates \nChartTernary \nColor \nDefaults \nGenericChart \nGenericChartExtensions \nHTML \nSankeyExtension \nSeq \nStyleParam \nARGB \nARGBConverter \nChart \nChartDescription \nColor \nColorConverter \nColorKeyword \nConfig \nDisplayOptions \nFont \nFrame \nLayout \nLine \nLink \nNode \nTemplate \nTitle \nTrace \nTrace2D \nTrace2DStyle \nTrace3D \nTrace3DStyle \nTraceCarpet \nTraceCarpetStyle \nTraceDomain \nTraceDomainStyle \nTraceGeo \nTraceGeoStyle \nTraceID \nTraceMapbox \nTraceMapboxStyle \nTracePolar \nTracePolarStyle \nTraceStyle \nTraceTernary \nTraceTernaryStyle"},{"uri":"https://plotly.net/reference/plotly-net-configobjects.html","title":"Plotly.NET.ConfigObjects","content":"ToImageButtonOptions"},{"uri":"https://plotly.net/reference/plotly-net-imageexport.html","title":"Plotly.NET.ImageExport","content":"ChartExtensions \nGenericChartExtensions \nExportEngine \nIGenericChartRenderer \nPuppeteerSharpRenderer"},{"uri":"https://plotly.net/reference/plotly-net-interactive.html","title":"Plotly.NET.Interactive","content":"FormatterKernelExtension"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects.html","title":"Plotly.NET.LayoutObjects","content":"ActiveShape \nAngularAxis \nAnnotation \nAspectRatio \nButton \nCamera \nColorAxis \nColorBar \nDefaultColorScales \nDomain \nGeo \nGeoProjection \nGeoProjectionRotation \nHoverlabel \nLayoutGrid \nLayoutImage \nLegend \nLinearAxis \nMapbox \nMapboxLayer \nMapboxLayerSymbol \nMargin \nModeBar \nPolar \nRadialAxis \nRangeSelector \nRangeSlider \nRangebreak \nScene \nShape \nTernary \nTickFormatStop \nTransition \nUniformText"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects.html","title":"Plotly.NET.TraceObjects","content":"Bins \nBox \nCapFill \nCaps \nCellColor \nContour \nContourProject \nContours \nCumulative \nDimensions \nError \nFontSelectionStyle \nFunnelConnector \nGradient \nIcicleLeaf \nIcicleRoot \nIcicleTiling \nIndicatorBar \nIndicatorDelta \nIndicatorGauge \nIndicatorNumber \nIndicatorSteps \nIndicatorSymbol \nIndicatorThreshold \nLightPosition \nLighting \nMarker \nMarkerSelectionStyle \nMeanLine \nPathbar \nPattern \nProjection \nProjectionDimension \nSelection \nSlices \nSlicesFill \nSpaceframe \nStockData \nStreamTubeStarts \nSurface \nTableCells \nTableHeader \nTreemapTiling \nWaterfallConnector"},{"uri":"https://plotly.net/reference/plotly-net-chart2d.html","title":"Chart2D","content":"Chart2D \n \nChart2D.Chart \nChart"},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html","title":"Chart","content":"Chart \n \nChart.Area \nArea \nChart.Area \nArea \nChart.Bar \nBar \nChart.Bar \nBar \nChart.BoxPlot \nBoxPlot \nChart.BoxPlot \nBoxPlot \nChart.Bubble \nBubble \nChart.Bubble \nBubble \nChart.Candlestick \nCandlestick \nChart.Candlestick \nCandlestick \nChart.Column \nColumn \nChart.Column \nColumn \nChart.Contour \nContour \nChart.Funnel \nFunnel \nChart.Heatmap \nHeatmap \nChart.Histogram \nHistogram \nChart.Histogram \nHistogram \nChart.Histogram2D \nHistogram2D \nChart.Histogram2DContour \nHistogram2DContour \nChart.Image \nImage \nChart.Image \nImage \nChart.Line \nLine \nChart.Line \nLine \nChart.OHLC \nOHLC \nChart.OHLC \nOHLC \nChart.Point \nPoint \nChart.Point \nPoint \nChart.Range \nRange \nChart.Range \nRange \nChart.Scatter \nScatter \nChart.Scatter \nScatter \nChart.Spline \nSpline \nChart.Spline \nSpline \nChart.SplineArea \nSplineArea \nChart.SplineArea \nSplineArea \nChart.Splom \nSplom \nChart.Splom \nSplom \nChart.StackedArea \nStackedArea \nChart.StackedArea \nStackedArea \nChart.StackedBar \nStackedBar \nChart.StackedBar \nStackedBar \nChart.StackedColumn \nStackedColumn \nChart.StackedColumn \nStackedColumn \nChart.Violin \nViolin \nChart.Violin \nViolin \nChart.Waterfall \nWaterfall \nChart.Waterfall \nWaterfall"},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#Area","title":"Chart.Area","content":"Chart.Area \nArea \n\n Emphasizes the degree of change over time and shows the relationship of the parts to a whole.\n"},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#Area","title":"Chart.Area","content":"Chart.Area \nArea \n\n Emphasizes the degree of change over time and shows the relationship of the parts to a whole.\n"},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#Bar","title":"Chart.Bar","content":"Chart.Bar \nBar \n\n Illustrates comparisons among individual items\n"},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#Bar","title":"Chart.Bar","content":"Chart.Bar \nBar \n\n Illustrates comparisons among individual items\n"},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#BoxPlot","title":"Chart.BoxPlot","content":"Chart.BoxPlot \nBoxPlot \n\n Displays the distribution of data based on the five number summary: minimum, first quartile, median, third quartile, and maximum.       \n"},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#BoxPlot","title":"Chart.BoxPlot","content":"Chart.BoxPlot \nBoxPlot \n\n Displays the distribution of data based on the five number summary: minimum, first quartile, median, third quartile, and maximum.            \n"},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#Bubble","title":"Chart.Bubble","content":"Chart.Bubble \nBubble \nCreates a bubble chart. A bubble chart is a variation of the Point chart, where the data points get an additional scale by being rendered as bubbles of different sizes."},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#Bubble","title":"Chart.Bubble","content":"Chart.Bubble \nBubble \nCreates a bubble chart. A bubble chart is a variation of the Point chart, where the data points get an additional scale by being rendered as bubbles of different sizes."},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#Candlestick","title":"Chart.Candlestick","content":"Chart.Candlestick \nCandlestick \n\n Creates an OHLC (open-high-low-close) chart. OHLC charts are typically used to illustrate movements in the price of a financial instrument over time.\n\n stockTimeSeries : tuple list of time * stock (OHLC) data\n\n ?Increasing     : Sets the Line style of the Increasing part of the chart\n\n ?Decreasing     : Sets the Line style of the Decreasing part of the chart\n\n ?Line           : Sets the Line style of both the Decreasing and Increasing part of the chart\n\n ?Tickwidth      : Sets the width of the open/close tick marks relative to the \u0022x\u0022 minimal interval.\n\n ?XCalendar      : Sets the calendar system to use with \u0060x\u0060 date data.\n"},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#Candlestick","title":"Chart.Candlestick","content":"Chart.Candlestick \nCandlestick \n\n Creates a candlestick chart. A candlestick cart is a style of financial chart used to describe price movements of a \n security, derivative, or currency. Each \u0022candlestick\u0022 typically shows one day, thus a one-month chart may show the 20 \n trading days as 20 candlesticks. Candlestick charts can also be built using intervals shorter or longer than one day.\n\n \u0060\u0060open\u0060\u0060        : Sets the open values.\n\n high            : Sets the high values.\n\n low             : Sets the low values.\n\n close           : Sets the close values.\n\n x               : Sets the x coordinates. If absent, linear coordinate will be generated.\n\n ?Increasing     : Sets the Line style of the Increasing part of the chart\n\n ?Decreasing     : Sets the Line style of the Decreasing part of the chart\n\n ?Line           : Sets the Line style of both the Decreasing and Increasing part of the chart\n\n ?WhiskerWidth   :  Sets the width of the whiskers relative to the box\u0027 width. For example, with 1, the whiskers are as wide as the box(es).\n\n ?XCalendar      : Sets the calendar system to use with \u0060x\u0060 date data.\n"},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#Column","title":"Chart.Column","content":"Chart.Column \nColumn \n\n Illustrates comparisons among individual items\n"},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#Column","title":"Chart.Column","content":"Chart.Column \nColumn \n\n Illustrates comparisons among individual items\n"},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#Contour","title":"Chart.Contour","content":"Chart.Contour \nContour \n\n Shows a graphical representation of data where the individual values contained in a matrix are represented as colors.\n"},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#Funnel","title":"Chart.Funnel","content":"Chart.Funnel \nFunnel \n\n Creates a Funnel chart.\n Funnel charts visualize stages in a process using length-encoded bars. This trace can be used to show data in either a part-to-whole representation wherein each item appears in a single stage, or in a \u0022drop-off\u0022 representation wherein each item appears in each stage it traversed. See also the \u0022funnelarea\u0022 trace type for a different approach to visualizing funnel data.\n\n Parameters:\n \n x              : Sets the x coordinates.\n\n y              : Sets the y coordinates.\n\n Name           : Sets the trace name. The trace name appear as the legend item and on hover\n\n ShowLegend     : Determines whether or not an item corresponding to this trace is shown in the legend.\n\n Opacity        : Sets the Opacity of the trace\n\n Labels         : Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace\u0027s (x,y) coordinates. If trace \u0060hoverinfo\u0060 contains a \u0022text\u0022 flag and \u0022hovertext\u0022 is not set, these elements will be seen in the hover labels.\n\n TextPosition   : Sets the positions of the \u0060text\u0060 elements with respects to the (x,y) coordinates.\n\n TextFont       : Sets the text font of this trace\n\n Color          : Sets Marker Color\n\n Line           : Line type\n\n x0             : Alternate to \u0060x\u0060. Builds a linear space of x coordinates. Use with \u0060dx\u0060 where \u0060x0\u0060 is the starting coordinate and \u0060dx\u0060 the step.\n\n dX             : Sets the x coordinate step. See \u0060x0\u0060 for more info.\n\n y0             : Alternate to \u0060y\u0060. Builds a linear space of y coordinates. Use with \u0060dy\u0060 where \u0060y0\u0060 is the starting coordinate and \u0060dy\u0060 the step.\n\n dY             : Sets the y coordinate step. See \u0060y0\u0060 for more info.\n\n Width          : Sets the bar width (in position axis units).\n \n Offset         : Shifts the position where the bar is drawn (in position axis units). In \u0022group\u0022 barmode, traces that set \u0022offset\u0022 will be excluded and drawn in \u0022overlay\u0022 mode instead.\n \n Orientation    : Sets the orientation of the funnels. With \u0022v\u0022 (\u0022h\u0022), the value of the each bar spans along the vertical (horizontal). By default funnels are tend to be oriented horizontally; unless only \u0022y\u0022 array is presented or orientation is set to \u0022v\u0022. Also regarding graphs including only \u0027horizontal\u0027 funnels, \u0022autorange\u0022 on the \u0022y-axis\u0022 are set to \u0022reversed\u0022.\n \n Alignmentgroup : Set several traces linked to the same position axis or matching axes to the same alignmentgroup. This controls whether bars compute their positional range dependently or independently.\n \n Offsetgroup    : Set several traces linked to the same position axis or matching axes to the same offsetgroup where bars of the same position coordinate will line up.\n \n Cliponaxis     : Determines whether the text nodes are clipped about the subplot axes. To show the text nodes above axis lines and tick labels, make sure to set \u0060xaxis.layer\u0060 and \u0060yaxis.layer\u0060 to \u0022below traces\u0022.\n \n Connector      : Connector type\n\n Insidetextfont : Sets the font used for \u0060text\u0060 lying inside the bar.\n\n Outsidetextfont: Sets the font used for \u0060text\u0060 lying outside the bar.\n"},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#Heatmap","title":"Chart.Heatmap","content":"Chart.Heatmap \nHeatmap \n\n Shows a graphical representation of a 3-dimensional surface by plotting constant z slices, called contours, on a 2-dimensional format.\n That is, given a value for z, lines are drawn for connecting the (x,y) coordinates where that z value occurs.\n"},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#Histogram","title":"Chart.Histogram","content":"Chart.Histogram \nHistogram \n\n Visualizes the distribution of the input data as a histogram, automatically determining if the data is to be used for the x or y dimension based on the \u0060orientation\u0060 parameter.\n"},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#Histogram","title":"Chart.Histogram","content":"Chart.Histogram \nHistogram \n\n Visualizes the distribution of the input data as a histogram.\n"},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#Histogram2D","title":"Chart.Histogram2D","content":"Chart.Histogram2D \nHistogram2D \n\n Computes the bi-dimensional histogram of two data samples.\n"},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#Histogram2DContour","title":"Chart.Histogram2DContour","content":"Chart.Histogram2DContour \nHistogram2DContour \n\n Computes the bi-dimensional histogram of two data samples and auto-determines the bin size.\n"},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#Image","title":"Chart.Image","content":"Chart.Image \nImage \n"},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#Image","title":"Chart.Image","content":"Chart.Image \nImage \n"},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#Line","title":"Chart.Line","content":"Chart.Line \nLine \nCreates a Line chart, which uses a Line plotted between the given datums in a 2D space to visualize typically an evolution of Y depending on X."},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#Line","title":"Chart.Line","content":"Chart.Line \nLine \n Creates a Line chart, which uses a Line plotted between the given datums in a 2D space to visualize typically an evolution of Y depending on X."},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#OHLC","title":"Chart.OHLC","content":"Chart.OHLC \nOHLC \n\n Creates an OHLC (open-high-low-close) chart. OHLC charts are typically used to illustrate movements in the price of a financial instrument over time.\n\n stockTimeSeries : tuple list of time * stock (OHLC) data\n\n ?Increasing     : Sets the Line style of the Increasing part of the chart\n\n ?Decreasing     : Sets the Line style of the Decreasing part of the chart\n\n ?Line           : Sets the Line style of both the Decreasing and Increasing part of the chart\n\n ?Tickwidth      : Sets the width of the open/close tick marks relative to the \u0022x\u0022 minimal interval.\n\n ?XCalendar      : Sets the calendar system to use with \u0060x\u0060 date data.\n"},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#OHLC","title":"Chart.OHLC","content":"Chart.OHLC \nOHLC \n\n Creates an OHLC (open-high-low-close) chart. OHLC charts are typically used to illustrate movements in the price of a financial instrument over time.\n\n \u0060\u0060open\u0060\u0060    : Sets the open values.\n\n high        : Sets the high values.\n\n low         : Sets the low values.\n\n close       : Sets the close values.\n\n x           : Sets the x coordinates. If absent, linear coordinate will be generated.\n\n ?Increasing : Sets the Line style of the Increasing part of the chart\n\n ?Decreasing : Sets the Line style of the Decreasing part of the chart\n\n ?Line       : Sets the Line style of both the Decreasing and Increasing part of the chart\n\n ?Tickwidth  : Sets the width of the open/close tick marks relative to the \u0022x\u0022 minimal interval.\n\n ?XCalendar  : Sets the calendar system to use with \u0060x\u0060 date data.\n"},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#Point","title":"Chart.Point","content":"Chart.Point \nPoint \nCreates a Point chart, which uses Points in a 2D space to visualize data. "},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#Point","title":"Chart.Point","content":"Chart.Point \nPoint \nCreates a Point chart, which uses Points in a 2D space to visualize data. "},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#Range","title":"Chart.Range","content":"Chart.Range \nRange \n\n Displays a range of data by plotting two Y values per data point, with each Y value being drawn as a line \n"},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#Range","title":"Chart.Range","content":"Chart.Range \nRange \n\n Displays a range of data by plotting two Y values per data point, with each Y value being drawn as a line \n"},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#Scatter","title":"Chart.Scatter","content":"Chart.Scatter \nScatter \nCreates a Scatter chart. Scatter charts are the basis of Point, Line, and Bubble Charts in Plotly, and can be customized as such. We also provide abstractions for those: Chart.Line, Chart.Point, Chart.Bubble"},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#Scatter","title":"Chart.Scatter","content":"Chart.Scatter \nScatter \nCreates a Scatter chart. Scatter charts are the basis of Point, Line, and Bubble Charts in Plotly, and can be customized as such. We also provide abstractions for those: Chart.Line, Chart.Point, Chart.Bubble"},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#Spline","title":"Chart.Spline","content":"Chart.Spline \nSpline \nCreates a Spline chart. A spline chart is a line chart in which data points are connected by smoothed curves: this modification is aimed to improve the design of a chart.\n Very similar to Line Plots, spline charts are typically used to visualize an evolution of Y depending on X. "},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#Spline","title":"Chart.Spline","content":"Chart.Spline \nSpline \nCreates a Spline chart. A spline chart is a line chart in which data points are connected by smoothed curves: this modification is aimed to improve the design of a chart.\n Very similar to Line Plots, spline charts are typically used to visualize an evolution of Y depending on X. "},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#SplineArea","title":"Chart.SplineArea","content":"Chart.SplineArea \nSplineArea \n\n Emphasizes the degree of change over time and shows the relationship of the parts to a whole.\n"},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#SplineArea","title":"Chart.SplineArea","content":"Chart.SplineArea \nSplineArea \n\n Emphasizes the degree of change over time and shows the relationship of the parts to a whole.\n"},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#Splom","title":"Chart.Splom","content":"Chart.Splom \nSplom \n\n Computes the Splom plot\n"},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#Splom","title":"Chart.Splom","content":"Chart.Splom \nSplom \n\n Computes the parallel coordinates plot\n"},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#StackedArea","title":"Chart.StackedArea","content":"Chart.StackedArea \nStackedArea \n\n Emphasizes the degree of change over time and shows the relationship of the parts to a whole.\n"},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#StackedArea","title":"Chart.StackedArea","content":"Chart.StackedArea \nStackedArea \n\n Emphasizes the degree of change over time and shows the relationship of the parts to a whole.\n"},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#StackedBar","title":"Chart.StackedBar","content":"Chart.StackedBar \nStackedBar \n\n Displays series of tcolumn chart type as stacked bars.\n"},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#StackedBar","title":"Chart.StackedBar","content":"Chart.StackedBar \nStackedBar \n\n Displays series of tcolumn chart type as stacked bars.\n"},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#StackedColumn","title":"Chart.StackedColumn","content":"Chart.StackedColumn \nStackedColumn \n\n Displays series of tcolumn chart type as stacked bars.\n"},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#StackedColumn","title":"Chart.StackedColumn","content":"Chart.StackedColumn \nStackedColumn \n\n Displays series of tcolumn chart type as stacked bars.\n"},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#Violin","title":"Chart.Violin","content":"Chart.Violin \nViolin \n\n Displays the distribution of data based on the five number summary: minimum, first quartile, median, third quartile, and maximum.       \n"},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#Violin","title":"Chart.Violin","content":"Chart.Violin \nViolin \n\n Displays the distribution of data based on the five number summary: minimum, first quartile, median, third quartile, and maximum.            \n"},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#Waterfall","title":"Chart.Waterfall","content":"Chart.Waterfall \nWaterfall \n\n Creates a waterfall chart. Waterfall charts are special bar charts that help visualizing the cumulative effect of sequentially introduced positive or negative values\n\n Parameters:\n\n xyMeasures      : triple sequence containing x coordinates, y coordinates, and the type of measure used for each bar.\n\n Base            : Sets where the bar base is drawn (in position axis units).\n\n Width           : Sets the bar width (in position axis units).\n\n Orientation     : Sets the orientation of the bars. With \u0022v\u0022 (\u0022h\u0022), the value of the each bar spans along the vertical (horizontal).\n\n Connector       : Sets the styling of the connector lines\n\n AlignmentGroup  : Set several traces linked to the same position axis or matching axes to the same alignmentgroup. This controls whether bars compute their positional range dependently or independently.\n\n OffsetGroup     : Set several traces linked to the same position axis or matching axes to the same offsetgroup where bars of the same position coordinate will line up.\n\n Offset          : Shifts the position where the bar is drawn (in position axis units). In \u0022group\u0022 barmode, traces that set \u0022offset\u0022 will be excluded and drawn in \u0022overlay\u0022 mode instead.\n"},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#Waterfall","title":"Chart.Waterfall","content":"Chart.Waterfall \nWaterfall \n\n Creates a waterfall chart. Waterfall charts are special bar charts that help visualizing the cumulative effect of sequentially introduced positive or negative values\n\n Parameters:\n\n x               : Sets the x coordinates.\n\n y               : Sets the y coordinates.\n\n Base            : Sets where the bar base is drawn (in position axis units).\n\n Width           : Sets the bar width (in position axis units).\n\n Measure         : An array containing types of values. By default the values are considered as \u0027relative\u0027. However; it is possible to use \u0027total\u0027 to compute the sums. Also \u0027absolute\u0027 could be applied to reset the computed total or to declare an initial value where needed.\n\n Orientation     : Sets the orientation of the bars. With \u0022v\u0022 (\u0022h\u0022), the value of the each bar spans along the vertical (horizontal).\n\n Connector       : Sets the styling of the connector lines\n\n AlignmentGroup  : Set several traces linked to the same position axis or matching axes to the same alignmentgroup. This controls whether bars compute their positional range dependently or independently.\n\n OffsetGroup     : Set several traces linked to the same position axis or matching axes to the same offsetgroup where bars of the same position coordinate will line up.\n\n Offset          : Shifts the position where the bar is drawn (in position axis units). In \u0022group\u0022 barmode, traces that set \u0022offset\u0022 will be excluded and drawn in \u0022overlay\u0022 mode instead.\n"},{"uri":"https://plotly.net/reference/plotly-net-chart3d.html","title":"Chart3D","content":"Chart3D \n \nChart3D.Chart \nChart"},{"uri":"https://plotly.net/reference/plotly-net-chart3d-chart.html","title":"Chart","content":"Chart \n \nChart.Bubble3d \nBubble3d \nChart.Bubble3d \nBubble3d \nChart.Cone \nCone \nChart.Cone \nCone \nChart.IsoSurface \nIsoSurface \nChart.Line3d \nLine3d \nChart.Line3d \nLine3d \nChart.Mesh3d \nMesh3d \nChart.Point3d \nPoint3d \nChart.Point3d \nPoint3d \nChart.Scatter3d \nScatter3d \nChart.Scatter3d \nScatter3d \nChart.StreamTube \nStreamTube \nChart.StreamTube \nStreamTube \nChart.Surface \nSurface \nChart.Volume \nVolume"},{"uri":"https://plotly.net/reference/plotly-net-chart3d-chart.html#Bubble3d","title":"Chart.Bubble3d","content":"Chart.Bubble3d \nBubble3d \n"},{"uri":"https://plotly.net/reference/plotly-net-chart3d-chart.html#Bubble3d","title":"Chart.Bubble3d","content":"Chart.Bubble3d \nBubble3d \n"},{"uri":"https://plotly.net/reference/plotly-net-chart3d-chart.html#Cone","title":"Chart.Cone","content":"Chart.Cone \nCone \n"},{"uri":"https://plotly.net/reference/plotly-net-chart3d-chart.html#Cone","title":"Chart.Cone","content":"Chart.Cone \nCone \n"},{"uri":"https://plotly.net/reference/plotly-net-chart3d-chart.html#IsoSurface","title":"Chart.IsoSurface","content":"Chart.IsoSurface \nIsoSurface \n"},{"uri":"https://plotly.net/reference/plotly-net-chart3d-chart.html#Line3d","title":"Chart.Line3d","content":"Chart.Line3d \nLine3d \n\n Uses points, line or both depending on the mode to represent 3d-data points\n"},{"uri":"https://plotly.net/reference/plotly-net-chart3d-chart.html#Line3d","title":"Chart.Line3d","content":"Chart.Line3d \nLine3d \n\n Uses points, line or both depending on the mode to represent 3d-data points\n"},{"uri":"https://plotly.net/reference/plotly-net-chart3d-chart.html#Mesh3d","title":"Chart.Mesh3d","content":"Chart.Mesh3d \nMesh3d \n\n Uses points, line or both depending on the mode to represent 3d-data points\n"},{"uri":"https://plotly.net/reference/plotly-net-chart3d-chart.html#Point3d","title":"Chart.Point3d","content":"Chart.Point3d \nPoint3d \n"},{"uri":"https://plotly.net/reference/plotly-net-chart3d-chart.html#Point3d","title":"Chart.Point3d","content":"Chart.Point3d \nPoint3d \n"},{"uri":"https://plotly.net/reference/plotly-net-chart3d-chart.html#Scatter3d","title":"Chart.Scatter3d","content":"Chart.Scatter3d \nScatter3d \n\n Uses points, line or both depending on the mode to represent 3d-data points\n"},{"uri":"https://plotly.net/reference/plotly-net-chart3d-chart.html#Scatter3d","title":"Chart.Scatter3d","content":"Chart.Scatter3d \nScatter3d \n\n Uses points, line or both depending on the mode to represent 3d-data points\n"},{"uri":"https://plotly.net/reference/plotly-net-chart3d-chart.html#StreamTube","title":"Chart.StreamTube","content":"Chart.StreamTube \nStreamTube \n"},{"uri":"https://plotly.net/reference/plotly-net-chart3d-chart.html#StreamTube","title":"Chart.StreamTube","content":"Chart.StreamTube \nStreamTube \n"},{"uri":"https://plotly.net/reference/plotly-net-chart3d-chart.html#Surface","title":"Chart.Surface","content":"Chart.Surface \nSurface \n\n Uses points, line or both depending on the mode to represent 3d-data points\n"},{"uri":"https://plotly.net/reference/plotly-net-chart3d-chart.html#Volume","title":"Chart.Volume","content":"Chart.Volume \nVolume \n"},{"uri":"https://plotly.net/reference/plotly-net-chartcarpet.html","title":"ChartCarpet","content":"ChartCarpet \n \nChartCarpet.Chart \nChart"},{"uri":"https://plotly.net/reference/plotly-net-chartcarpet-chart.html","title":"Chart","content":"Chart \n \nChart.BubbleCarpet \nBubbleCarpet \nChart.BubbleCarpet \nBubbleCarpet \nChart.Carpet \nCarpet \nChart.ContourCarpet \nContourCarpet \nChart.ContourCarpet \nContourCarpet \nChart.LineCarpet \nLineCarpet \nChart.LineCarpet \nLineCarpet \nChart.PointCarpet \nPointCarpet \nChart.PointCarpet \nPointCarpet \nChart.ScatterCarpet \nScatterCarpet \nChart.ScatterCarpet \nScatterCarpet \nChart.SplineCarpet \nSplineCarpet \nChart.SplineCarpet \nSplineCarpet"},{"uri":"https://plotly.net/reference/plotly-net-chartcarpet-chart.html#BubbleCarpet","title":"Chart.BubbleCarpet","content":"Chart.BubbleCarpet \nBubbleCarpet \n"},{"uri":"https://plotly.net/reference/plotly-net-chartcarpet-chart.html#BubbleCarpet","title":"Chart.BubbleCarpet","content":"Chart.BubbleCarpet \nBubbleCarpet \n"},{"uri":"https://plotly.net/reference/plotly-net-chartcarpet-chart.html#Carpet","title":"Chart.Carpet","content":"Chart.Carpet \nCarpet \n\n Shows how proportions of data, shown as pie-shaped pieces, contribute to the data.\n"},{"uri":"https://plotly.net/reference/plotly-net-chartcarpet-chart.html#ContourCarpet","title":"Chart.ContourCarpet","content":"Chart.ContourCarpet \nContourCarpet \n"},{"uri":"https://plotly.net/reference/plotly-net-chartcarpet-chart.html#ContourCarpet","title":"Chart.ContourCarpet","content":"Chart.ContourCarpet \nContourCarpet \n"},{"uri":"https://plotly.net/reference/plotly-net-chartcarpet-chart.html#LineCarpet","title":"Chart.LineCarpet","content":"Chart.LineCarpet \nLineCarpet \n"},{"uri":"https://plotly.net/reference/plotly-net-chartcarpet-chart.html#LineCarpet","title":"Chart.LineCarpet","content":"Chart.LineCarpet \nLineCarpet \n"},{"uri":"https://plotly.net/reference/plotly-net-chartcarpet-chart.html#PointCarpet","title":"Chart.PointCarpet","content":"Chart.PointCarpet \nPointCarpet \n"},{"uri":"https://plotly.net/reference/plotly-net-chartcarpet-chart.html#PointCarpet","title":"Chart.PointCarpet","content":"Chart.PointCarpet \nPointCarpet \n"},{"uri":"https://plotly.net/reference/plotly-net-chartcarpet-chart.html#ScatterCarpet","title":"Chart.ScatterCarpet","content":"Chart.ScatterCarpet \nScatterCarpet \n"},{"uri":"https://plotly.net/reference/plotly-net-chartcarpet-chart.html#ScatterCarpet","title":"Chart.ScatterCarpet","content":"Chart.ScatterCarpet \nScatterCarpet \n"},{"uri":"https://plotly.net/reference/plotly-net-chartcarpet-chart.html#SplineCarpet","title":"Chart.SplineCarpet","content":"Chart.SplineCarpet \nSplineCarpet \n"},{"uri":"https://plotly.net/reference/plotly-net-chartcarpet-chart.html#SplineCarpet","title":"Chart.SplineCarpet","content":"Chart.SplineCarpet \nSplineCarpet \n"},{"uri":"https://plotly.net/reference/plotly-net-chartdomain.html","title":"ChartDomain","content":"ChartDomain \n \nChartDomain.Chart \nChart"},{"uri":"https://plotly.net/reference/plotly-net-chartdomain-chart.html","title":"Chart","content":"Chart \n \nChart.Doughnut \nDoughnut \nChart.Doughnut \nDoughnut \nChart.FunnelArea \nFunnelArea \nChart.Icicle \nIcicle \nChart.Icicle \nIcicle \nChart.Indicator \nIndicator \nChart.ParallelCategories \nParallelCategories \nChart.ParallelCategories \nParallelCategories \nChart.ParallelCoord \nParallelCoord \nChart.ParallelCoord \nParallelCoord \nChart.Pie \nPie \nChart.Pie \nPie \nChart.Sunburst \nSunburst \nChart.Table \nTable \nChart.Treemap \nTreemap"},{"uri":"https://plotly.net/reference/plotly-net-chartdomain-chart.html#Doughnut","title":"Chart.Doughnut","content":"Chart.Doughnut \nDoughnut \n\n Shows how proportions of data, shown as pie-shaped pieces, contribute to the data as a whole.\n"},{"uri":"https://plotly.net/reference/plotly-net-chartdomain-chart.html#Doughnut","title":"Chart.Doughnut","content":"Chart.Doughnut \nDoughnut \n\n Shows how proportions of data, shown as pie-shaped pieces, contribute to the data as a whole.\n"},{"uri":"https://plotly.net/reference/plotly-net-chartdomain-chart.html#FunnelArea","title":"Chart.FunnelArea","content":"Chart.FunnelArea \nFunnelArea \n\n Creates a FunnelArea chart.\n FunnelArea charts visualize stages in a process using area-encoded trapezoids. This trace can be used to show data in a part-to-whole representation similar to a \u0022pie\u0022 trace, wherein each item appears in a single stage. See also the \u0022funnel\u0022 trace type for a different approach to visualizing funnel data.\n\n Parameters:\n \n Values        : Sets the values of the sectors. If omitted, we count occurrences of each label.\n\n Labels        : Sets the sector labels. If \u0060labels\u0060 entries are duplicated, we sum associated \u0060values\u0060 or simply count occurrences if \u0060values\u0060 is not provided. For other array attributes (including color) we use the first non-empty entry among all occurrences of the label.\n\n dLabel        : Sets the label step. See \u0060label0\u0060 for more info.\n\n Label0        : Alternate to \u0060labels\u0060. Builds a numeric set of labels. Use with \u0060dlabel\u0060 where \u0060label0\u0060 is the starting label and \u0060dlabel\u0060 the step.\n\n Name          : Sets the trace name. The trace name appear as the legend item and on hover.\n\n ShowLegend    : Determines whether or not an item corresponding to this trace is shown in the legend.\n\n Opacity       : Sets the opacity of the trace.\n\n Color         : Sets Marker Color\n\n Line          : Line type\n\n Text          : Sets text elements associated with each sector. If trace \u0060textinfo\u0060 contains a \u0022text\u0022 flag, these elements will be seen on the chart. If trace \u0060hoverinfo\u0060 contains a \u0022text\u0022 flag and \u0022hovertext\u0022 is not set, these elements will be seen in the hover labels.\n\n TextPosition  : Specifies the location of the \u0060textinfo\u0060.\n\n X             : Sets the horizontal domain of this funnelarea trace (in plot fraction).\n\n Y             : Sets the vertical domain of this funnelarea trace (in plot fraction).\n\n Row           : If there is a layout grid, use the domain for this row in the grid for this funnelarea trace .\n\n Column        : If there is a layout grid, use the domain for this column in the grid for this funnelarea trace .\n\n Aspectratio   : Sets the ratio between height and width\n\n Baseratio     : Sets the ratio between bottom length and maximum top length.\n\n Insidetextfont: Sets the font used for \u0060textinfo\u0060 lying inside the sector.\n\n Scalegroup    : If there are multiple funnelareas that should be sized according to their totals, link them by providing a non-empty group id here shared by every trace in the same group.\n"},{"uri":"https://plotly.net/reference/plotly-net-chartdomain-chart.html#Icicle","title":"Chart.Icicle","content":"Chart.Icicle \nIcicle \n\n creates table out of header sequence and row sequences\n"},{"uri":"https://plotly.net/reference/plotly-net-chartdomain-chart.html#Icicle","title":"Chart.Icicle","content":"Chart.Icicle \nIcicle \n\n creates table out of header sequence and row sequences\n"},{"uri":"https://plotly.net/reference/plotly-net-chartdomain-chart.html#Indicator","title":"Chart.Indicator","content":"Chart.Indicator \nIndicator \n\n creates table out of header sequence and row sequences\n"},{"uri":"https://plotly.net/reference/plotly-net-chartdomain-chart.html#ParallelCategories","title":"Chart.ParallelCategories","content":"Chart.ParallelCategories \nParallelCategories \n"},{"uri":"https://plotly.net/reference/plotly-net-chartdomain-chart.html#ParallelCategories","title":"Chart.ParallelCategories","content":"Chart.ParallelCategories \nParallelCategories \n\nParallel categories diagram for multidimensional categorical data.\n"},{"uri":"https://plotly.net/reference/plotly-net-chartdomain-chart.html#ParallelCoord","title":"Chart.ParallelCoord","content":"Chart.ParallelCoord \nParallelCoord \n\n Computes the parallel coordinates plot\n"},{"uri":"https://plotly.net/reference/plotly-net-chartdomain-chart.html#ParallelCoord","title":"Chart.ParallelCoord","content":"Chart.ParallelCoord \nParallelCoord \n\n Computes the parallel coordinates plot\n"},{"uri":"https://plotly.net/reference/plotly-net-chartdomain-chart.html#Pie","title":"Chart.Pie","content":"Chart.Pie \nPie \n\n Shows how proportions of data, shown as pie-shaped pieces, contribute to the data.\n"},{"uri":"https://plotly.net/reference/plotly-net-chartdomain-chart.html#Pie","title":"Chart.Pie","content":"Chart.Pie \nPie \n\n Shows how proportions of data, shown as pie-shaped pieces, contribute to the data.\n"},{"uri":"https://plotly.net/reference/plotly-net-chartdomain-chart.html#Sunburst","title":"Chart.Sunburst","content":"Chart.Sunburst \nSunburst \n\n Creates a sunburst chart. Visualize hierarchical data spanning outward radially from root to leaves.\n Applies the styles of sundburst plot to TraceObjects \n\n Parameters:\n\n labels: Sets the labels of each of the sectors.\n\n parents: Sets the parent sectors for each of the sectors. Empty string items \u0027\u0027 are understood to reference the root node in the hierarchy. If \u0060ids\u0060 is filled, \u0060parents\u0060 items are understood to be \u0022ids\u0022 themselves. When \u0060ids\u0060 is not set, plotly attempts to find matching items in \u0060labels\u0060, but beware they must be unique.\n\n Ids: Assigns id labels to each datum. These ids for object constancy of data points during animation.\n\n Values: Sets the values associated with each of the sectors. Use with \u0060branchvalues\u0060 to determine how the values are summed.\n\n Text: Sets text elements associated with each sector. If trace \u0060textinfo\u0060 contains a \u0022text\u0022 flag, these elements will be seen on the chart. If trace \u0060hoverinfo\u0060 contains a \u0022text\u0022 flag and \u0022hovertext\u0022 is not set, these elements will be seen in the hover labels.\n\n Branchvalues: Determines how the items in \u0060values\u0060 are summed. When set to \u0022total\u0022, items in \u0060values\u0060 are taken to be value of all its descendants. When set to \u0022remainder\u0022, items in \u0060values\u0060 corresponding to the root and the branches sectors are taken to be the extra part not part of the sum of the values at their leaves.\n\n Level: Sets the level from which this trace hierarchy is rendered. Set \u0060level\u0060 to \u0060\u0027\u0027\u0060 to start from the root node in the hierarchy. Must be an \u0022id\u0022 if \u0060ids\u0060 is filled in, otherwise plotly attempts to find a matching item in \u0060labels\u0060.\n\n Maxdepth: Sets the number of rendered sectors from any given \u0060level\u0060. Set \u0060maxdepth\u0060 to \u0022-1\u0022 to render all the levels in the hierarchy.\n\n ColorBar: Sets the ColorBar for the chart\n\nColors: Sets the color of each sector of this trace. If not specified, the default trace color set is used to pick the sector colors.\n"},{"uri":"https://plotly.net/reference/plotly-net-chartdomain-chart.html#Table","title":"Chart.Table","content":"Chart.Table \nTable \n\n creates table out of header sequence and row sequences\n"},{"uri":"https://plotly.net/reference/plotly-net-chartdomain-chart.html#Treemap","title":"Chart.Treemap","content":"Chart.Treemap \nTreemap \n\n Creates a treemap chart. Treemap charts visualize hierarchical data using nested rectangles. Same as Sunburst the hierarchy is defined by labels and parents attributes. Click on one sector to zoom in/out, which also displays a pathbar in the upper-left corner of your treemap. To zoom out you can use the path bar as well.\n\n Parameters:\n\n labels: Sets the labels of each of the sectors.\n\n parents: Sets the parent sectors for each of the sectors. Empty string items \u0027\u0027 are understood to reference the root node in the hierarchy. If \u0060ids\u0060 is filled, \u0060parents\u0060 items are understood to be \u0022ids\u0022 themselves. When \u0060ids\u0060 is not set, plotly attempts to find matching items in \u0060labels\u0060, but beware they must be unique.\n\n Ids: Assigns id labels to each datum. These ids for object constancy of data points during animation.\n\n Values: Sets the values associated with each of the sectors. Use with \u0060branchvalues\u0060 to determine how the values are summed.\n\n Text: Sets text elements associated with each sector. If trace \u0060textinfo\u0060 contains a \u0022text\u0022 flag, these elements will be seen on the chart. If trace \u0060hoverinfo\u0060 contains a \u0022text\u0022 flag and \u0022hovertext\u0022 is not set, these elements will be seen in the hover labels.\n\n Branchvalues: Determines how the items in \u0060values\u0060 are summed. When set to \u0022total\u0022, items in \u0060values\u0060 are taken to be value of all its descendants. When set to \u0022remainder\u0022, items in \u0060values\u0060 corresponding to the root and the branches sectors are taken to be the extra part not part of the sum of the values at their leaves.\n\n Level: Sets the level from which this trace hierarchy is rendered. Set \u0060level\u0060 to \u0060\u0027\u0027\u0060 to start from the root node in the hierarchy. Must be an \u0022id\u0022 if \u0060ids\u0060 is filled in, otherwise plotly attempts to find a matching item in \u0060labels\u0060.\n\n Maxdepth: Sets the number of rendered sectors from any given \u0060level\u0060. Set \u0060maxdepth\u0060 to \u0022-1\u0022 to render all the levels in the hierarchy.\n\n ColorBar: Sets the ColorBar for the chart\n\nColors: Sets the color of each sector of this trace. If not specified, the default trace color set is used to pick the sector colors.\n"},{"uri":"https://plotly.net/reference/plotly-net-chartmap.html","title":"ChartMap","content":"ChartMap \n \nChartMap.Chart \nChart"},{"uri":"https://plotly.net/reference/plotly-net-chartmap-chart.html","title":"Chart","content":"Chart \n \nChart.ChoroplethMap \nChoroplethMap \nChart.ChoroplethMapbox \nChoroplethMapbox \nChart.DensityMapbox \nDensityMapbox \nChart.DensityMapbox \nDensityMapbox \nChart.LineGeo \nLineGeo \nChart.LineGeo \nLineGeo \nChart.LineGeo \nLineGeo \nChart.LineMapbox \nLineMapbox \nChart.LineMapbox \nLineMapbox \nChart.PointGeo \nPointGeo \nChart.PointGeo \nPointGeo \nChart.PointGeo \nPointGeo \nChart.PointMapbox \nPointMapbox \nChart.PointMapbox \nPointMapbox \nChart.ScatterGeo \nScatterGeo \nChart.ScatterGeo \nScatterGeo \nChart.ScatterGeo \nScatterGeo \nChart.ScatterMapbox \nScatterMapbox \nChart.ScatterMapbox \nScatterMapbox"},{"uri":"https://plotly.net/reference/plotly-net-chartmap-chart.html#ChoroplethMap","title":"Chart.ChoroplethMap","content":"Chart.ChoroplethMap \nChoroplethMap \n\n Computes the choropleth map plot\n"},{"uri":"https://plotly.net/reference/plotly-net-chartmap-chart.html#ChoroplethMapbox","title":"Chart.ChoroplethMapbox","content":"Chart.ChoroplethMapbox \nChoroplethMapbox \n\n Creates a ChoroplethMapbox Chart. \n\n Choropleth Maps display divided geographical areas or regions that are coloured, shaded or patterned in relation to \n a data variable. This provides a way to visualise values over a geographical area, which can show variation or \n patterns across the displayed location.\n\n GeoJSON features to be filled are set in \u0060geojson\u0060 The data that describes the choropleth value-to-color mapping is set in \u0060locations\u0060 and \u0060z\u0060.\n "},{"uri":"https://plotly.net/reference/plotly-net-chartmap-chart.html#DensityMapbox","title":"Chart.DensityMapbox","content":"Chart.DensityMapbox \nDensityMapbox \n\n Creates a DensityMapbox Chart that draws a bivariate kernel density estimation with a Gaussian kernel from \u0060lon\u0060 and \u0060lat\u0060 coordinates and optional \u0060z\u0060 values using a colorscale.\n "},{"uri":"https://plotly.net/reference/plotly-net-chartmap-chart.html#DensityMapbox","title":"Chart.DensityMapbox","content":"Chart.DensityMapbox \nDensityMapbox \n\n Creates a DensityMapbox Chart that draws a bivariate kernel density estimation with a Gaussian kernel from \u0060lon\u0060 and \u0060lat\u0060 coordinates and optional \u0060z\u0060 values using a colorscale.\n "},{"uri":"https://plotly.net/reference/plotly-net-chartmap-chart.html#LineGeo","title":"Chart.LineGeo","content":"Chart.LineGeo \nLineGeo \n\n Creates a LineGeo chart, where data is visualized as coordinates connected via lines on a geographic map.\n\n Parameters:\n\n locations   : Sets the coordinates via location IDs or names. Coordinates correspond to the centroid of each location given. See \u0060locationmode\u0060 for more info.\n\n Name        : Sets the trace name. The trace name appear as the legend item and on hover\n\n ShowMarkers : Determines wether or not markers will be rendered for each datum.\n\n ShowLegend  : Determines whether or not an item corresponding to this trace is shown in the legend.\n\n MarkerSymbol: Sets the type of symbol that datums are displayed as\n\n Color       : Sets Line/Marker Color\n\n Opacity     : Sets the Opacity of the trace\n\n Labels      : Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace\u0027s (x,y) coordinates. If trace \u0060hoverinfo\u0060 contains a \u0022text\u0022 flag and \u0022hovertext\u0022 is not set, these elements will be seen in the hover labels.\n\n TextPosition: Sets the positions of the \u0060text\u0060 elements with respects to the (lon,lat) coordinates.\n\n TextFont    : Sets the text font of this trace\n\n TextFont    : Sets the text font of this trace\n\n GeoJson     : Sets optional GeoJSON data associated with this trace. If not given, the features on the base map are used when \u0060locations\u0060 is set. It can be set as a valid GeoJSON object or as a URL string. Note that we only accept GeoJSONs of type \u0022FeatureCollection\u0022 or \u0022Feature\u0022 with geometries of type \u0022Polygon\u0022 or \u0022MultiPolygon\u0022.\n\n Connectgaps : Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.\n\n Fill        : Sets the area to fill with a solid color. Use with \u0060fillcolor\u0060 if not \u0022none\u0022. \u0022toself\u0022 connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape.\n\n Fillcolor   : Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.\n"},{"uri":"https://plotly.net/reference/plotly-net-chartmap-chart.html#LineGeo","title":"Chart.LineGeo","content":"Chart.LineGeo \nLineGeo \n\n Creates a LineGeo chart, where data is visualized as coordinates connected via lines on a geographic map.\n\n Parameters:\n \n lonlat      : Sets the (longitude,latitude) coordinates (in degrees North, degrees South).\n\n Name        : Sets the trace name. The trace name appear as the legend item and on hover\n\n ShowMarkers : Determines wether or not markers will be rendered for each datum.\n\n ShowLegend  : Determines whether or not an item corresponding to this trace is shown in the legend.\n\n MarkerSymbol: Sets the type of symbol that datums are displayed as\n\n Color       : Sets Line/Marker Color\n\n Opacity     : Sets the Opacity of the trace\n\n Labels      : Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace\u0027s (x,y) coordinates. If trace \u0060hoverinfo\u0060 contains a \u0022text\u0022 flag and \u0022hovertext\u0022 is not set, these elements will be seen in the hover labels.\n\n TextPosition: Sets the positions of the \u0060text\u0060 elements with respects to the (lon,lat) coordinates.\n\n TextFont    : Sets the text font of this trace\n\n TextFont    : Sets the text font of this trace\n\n GeoJson     : Sets optional GeoJSON data associated with this trace. If not given, the features on the base map are used when \u0060locations\u0060 is set. It can be set as a valid GeoJSON object or as a URL string. Note that we only accept GeoJSONs of type \u0022FeatureCollection\u0022 or \u0022Feature\u0022 with geometries of type \u0022Polygon\u0022 or \u0022MultiPolygon\u0022.\n\n Connectgaps : Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.\n\n Fill        : Sets the area to fill with a solid color. Use with \u0060fillcolor\u0060 if not \u0022none\u0022. \u0022toself\u0022 connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape.\n\n Fillcolor   : Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.\n"},{"uri":"https://plotly.net/reference/plotly-net-chartmap-chart.html#LineGeo","title":"Chart.LineGeo","content":"Chart.LineGeo \nLineGeo \n\n Creates a LineGeo chart, where data is visualized as coordinates connected via lines on a geographic map.\n\n Parameters:\n \n longitudes  : Sets the longitude coordinates (in degrees East).\n\n latitudes   : Sets the latitude coordinates (in degrees North).\n\n Name        : Sets the trace name. The trace name appear as the legend item and on hover\n\n ShowMarkers : Determines wether or not markers will be rendered for each datum.\n\n ShowLegend  : Determines whether or not an item corresponding to this trace is shown in the legend.\n\n MarkerSymbol: Sets the type of symbol that datums are displayed as\n\n Color       : Sets Line/Marker Color\n\n Opacity     : Sets the Opacity of the trace\n\n Labels      : Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace\u0027s (x,y) coordinates. If trace \u0060hoverinfo\u0060 contains a \u0022text\u0022 flag and \u0022hovertext\u0022 is not set, these elements will be seen in the hover labels.\n\n TextPosition: Sets the positions of the \u0060text\u0060 elements with respects to the (lon,lat) coordinates.\n\n TextFont    : Sets the text font of this trace\n\n Dash        : Sets the Line Dash style\n\n Width       : Sets the Line width\n\n TextFont    : Sets the text font of this trace\n\n GeoJson     : Sets optional GeoJSON data associated with this trace. If not given, the features on the base map are used when \u0060locations\u0060 is set. It can be set as a valid GeoJSON object or as a URL string. Note that we only accept GeoJSONs of type \u0022FeatureCollection\u0022 or \u0022Feature\u0022 with geometries of type \u0022Polygon\u0022 or \u0022MultiPolygon\u0022.\n\n Connectgaps : Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.\n\n Fill        : Sets the area to fill with a solid color. Use with \u0060fillcolor\u0060 if not \u0022none\u0022. \u0022toself\u0022 connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape.\n\n Fillcolor   : Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.\n"},{"uri":"https://plotly.net/reference/plotly-net-chartmap-chart.html#LineMapbox","title":"Chart.LineMapbox","content":"Chart.LineMapbox \nLineMapbox \n\n Creates a LineMapbox chart, where data is visualized by (longitude,latitude) pairs connected by a line on a geographic map using mapbox.\n\n Customize the mapbox layers, style, etc. by using Chart.withMapbox.\n\n You might need a Mapbox token, which you can also configure with Chart.withMapbox.\n "},{"uri":"https://plotly.net/reference/plotly-net-chartmap-chart.html#LineMapbox","title":"Chart.LineMapbox","content":"Chart.LineMapbox \nLineMapbox \n\n Creates a LineMapbox chart, where data is visualized by (longitude,latitude) pairs connected by a line on a geographic map using mapbox.\n\n Customize the mapbox layers, style, etc. by using Chart.withMapbox.\n\n You might need a Mapbox token, which you can also configure with Chart.withMapbox.\n "},{"uri":"https://plotly.net/reference/plotly-net-chartmap-chart.html#PointGeo","title":"Chart.PointGeo","content":"Chart.PointGeo \nPointGeo \n\n Creates a PointGeo chart, where data is visualized as points on a geographic map.\n\n Parameters:\n\n locations   : Sets the coordinates via location IDs or names. Coordinates correspond to the centroid of each location given. See \u0060locationmode\u0060 for more info.\n\n Name        : Sets the trace name. The trace name appear as the legend item and on hover\n\n ShowLegend  : Determines whether or not an item corresponding to this trace is shown in the legend.\n\n MarkerSymbol: Sets the type of symbol that datums are displayed as\n\n Color       : Sets Line/Marker Color\n\n Opacity     : Sets the Opacity of the trace\n\n Labels      : Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace\u0027s (x,y) coordinates. If trace \u0060hoverinfo\u0060 contains a \u0022text\u0022 flag and \u0022hovertext\u0022 is not set, these elements will be seen in the hover labels.\n\n TextPosition: Sets the positions of the \u0060text\u0060 elements with respects to the (x,y) coordinates.\n\n TextFont    : Sets the text font of this trace\n\n GeoJson     : Sets optional GeoJSON data associated with this trace. If not given, the features on the base map are used when \u0060locations\u0060 is set. It can be set as a valid GeoJSON object or as a URL string. Note that we only accept GeoJSONs of type \u0022FeatureCollection\u0022 or \u0022Feature\u0022 with geometries of type \u0022Polygon\u0022 or \u0022MultiPolygon\u0022.\n\n Connectgaps : Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.\n\n Fill        : Sets the area to fill with a solid color. Use with \u0060fillcolor\u0060 if not \u0022none\u0022. \u0022toself\u0022 connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape.\n\n Fillcolor   : Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.\n"},{"uri":"https://plotly.net/reference/plotly-net-chartmap-chart.html#PointGeo","title":"Chart.PointGeo","content":"Chart.PointGeo \nPointGeo \n\n Creates a PointGeo chart, where data is visualized as points on a geographic map.\n\n Parameters:\n \n lonlat      : Sets the (longitude,latitude) coordinates (in degrees North, degrees South).\n\n Name        : Sets the trace name. The trace name appear as the legend item and on hover\n\n ShowLegend  : Determines whether or not an item corresponding to this trace is shown in the legend.\n\n MarkerSymbol: Sets the type of symbol that datums are displayed as\n\n Color       : Sets Line/Marker Color\n\n Opacity     : Sets the Opacity of the trace\n\n Labels      : Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace\u0027s (x,y) coordinates. If trace \u0060hoverinfo\u0060 contains a \u0022text\u0022 flag and \u0022hovertext\u0022 is not set, these elements will be seen in the hover labels.\n\n TextPosition: Sets the positions of the \u0060text\u0060 elements with respects to the (x,y) coordinates.\n\n TextFont    : Sets the text font of this trace\n\n GeoJson     : Sets optional GeoJSON data associated with this trace. If not given, the features on the base map are used when \u0060locations\u0060 is set. It can be set as a valid GeoJSON object or as a URL string. Note that we only accept GeoJSONs of type \u0022FeatureCollection\u0022 or \u0022Feature\u0022 with geometries of type \u0022Polygon\u0022 or \u0022MultiPolygon\u0022.\n\n Connectgaps : Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.\n\n Fill        : Sets the area to fill with a solid color. Use with \u0060fillcolor\u0060 if not \u0022none\u0022. \u0022toself\u0022 connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape.\n\n Fillcolor   : Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.\n"},{"uri":"https://plotly.net/reference/plotly-net-chartmap-chart.html#PointGeo","title":"Chart.PointGeo","content":"Chart.PointGeo \nPointGeo \n\n Creates a PointGeo chart, where data is visualized as points on a geographic map.\n\n Parameters:\n \n longitudes  : Sets the longitude coordinates (in degrees East).\n\n latitudes   : Sets the latitude coordinates (in degrees North).\n\n Name        : Sets the trace name. The trace name appear as the legend item and on hover\n\n ShowLegend  : Determines whether or not an item corresponding to this trace is shown in the legend.\n\n MarkerSymbol: Sets the type of symbol that datums are displayed as\n\n Color       : Sets Line/Marker Color\n\n Opacity     : Sets the Opacity of the trace\n\n Labels      : Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace\u0027s (x,y) coordinates. If trace \u0060hoverinfo\u0060 contains a \u0022text\u0022 flag and \u0022hovertext\u0022 is not set, these elements will be seen in the hover labels.\n\n TextPosition: Sets the positions of the \u0060text\u0060 elements with respects to the (x,y) coordinates.\n\n TextFont    : Sets the text font of this trace\n\n GeoJson     : Sets optional GeoJSON data associated with this trace. If not given, the features on the base map are used when \u0060locations\u0060 is set. It can be set as a valid GeoJSON object or as a URL string. Note that we only accept GeoJSONs of type \u0022FeatureCollection\u0022 or \u0022Feature\u0022 with geometries of type \u0022Polygon\u0022 or \u0022MultiPolygon\u0022.\n\n Connectgaps : Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.\n\n Fill        : Sets the area to fill with a solid color. Use with \u0060fillcolor\u0060 if not \u0022none\u0022. \u0022toself\u0022 connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape.\n\n Fillcolor   : Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.\n"},{"uri":"https://plotly.net/reference/plotly-net-chartmap-chart.html#PointMapbox","title":"Chart.PointMapbox","content":"Chart.PointMapbox \nPointMapbox \n\n Creates a PointMapbox chart, where data is visualized by (longitude,latitude) pairs as Points on a geographic map using mapbox.\n\n Customize the mapbox layers, style, etc. by using Chart.withMapbox.\n\n You might need a Mapbox token, which you can also configure with Chart.withMapbox.\n "},{"uri":"https://plotly.net/reference/plotly-net-chartmap-chart.html#PointMapbox","title":"Chart.PointMapbox","content":"Chart.PointMapbox \nPointMapbox \n\n Creates a PointMapbox chart, where data is visualized by (longitude,latitude) pairs as Points on a geographic map using mapbox.\n\n Customize the mapbox layers, style, etc. by using Chart.withMapbox.\n\n You might need a Mapbox token, which you can also configure with Chart.withMapbox.\n "},{"uri":"https://plotly.net/reference/plotly-net-chartmap-chart.html#ScatterGeo","title":"Chart.ScatterGeo","content":"Chart.ScatterGeo \nScatterGeo \n\n Creates a ScatterGeo chart, where data is visualized on a geographic map.\n ScatterGeo charts are the basis of GeoPoint, GeoLine, and GeoBubble Charts, and can be customized as such. We also provide abstractions for those: Chart.GeoPoint, Chart.GeoLine, Chart.GeoBubble\n\n Parameters:\n\n locations   : Sets the coordinates via location IDs or names. Coordinates correspond to the centroid of each location given. See \u0060locationmode\u0060 for more info.\n\n mode        : Determines the drawing mode for this scatter trace.\n\n Name        : Sets the trace name. The trace name appear as the legend item and on hover\n\n ShowLegend  : Determines whether or not an item corresponding to this trace is shown in the legend.\n\n MarkerSymbol: Sets the type of symbol that datums are displayed as\n\n Color       : Sets Line/Marker Color\n\n Opacity     : Sets the Opacity of the trace\n\n Labels      : Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace\u0027s (x,y) coordinates. If trace \u0060hoverinfo\u0060 contains a \u0022text\u0022 flag and \u0022hovertext\u0022 is not set, these elements will be seen in the hover labels.\n\n TextPosition: Sets the positions of the \u0060text\u0060 elements with respects to the (x,y) coordinates.\n\n TextFont    : Sets the text font of this trace\n\n Dash        : Sets the Line Dash style\n\n Width       : Sets the Line width\n\n GeoJson     : Sets optional GeoJSON data associated with this trace. If not given, the features on the base map are used when \u0060locations\u0060 is set. It can be set as a valid GeoJSON object or as a URL string. Note that we only accept GeoJSONs of type \u0022FeatureCollection\u0022 or \u0022Feature\u0022 with geometries of type \u0022Polygon\u0022 or \u0022MultiPolygon\u0022.\n\n Connectgaps : Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.\n\n Fill        : Sets the area to fill with a solid color. Use with \u0060fillcolor\u0060 if not \u0022none\u0022. \u0022toself\u0022 connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape.\n\n Fillcolor   : Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.\n"},{"uri":"https://plotly.net/reference/plotly-net-chartmap-chart.html#ScatterGeo","title":"Chart.ScatterGeo","content":"Chart.ScatterGeo \nScatterGeo \n\n Creates a ScatterGeo chart, where data is visualized on a geographic map.\n ScatterGeo charts are the basis of GeoPoint, GeoLine, and GeoBubble Charts, and can be customized as such. We also provide abstractions for those: Chart.GeoPoint, Chart.GeoLine, Chart.GeoBubble\n\n Parameters:\n\n lonlat      : Sets the (longitude,latitude) coordinates (in degrees North, degrees South).\n\n mode        : Determines the drawing mode for this scatter trace.\n\n Name        : Sets the trace name. The trace name appear as the legend item and on hover\n\n ShowLegend  : Determines whether or not an item corresponding to this trace is shown in the legend.\n\n MarkerSymbol: Sets the type of symbol that datums are displayed as\n\n Color       : Sets Line/Marker Color\n\n Opacity     : Sets the Opacity of the trace\n\n Labels      : Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace\u0027s (x,y) coordinates. If trace \u0060hoverinfo\u0060 contains a \u0022text\u0022 flag and \u0022hovertext\u0022 is not set, these elements will be seen in the hover labels.\n\n TextPosition: Sets the positions of the \u0060text\u0060 elements with respects to the (x,y) coordinates.\n\n TextFont    : Sets the text font of this trace\n\n Dash        : Sets the Line Dash style\n\n Width       : Sets the Line width\n\n GeoJson     : Sets optional GeoJSON data associated with this trace. If not given, the features on the base map are used when \u0060locations\u0060 is set. It can be set as a valid GeoJSON object or as a URL string. Note that we only accept GeoJSONs of type \u0022FeatureCollection\u0022 or \u0022Feature\u0022 with geometries of type \u0022Polygon\u0022 or \u0022MultiPolygon\u0022.\n\n Connectgaps : Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.\n\n Fill        : Sets the area to fill with a solid color. Use with \u0060fillcolor\u0060 if not \u0022none\u0022. \u0022toself\u0022 connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape.\n\n Fillcolor   : Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.\n"},{"uri":"https://plotly.net/reference/plotly-net-chartmap-chart.html#ScatterGeo","title":"Chart.ScatterGeo","content":"Chart.ScatterGeo \nScatterGeo \n\n Creates a ScatterGeo chart, where data is visualized on a geographic map.\n ScatterGeo charts are the basis of GeoPoint, GeoLine, and GeoBubble Charts, and can be customized as such. We also provide abstractions for those: Chart.GeoPoint, Chart.GeoLine, Chart.GeoBubble\n\n Parameters:\n \n longitudes  : Sets the longitude coordinates (in degrees East).\n\n latitudes   : Sets the latitude coordinates (in degrees North).\n\n Name        : Sets the trace name. The trace name appear as the legend item and on hover\n\n ShowLegend  : Determines whether or not an item corresponding to this trace is shown in the legend.\n\n MarkerSymbol: Sets the type of symbol that datums are displayed as\n\n Color       : Sets Line/Marker Color\n\n Opacity     : Sets the Opacity of the trace\n\n Labels      : Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace\u0027s (x,y) coordinates. If trace \u0060hoverinfo\u0060 contains a \u0022text\u0022 flag and \u0022hovertext\u0022 is not set, these elements will be seen in the hover labels.\n\n TextPosition: Sets the positions of the \u0060text\u0060 elements with respects to the (x,y) coordinates.\n\n TextFont    : Sets the text font of this trace\n\n Dash        : Sets the Line Dash style\n\n Width       : Sets the Line width\n\n GeoJson     : Sets optional GeoJSON data associated with this trace. If not given, the features on the base map are used when \u0060locations\u0060 is set. It can be set as a valid GeoJSON object or as a URL string. Note that we only accept GeoJSONs of type \u0022FeatureCollection\u0022 or \u0022Feature\u0022 with geometries of type \u0022Polygon\u0022 or \u0022MultiPolygon\u0022.\n\n Connectgaps : Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.\n\n Fill        : Sets the area to fill with a solid color. Use with \u0060fillcolor\u0060 if not \u0022none\u0022. \u0022toself\u0022 connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape.\n\n Fillcolor   : Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.\n"},{"uri":"https://plotly.net/reference/plotly-net-chartmap-chart.html#ScatterMapbox","title":"Chart.ScatterMapbox","content":"Chart.ScatterMapbox \nScatterMapbox \n\n Creates a ScatterMapbox chart, where data is visualized by (longitude,latitude) pairs on a geographic map using mapbox.\n\n Customize the mapbox layers, style, etc. by using Chart.withMapbox.\n\n You might need a Mapbox token, which you can also configure with Chart.withMapbox.\n\n ScatterGeo charts are the basis of PointMapbox and LineMapbox Charts, and can be customized as such. We also provide abstractions for those: Chart.PointMapbox and Chart.LineMapbox\n "},{"uri":"https://plotly.net/reference/plotly-net-chartmap-chart.html#ScatterMapbox","title":"Chart.ScatterMapbox","content":"Chart.ScatterMapbox \nScatterMapbox \n\n Creates a ScatterMapbox chart, where data is visualized by (longitude,latitude) pairs on a geographic map using mapbox.\n\n Customize the mapbox layers, style, etc. by using Chart.withMapbox.\n\n You might need a Mapbox token, which you can also configure with Chart.withMapbox.\n\n ScatterGeo charts are the basis of PointMapbox and LineMapbox Charts, and can be customized as such. We also provide abstractions for those: Chart.PointMapbox and Chart.LineMapbox\n "},{"uri":"https://plotly.net/reference/plotly-net-chartpolar.html","title":"ChartPolar","content":"ChartPolar \n \nChartPolar.Chart \nChart"},{"uri":"https://plotly.net/reference/plotly-net-chartpolar-chart.html","title":"Chart","content":"Chart \n \nChart.BarPolar \nBarPolar \nChart.BubblePolar \nBubblePolar \nChart.BubblePolar \nBubblePolar \nChart.LinePolar \nLinePolar \nChart.LinePolar \nLinePolar \nChart.PointPolar \nPointPolar \nChart.PointPolar \nPointPolar \nChart.ScatterPolar \nScatterPolar \nChart.ScatterPolar \nScatterPolar \nChart.SplinePolar \nSplinePolar \nChart.SplinePolar \nSplinePolar"},{"uri":"https://plotly.net/reference/plotly-net-chartpolar-chart.html#BarPolar","title":"Chart.BarPolar","content":"Chart.BarPolar \nBarPolar \n"},{"uri":"https://plotly.net/reference/plotly-net-chartpolar-chart.html#BubblePolar","title":"Chart.BubblePolar","content":"Chart.BubblePolar \nBubblePolar \n"},{"uri":"https://plotly.net/reference/plotly-net-chartpolar-chart.html#BubblePolar","title":"Chart.BubblePolar","content":"Chart.BubblePolar \nBubblePolar \n"},{"uri":"https://plotly.net/reference/plotly-net-chartpolar-chart.html#LinePolar","title":"Chart.LinePolar","content":"Chart.LinePolar \nLinePolar \n"},{"uri":"https://plotly.net/reference/plotly-net-chartpolar-chart.html#LinePolar","title":"Chart.LinePolar","content":"Chart.LinePolar \nLinePolar \n"},{"uri":"https://plotly.net/reference/plotly-net-chartpolar-chart.html#PointPolar","title":"Chart.PointPolar","content":"Chart.PointPolar \nPointPolar \n"},{"uri":"https://plotly.net/reference/plotly-net-chartpolar-chart.html#PointPolar","title":"Chart.PointPolar","content":"Chart.PointPolar \nPointPolar \n"},{"uri":"https://plotly.net/reference/plotly-net-chartpolar-chart.html#ScatterPolar","title":"Chart.ScatterPolar","content":"Chart.ScatterPolar \nScatterPolar \n\n Uses points, line or both depending on the mode to represent data points in a polar chart\n"},{"uri":"https://plotly.net/reference/plotly-net-chartpolar-chart.html#ScatterPolar","title":"Chart.ScatterPolar","content":"Chart.ScatterPolar \nScatterPolar \n\n Uses points, line or both depending on the mode to represent data points in a polar chart\n"},{"uri":"https://plotly.net/reference/plotly-net-chartpolar-chart.html#SplinePolar","title":"Chart.SplinePolar","content":"Chart.SplinePolar \nSplinePolar \n"},{"uri":"https://plotly.net/reference/plotly-net-chartpolar-chart.html#SplinePolar","title":"Chart.SplinePolar","content":"Chart.SplinePolar \nSplinePolar \n"},{"uri":"https://plotly.net/reference/plotly-net-charttemplates.html","title":"ChartTemplates","content":"ChartTemplates \n \nChartTemplates.ColorWays \nColorWays \nChartTemplates.light \nlight \nChartTemplates.lightMirrored \nlightMirrored \nChartTemplates.dark \ndark \nChartTemplates.darkMirrored \ndarkMirrored \nChartTemplates.fslab \nfslab \nChartTemplates.transparent \ntransparent \nChartTemplates.transparentMirrored \ntransparentMirrored \nChartTemplates.plotly \nplotly"},{"uri":"https://plotly.net/reference/plotly-net-charttemplates.html#light","title":"ChartTemplates.light","content":"ChartTemplates.light \nlight \n"},{"uri":"https://plotly.net/reference/plotly-net-charttemplates.html#lightMirrored","title":"ChartTemplates.lightMirrored","content":"ChartTemplates.lightMirrored \nlightMirrored \n"},{"uri":"https://plotly.net/reference/plotly-net-charttemplates.html#dark","title":"ChartTemplates.dark","content":"ChartTemplates.dark \ndark \n"},{"uri":"https://plotly.net/reference/plotly-net-charttemplates.html#darkMirrored","title":"ChartTemplates.darkMirrored","content":"ChartTemplates.darkMirrored \ndarkMirrored \n"},{"uri":"https://plotly.net/reference/plotly-net-charttemplates.html#fslab","title":"ChartTemplates.fslab","content":"ChartTemplates.fslab \nfslab \n"},{"uri":"https://plotly.net/reference/plotly-net-charttemplates.html#transparent","title":"ChartTemplates.transparent","content":"ChartTemplates.transparent \ntransparent \n"},{"uri":"https://plotly.net/reference/plotly-net-charttemplates.html#transparentMirrored","title":"ChartTemplates.transparentMirrored","content":"ChartTemplates.transparentMirrored \ntransparentMirrored \n"},{"uri":"https://plotly.net/reference/plotly-net-charttemplates.html#plotly","title":"ChartTemplates.plotly","content":"ChartTemplates.plotly \nplotly \n\n the default template, as used in the python lib by default.\n"},{"uri":"https://plotly.net/reference/plotly-net-charttemplates-colorways.html","title":"ColorWays","content":"ColorWays \n\n A colorway is an array of colors that contains the default colors for traces\n \nColorWays.plotly \nplotly \nColorWays.fslab \nfslab"},{"uri":"https://plotly.net/reference/plotly-net-charttemplates-colorways.html#plotly","title":"ColorWays.plotly","content":"ColorWays.plotly \nplotly \n"},{"uri":"https://plotly.net/reference/plotly-net-charttemplates-colorways.html#fslab","title":"ColorWays.fslab","content":"ColorWays.fslab \nfslab \n"},{"uri":"https://plotly.net/reference/plotly-net-chartternary.html","title":"ChartTernary","content":"ChartTernary \n \nChartTernary.Chart \nChart"},{"uri":"https://plotly.net/reference/plotly-net-chartternary-chart.html","title":"Chart","content":"Chart \n \nChart.LineTernary \nLineTernary \nChart.LineTernary \nLineTernary \nChart.PointTernary \nPointTernary \nChart.PointTernary \nPointTernary \nChart.ScatterTernary \nScatterTernary \nChart.ScatterTernary \nScatterTernary"},{"uri":"https://plotly.net/reference/plotly-net-chartternary-chart.html#LineTernary","title":"Chart.LineTernary","content":"Chart.LineTernary \nLineTernary \n"},{"uri":"https://plotly.net/reference/plotly-net-chartternary-chart.html#LineTernary","title":"Chart.LineTernary","content":"Chart.LineTernary \nLineTernary \n"},{"uri":"https://plotly.net/reference/plotly-net-chartternary-chart.html#PointTernary","title":"Chart.PointTernary","content":"Chart.PointTernary \nPointTernary \n"},{"uri":"https://plotly.net/reference/plotly-net-chartternary-chart.html#PointTernary","title":"Chart.PointTernary","content":"Chart.PointTernary \nPointTernary \n"},{"uri":"https://plotly.net/reference/plotly-net-chartternary-chart.html#ScatterTernary","title":"Chart.ScatterTernary","content":"Chart.ScatterTernary \nScatterTernary \n"},{"uri":"https://plotly.net/reference/plotly-net-chartternary-chart.html#ScatterTernary","title":"Chart.ScatterTernary","content":"Chart.ScatterTernary \nScatterTernary \n"},{"uri":"https://plotly.net/reference/plotly-net-colormodule.html","title":"Color","content":"Color \n \nColor.Table \nTable"},{"uri":"https://plotly.net/reference/plotly-net-colormodule-table.html","title":"Table","content":"Table \n \nTable.Office \nOffice \nTable.StatisticalGraphics24 \nStatisticalGraphics24 \nTable.black \nblack \nTable.blackLite \nblackLite \nTable.white \nwhite"},{"uri":"https://plotly.net/reference/plotly-net-colormodule-table.html#black","title":"Table.black","content":"Table.black \nblack \n"},{"uri":"https://plotly.net/reference/plotly-net-colormodule-table.html#blackLite","title":"Table.blackLite","content":"Table.blackLite \nblackLite \n"},{"uri":"https://plotly.net/reference/plotly-net-colormodule-table.html#white","title":"Table.white","content":"Table.white \nwhite \n"},{"uri":"https://plotly.net/reference/plotly-net-colormodule-table-office.html","title":"Office","content":"Office \n\n Color palette from Microsoft office 2016\n \nOffice.blue \nblue \nOffice.lightBlue \nlightBlue \nOffice.darkBlue \ndarkBlue \nOffice.red \nred \nOffice.lightRed \nlightRed \nOffice.orange \norange \nOffice.lightOrange \nlightOrange \nOffice.yellow \nyellow \nOffice.lightYellow \nlightYellow \nOffice.darkYellow \ndarkYellow \nOffice.green \ngreen \nOffice.lightGreen \nlightGreen \nOffice.darkGreen \ndarkGreen \nOffice.grey \ngrey \nOffice.lightGrey \nlightGrey"},{"uri":"https://plotly.net/reference/plotly-net-colormodule-table-office.html#blue","title":"Office.blue","content":"Office.blue \nblue \n"},{"uri":"https://plotly.net/reference/plotly-net-colormodule-table-office.html#lightBlue","title":"Office.lightBlue","content":"Office.lightBlue \nlightBlue \n"},{"uri":"https://plotly.net/reference/plotly-net-colormodule-table-office.html#darkBlue","title":"Office.darkBlue","content":"Office.darkBlue \ndarkBlue \n"},{"uri":"https://plotly.net/reference/plotly-net-colormodule-table-office.html#red","title":"Office.red","content":"Office.red \nred \n"},{"uri":"https://plotly.net/reference/plotly-net-colormodule-table-office.html#lightRed","title":"Office.lightRed","content":"Office.lightRed \nlightRed \n"},{"uri":"https://plotly.net/reference/plotly-net-colormodule-table-office.html#orange","title":"Office.orange","content":"Office.orange \norange \n"},{"uri":"https://plotly.net/reference/plotly-net-colormodule-table-office.html#lightOrange","title":"Office.lightOrange","content":"Office.lightOrange \nlightOrange \n"},{"uri":"https://plotly.net/reference/plotly-net-colormodule-table-office.html#yellow","title":"Office.yellow","content":"Office.yellow \nyellow \n"},{"uri":"https://plotly.net/reference/plotly-net-colormodule-table-office.html#lightYellow","title":"Office.lightYellow","content":"Office.lightYellow \nlightYellow \n"},{"uri":"https://plotly.net/reference/plotly-net-colormodule-table-office.html#darkYellow","title":"Office.darkYellow","content":"Office.darkYellow \ndarkYellow \n"},{"uri":"https://plotly.net/reference/plotly-net-colormodule-table-office.html#green","title":"Office.green","content":"Office.green \ngreen \n"},{"uri":"https://plotly.net/reference/plotly-net-colormodule-table-office.html#lightGreen","title":"Office.lightGreen","content":"Office.lightGreen \nlightGreen \n"},{"uri":"https://plotly.net/reference/plotly-net-colormodule-table-office.html#darkGreen","title":"Office.darkGreen","content":"Office.darkGreen \ndarkGreen \n"},{"uri":"https://plotly.net/reference/plotly-net-colormodule-table-office.html#grey","title":"Office.grey","content":"Office.grey \ngrey \n"},{"uri":"https://plotly.net/reference/plotly-net-colormodule-table-office.html#lightGrey","title":"Office.lightGrey","content":"Office.lightGrey \nlightGrey \n"},{"uri":"https://plotly.net/reference/plotly-net-colormodule-table-statisticalgraphics24.html","title":"StatisticalGraphics24","content":"StatisticalGraphics24 \n \nStatisticalGraphics24.a \na"},{"uri":"https://plotly.net/reference/plotly-net-colormodule-table-statisticalgraphics24.html#a","title":"StatisticalGraphics24.a","content":"StatisticalGraphics24.a \na \n"},{"uri":"https://plotly.net/reference/plotly-net-defaults.html","title":"Defaults","content":"Defaults \n \nDefaults.DefaultWidth \nDefaultWidth \nDefaults.DefaultHeight \nDefaultHeight \nDefaults.DefaultConfig \nDefaultConfig \nDefaults.DefaultDisplayOptions \nDefaultDisplayOptions \nDefaults.DefaultTemplate \nDefaultTemplate"},{"uri":"https://plotly.net/reference/plotly-net-defaults.html#DefaultWidth","title":"Defaults.DefaultWidth","content":"Defaults.DefaultWidth \nDefaultWidth \n"},{"uri":"https://plotly.net/reference/plotly-net-defaults.html#DefaultHeight","title":"Defaults.DefaultHeight","content":"Defaults.DefaultHeight \nDefaultHeight \n"},{"uri":"https://plotly.net/reference/plotly-net-defaults.html#DefaultConfig","title":"Defaults.DefaultConfig","content":"Defaults.DefaultConfig \nDefaultConfig \n"},{"uri":"https://plotly.net/reference/plotly-net-defaults.html#DefaultDisplayOptions","title":"Defaults.DefaultDisplayOptions","content":"Defaults.DefaultDisplayOptions \nDefaultDisplayOptions \n"},{"uri":"https://plotly.net/reference/plotly-net-defaults.html#DefaultTemplate","title":"Defaults.DefaultTemplate","content":"Defaults.DefaultTemplate \nDefaultTemplate \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart.html","title":"GenericChart","content":"GenericChart \n\n Module to represent a GenericChart\n \nGenericChart.Figure \nFigure \nGenericChart.GenericChart \nGenericChart \nGenericChart.toFigure \ntoFigure \nGenericChart.fromFigure \nfromFigure \nGenericChart.getTraces \ngetTraces \nGenericChart.getLayout \ngetLayout \nGenericChart.setLayout \nsetLayout \nGenericChart.addLayout \naddLayout \nGenericChart.tryGetLayoutSize \ntryGetLayoutSize \nGenericChart.getConfig \ngetConfig \nGenericChart.setConfig \nsetConfig \nGenericChart.getDisplayOptions \ngetDisplayOptions \nGenericChart.setDisplayOptions \nsetDisplayOptions \nGenericChart.combine \ncombine \nGenericChart.toChartHTML \ntoChartHTML \nGenericChart.toChartHtmlWithSize \ntoChartHtmlWithSize \nGenericChart.toEmbeddedHTML \ntoEmbeddedHTML \nGenericChart.toChartImage \ntoChartImage \nGenericChart.toEmbeddedImage \ntoEmbeddedImage \nGenericChart.mapTrace \nmapTrace \nGenericChart.mapiTrace \nmapiTrace \nGenericChart.countTrace \ncountTrace \nGenericChart.existsTrace \nexistsTrace \nGenericChart.ofTraceObject \nofTraceObject \nGenericChart.ofTraceObjects \nofTraceObjects \nGenericChart.mapLayout \nmapLayout \nGenericChart.mapConfig \nmapConfig \nGenericChart.mapDisplayOptions \nmapDisplayOptions \nGenericChart.getTraceID \ngetTraceID \nGenericChart.getTraceIDs \ngetTraceIDs"},{"uri":"https://plotly.net/reference/plotly-net-genericchart.html#toFigure","title":"GenericChart.toFigure","content":"GenericChart.toFigure \ntoFigure \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart.html#fromFigure","title":"GenericChart.fromFigure","content":"GenericChart.fromFigure \nfromFigure \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart.html#getTraces","title":"GenericChart.getTraces","content":"GenericChart.getTraces \ngetTraces \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart.html#getLayout","title":"GenericChart.getLayout","content":"GenericChart.getLayout \ngetLayout \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart.html#setLayout","title":"GenericChart.setLayout","content":"GenericChart.setLayout \nsetLayout \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart.html#addLayout","title":"GenericChart.addLayout","content":"GenericChart.addLayout \naddLayout \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart.html#tryGetLayoutSize","title":"GenericChart.tryGetLayoutSize","content":"GenericChart.tryGetLayoutSize \ntryGetLayoutSize \n\n Returns a tuple containing the width and height of a GenericChart\u0027s layout if the property is set, otherwise returns None\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart.html#getConfig","title":"GenericChart.getConfig","content":"GenericChart.getConfig \ngetConfig \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart.html#setConfig","title":"GenericChart.setConfig","content":"GenericChart.setConfig \nsetConfig \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart.html#getDisplayOptions","title":"GenericChart.getDisplayOptions","content":"GenericChart.getDisplayOptions \ngetDisplayOptions \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart.html#setDisplayOptions","title":"GenericChart.setDisplayOptions","content":"GenericChart.setDisplayOptions \nsetDisplayOptions \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart.html#combine","title":"GenericChart.combine","content":"GenericChart.combine \ncombine \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart.html#toChartHTML","title":"GenericChart.toChartHTML","content":"GenericChart.toChartHTML \ntoChartHTML \n\n Converts a GenericChart to it HTML representation. The div layer has a default size of 600 if not specified otherwise.\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart.html#toChartHtmlWithSize","title":"GenericChart.toChartHtmlWithSize","content":"GenericChart.toChartHtmlWithSize \ntoChartHtmlWithSize \n\n Converts a GenericChart to it HTML representation and set the size of the div\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart.html#toEmbeddedHTML","title":"GenericChart.toEmbeddedHTML","content":"GenericChart.toEmbeddedHTML \ntoEmbeddedHTML \n\n Converts a GenericChart to it HTML representation and embeds it into a html page.\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart.html#toChartImage","title":"GenericChart.toChartImage","content":"GenericChart.toChartImage \ntoChartImage \n\n Converts a GenericChart to its Image representation\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart.html#toEmbeddedImage","title":"GenericChart.toEmbeddedImage","content":"GenericChart.toEmbeddedImage \ntoEmbeddedImage \n\n Converts a GenericChart to an image and embeds it into a html page\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart.html#mapTrace","title":"GenericChart.mapTrace","content":"GenericChart.mapTrace \nmapTrace \n\n Creates a new GenericChart whose traces are the results of applying the given function to each of the trace of the GenericChart.\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart.html#mapiTrace","title":"GenericChart.mapiTrace","content":"GenericChart.mapiTrace \nmapiTrace \n\n Creates a new GenericChart whose traces are the results of applying the given function to each of the trace of the GenericChart.\n The integer index passed to the function indicates the index (from 0) of element being transformed.\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart.html#countTrace","title":"GenericChart.countTrace","content":"GenericChart.countTrace \ncountTrace \n\n Returns the number of traces within the GenericChart\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart.html#existsTrace","title":"GenericChart.existsTrace","content":"GenericChart.existsTrace \nexistsTrace \n\n Returns true if the given chart contains a trace for which the predicate function returns true\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart.html#ofTraceObject","title":"GenericChart.ofTraceObject","content":"GenericChart.ofTraceObject \nofTraceObject \n\n Converts from a trace object and a layout object into GenericChart. If useDefaults = true, also sets the default Chart properties found in \u0060Defaults\u0060\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart.html#ofTraceObjects","title":"GenericChart.ofTraceObjects","content":"GenericChart.ofTraceObjects \nofTraceObjects \n\n Converts from a list of trace objects and a layout object into GenericChart. If useDefaults = true, also sets the default Chart properties found in \u0060Defaults\u0060\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart.html#mapLayout","title":"GenericChart.mapLayout","content":"GenericChart.mapLayout \nmapLayout \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart.html#mapConfig","title":"GenericChart.mapConfig","content":"GenericChart.mapConfig \nmapConfig \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart.html#mapDisplayOptions","title":"GenericChart.mapDisplayOptions","content":"GenericChart.mapDisplayOptions \nmapDisplayOptions \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart.html#getTraceID","title":"GenericChart.getTraceID","content":"GenericChart.getTraceID \ngetTraceID \n\n returns a single TraceID (when all traces of the charts are of the same type), or traceID.Multi if the chart contains traces of multiple different types\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart.html#getTraceIDs","title":"GenericChart.getTraceIDs","content":"GenericChart.getTraceIDs \ngetTraceIDs \n\n returns a list of TraceIDs representing the types of all traces contained in the chart.\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart-figure.html","title":"Figure","content":"Figure \n \nFigure.create \ncreate \nFigure.Data \nData \nFigure.Layout \nLayout \nFigure.Frames \nFrames"},{"uri":"https://plotly.net/reference/plotly-net-genericchart-figure.html#create","title":"Figure.create","content":"Figure.create \ncreate \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart-figure.html#Data","title":"Figure.Data","content":"Figure.Data \nData \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart-figure.html#Layout","title":"Figure.Layout","content":"Figure.Layout \nLayout \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart-figure.html#Frames","title":"Figure.Frames","content":"Figure.Frames \nFrames \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart-genericchart.html","title":"GenericChart","content":"GenericChart \n \nGenericChart.Chart \nChart \nGenericChart.MultiChart \nMultiChart"},{"uri":"https://plotly.net/reference/plotly-net-genericchart-genericchart.html#Chart","title":"GenericChart.Chart","content":"GenericChart.Chart \nChart \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart-genericchart.html#MultiChart","title":"GenericChart.MultiChart","content":"GenericChart.MultiChart \nMultiChart \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html","title":"GenericChartExtensions","content":"GenericChartExtensions \n\nExtension methods for providing a Plotly.NET fluent interface pattern for C#\n \nGenericChartExtensions.WithTraceName \nWithTraceName \nGenericChartExtensions.WithAxisAnchor \nWithAxisAnchor \nGenericChartExtensions.WithMarker \nWithMarker \nGenericChartExtensions.WithMarkerStyle \nWithMarkerStyle \nGenericChartExtensions.WithLine \nWithLine \nGenericChartExtensions.WithLineStyle \nWithLineStyle \nGenericChartExtensions.WithXError \nWithXError \nGenericChartExtensions.WithXErrorStyle \nWithXErrorStyle \nGenericChartExtensions.WithYError \nWithYError \nGenericChartExtensions.WithYErrorStyle \nWithYErrorStyle \nGenericChartExtensions.WithZError \nWithZError \nGenericChartExtensions.WithZErrorStyle \nWithZErrorStyle \nGenericChartExtensions.WithXAxis \nWithXAxis \nGenericChartExtensions.WithXAxisStyle \nWithXAxisStyle \nGenericChartExtensions.WithXAxisRangeSlider \nWithXAxisRangeSlider \nGenericChartExtensions.WithYAxis \nWithYAxis \nGenericChartExtensions.WithYAxisStyle \nWithYAxisStyle \nGenericChartExtensions.WithZAxis \nWithZAxis \nGenericChartExtensions.WithZAxisStyle \nWithZAxisStyle \nGenericChartExtensions.withColorBar \nwithColorBar \nGenericChartExtensions.WithColorBarStyle \nWithColorBarStyle \nGenericChartExtensions.WithLayout \nWithLayout \nGenericChartExtensions.WithLayoutGrid \nWithLayoutGrid \nGenericChartExtensions.WithLegend \nWithLegend \nGenericChartExtensions.WithGeo \nWithGeo \nGenericChartExtensions.withMapbox \nwithMapbox \nGenericChartExtensions.WithGeoStyle \nWithGeoStyle \nGenericChartExtensions.WithMapProjection \nWithMapProjection \nGenericChartExtensions.WithLayoutGridStyle \nWithLayoutGridStyle \nGenericChartExtensions.WithConfig \nWithConfig \nGenericChartExtensions.WithAnnotation \nWithAnnotation \nGenericChartExtensions.WithAnnotations \nWithAnnotations \nGenericChartExtensions.WithTitle \nWithTitle \nGenericChartExtensions.WithLegend \nWithLegend \nGenericChartExtensions.WithSize \nWithSize \nGenericChartExtensions.WithMargin \nWithMargin \nGenericChartExtensions.WithMarginSize \nWithMarginSize \nGenericChartExtensions.WithTemplate \nWithTemplate \nGenericChartExtensions.WithShape \nWithShape \nGenericChartExtensions.WithShapes \nWithShapes \nGenericChartExtensions.WithDescription \nWithDescription \nGenericChartExtensions.WithAdditionalHeadTags \nWithAdditionalHeadTags \nGenericChartExtensions.WithHeadTags \nWithHeadTags \nGenericChartExtensions.WithMathTex \nWithMathTex \nGenericChartExtensions.SaveHtmlAs \nSaveHtmlAs \nGenericChartExtensions.Show \nShow \nGenericChartExtensions.ShowAsImage \nShowAsImage \nGenericChartExtensions.WithPolar \nWithPolar \nGenericChartExtensions.WithAngularAxis \nWithAngularAxis \nGenericChartExtensions.WithRadialAxis \nWithRadialAxis \nGenericChartExtensions.WithColorAxis \nWithColorAxis \nGenericChartExtensions.WithScene \nWithScene \nGenericChartExtensions.WithTernary \nWithTernary \nGenericChartExtensions.WithLayoutImage \nWithLayoutImage \nGenericChartExtensions.WithLayoutImages \nWithLayoutImages"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithTraceName","title":"GenericChartExtensions.WithTraceName","content":"GenericChartExtensions.WithTraceName \nWithTraceName \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithAxisAnchor","title":"GenericChartExtensions.WithAxisAnchor","content":"GenericChartExtensions.WithAxisAnchor \nWithAxisAnchor \n\n Set the axis anchor id the trace is belonging to\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithMarker","title":"GenericChartExtensions.WithMarker","content":"GenericChartExtensions.WithMarker \nWithMarker \n\n Apply styling to the Marker(s) of the chart as Object.\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithMarkerStyle","title":"GenericChartExtensions.WithMarkerStyle","content":"GenericChartExtensions.WithMarkerStyle \nWithMarkerStyle \n\n Apply styling to the Marker(s) of the chart.\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithLine","title":"GenericChartExtensions.WithLine","content":"GenericChartExtensions.WithLine \nWithLine \n\n Apply styling to the Line(s) of the chart as Object.\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithLineStyle","title":"GenericChartExtensions.WithLineStyle","content":"GenericChartExtensions.WithLineStyle \nWithLineStyle \n\n Apply styling to the Line(s) of the chart.\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithXError","title":"GenericChartExtensions.WithXError","content":"GenericChartExtensions.WithXError \nWithXError \n\n Apply styling to the xError(s) of the chart as Object\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithXErrorStyle","title":"GenericChartExtensions.WithXErrorStyle","content":"GenericChartExtensions.WithXErrorStyle \nWithXErrorStyle \n\n Apply styling to the xError(s) of the chart as Object\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithYError","title":"GenericChartExtensions.WithYError","content":"GenericChartExtensions.WithYError \nWithYError \n\n Apply styling to the yError(s) of the chart as Object\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithYErrorStyle","title":"GenericChartExtensions.WithYErrorStyle","content":"GenericChartExtensions.WithYErrorStyle \nWithYErrorStyle \n\n Apply styling to the yError(s) of the chart as Object\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithZError","title":"GenericChartExtensions.WithZError","content":"GenericChartExtensions.WithZError \nWithZError \n\n Apply styling to the zError(s) of the chart as Object\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithZErrorStyle","title":"GenericChartExtensions.WithZErrorStyle","content":"GenericChartExtensions.WithZErrorStyle \nWithZErrorStyle \n\n Apply styling to the zError(s) of the chart as Object\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithXAxis","title":"GenericChartExtensions.WithXAxis","content":"GenericChartExtensions.WithXAxis \nWithXAxis \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithXAxisStyle","title":"GenericChartExtensions.WithXAxisStyle","content":"GenericChartExtensions.WithXAxisStyle \nWithXAxisStyle \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithXAxisRangeSlider","title":"GenericChartExtensions.WithXAxisRangeSlider","content":"GenericChartExtensions.WithXAxisRangeSlider \nWithXAxisRangeSlider \n\n Sets the range slider for the xAxis\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithYAxis","title":"GenericChartExtensions.WithYAxis","content":"GenericChartExtensions.WithYAxis \nWithYAxis \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithYAxisStyle","title":"GenericChartExtensions.WithYAxisStyle","content":"GenericChartExtensions.WithYAxisStyle \nWithYAxisStyle \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithZAxis","title":"GenericChartExtensions.WithZAxis","content":"GenericChartExtensions.WithZAxis \nWithZAxis \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithZAxisStyle","title":"GenericChartExtensions.WithZAxisStyle","content":"GenericChartExtensions.WithZAxisStyle \nWithZAxisStyle \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#withColorBar","title":"GenericChartExtensions.withColorBar","content":"GenericChartExtensions.withColorBar \nwithColorBar \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithColorBarStyle","title":"GenericChartExtensions.WithColorBarStyle","content":"GenericChartExtensions.WithColorBarStyle \nWithColorBarStyle \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithLayout","title":"GenericChartExtensions.WithLayout","content":"GenericChartExtensions.WithLayout \nWithLayout \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithLayoutGrid","title":"GenericChartExtensions.WithLayoutGrid","content":"GenericChartExtensions.WithLayoutGrid \nWithLayoutGrid \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithLegend","title":"GenericChartExtensions.WithLegend","content":"GenericChartExtensions.WithLegend \nWithLegend \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithGeo","title":"GenericChartExtensions.WithGeo","content":"GenericChartExtensions.WithGeo \nWithGeo \n\n Sets a map for the given chart (will only work with traces supporting geo, e.g. choropleth, scattergeo)\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#withMapbox","title":"GenericChartExtensions.withMapbox","content":"GenericChartExtensions.withMapbox \nwithMapbox \n\n Sets a mapbox for the given chart (will only work with traces supporting mapboxes, e.g. choroplethmapbox, scattermapbox)\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithGeoStyle","title":"GenericChartExtensions.WithGeoStyle","content":"GenericChartExtensions.WithGeoStyle \nWithGeoStyle \n\n Sets the map style for the given chart (will only work with traces supporting geo, e.g. choropleth, scattergeo)\n\n Parameters      :\n\n FitBounds       : Determines if and how this subplot\u0027s view settings are auto-computed to fit trace data\n\n Resolution      : Sets the resolution of the base layers\n\n Scope           : Set the scope of the map.\n\n Projection      : Determines the type of projection used to display the map\n\n Center          : Sets the (lon,lat) coordinates of the map\u0027s center. By default, the map\u0027s longitude center lies at the middle of the longitude range for scoped projection and above \u0060projection.rotation.lon\u0060 otherwise. For all projection types, the map\u0027s latitude center lies at the middle of the latitude range by default.\n\n Visible         : Wether or not the base layers are visible\n\n Domain          : The domain of this geo subplot\n\n ShowCoastLine   : Sets whether or not the coastlines are drawn.\n\n CoastLineColor  : Sets the coastline color.\n\n CoastLineWidth  : Sets the coastline stroke width (in px).\n\n ShowLand        : Sets whether or not land masses are filled in color.\n\n LandColor       : Sets the land mass color.\n\n ShowOcean       : Sets whether or not oceans are filled in color.\n\n OceanColor      : Sets the ocean color\n\n ShowLakes       : Sets whether or not lakes are drawn.\n\n LakeColor       : Sets the color of the lakes.\n\n ShowRivers      : Sets whether or not rivers are drawn.\n\n RiverColor      : Sets color of the rivers.\n\n RiverWidth      : Sets the stroke width (in px) of the rivers.\n\n ShowCountries   : Sets whether or not country boundaries are drawn.\n\n CountryColor    : Sets line color of the country boundaries.\n\n CountryWidth    : Sets line width (in px) of the country boundaries.\n\n ShowSubunits    : Sets whether or not boundaries of subunits within countries (e.g. states, provinces) are drawn.\n\n SubunitColor    : Sets the color of the subunits boundaries.\n\n SubunitWidth    : Sets the stroke width (in px) of the subunits boundaries.\n\n ShowFrame       : Sets whether or not a frame is drawn around the map.\n\n FrameColor      : Sets the color the frame.\n\n FrameWidth      : Sets the stroke width (in px) of the frame.\n\n BgColor         : Set the background color of the map\n\n LatAxis         : Sets the latitudinal axis for this geo trace\n\n LonAxis         : Sets the longitudinal axis for this geo trace\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithMapProjection","title":"GenericChartExtensions.WithMapProjection","content":"GenericChartExtensions.WithMapProjection \nWithMapProjection \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithLayoutGridStyle","title":"GenericChartExtensions.WithLayoutGridStyle","content":"GenericChartExtensions.WithLayoutGridStyle \nWithLayoutGridStyle \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithConfig","title":"GenericChartExtensions.WithConfig","content":"GenericChartExtensions.WithConfig \nWithConfig \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithAnnotation","title":"GenericChartExtensions.WithAnnotation","content":"GenericChartExtensions.WithAnnotation \nWithAnnotation \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithAnnotations","title":"GenericChartExtensions.WithAnnotations","content":"GenericChartExtensions.WithAnnotations \nWithAnnotations \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithTitle","title":"GenericChartExtensions.WithTitle","content":"GenericChartExtensions.WithTitle \nWithTitle \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithLegend","title":"GenericChartExtensions.WithLegend","content":"GenericChartExtensions.WithLegend \nWithLegend \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithSize","title":"GenericChartExtensions.WithSize","content":"GenericChartExtensions.WithSize \nWithSize \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithMargin","title":"GenericChartExtensions.WithMargin","content":"GenericChartExtensions.WithMargin \nWithMargin \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithMarginSize","title":"GenericChartExtensions.WithMarginSize","content":"GenericChartExtensions.WithMarginSize \nWithMarginSize \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithTemplate","title":"GenericChartExtensions.WithTemplate","content":"GenericChartExtensions.WithTemplate \nWithTemplate \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithShape","title":"GenericChartExtensions.WithShape","content":"GenericChartExtensions.WithShape \nWithShape \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithShapes","title":"GenericChartExtensions.WithShapes","content":"GenericChartExtensions.WithShapes \nWithShapes \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithDescription","title":"GenericChartExtensions.WithDescription","content":"GenericChartExtensions.WithDescription \nWithDescription \n\n Show chart in browser\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithAdditionalHeadTags","title":"GenericChartExtensions.WithAdditionalHeadTags","content":"GenericChartExtensions.WithAdditionalHeadTags \nWithAdditionalHeadTags \n\n Adds the given additional script tags on the chart\u0027s DisplayOptions. They will be included in the document\u0027s \u003Chead\u003E\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithHeadTags","title":"GenericChartExtensions.WithHeadTags","content":"GenericChartExtensions.WithHeadTags \nWithHeadTags \n\n Sets the given additional script tags on the chart\u0027s DisplayOptions. They will be included in the document\u0027s \u003Chead\u003E\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithMathTex","title":"GenericChartExtensions.WithMathTex","content":"GenericChartExtensions.WithMathTex \nWithMathTex \n\n Adds the necessary script tags to render tex strings to the chart\u0027s DisplayOptions\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#SaveHtmlAs","title":"GenericChartExtensions.SaveHtmlAs","content":"GenericChartExtensions.SaveHtmlAs \nSaveHtmlAs \n\n Save chart as html single page\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#Show","title":"GenericChartExtensions.Show","content":"GenericChartExtensions.Show \nShow \n\n Show chart in browser\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#ShowAsImage","title":"GenericChartExtensions.ShowAsImage","content":"GenericChartExtensions.ShowAsImage \nShowAsImage \n\n Show chart in browser\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithPolar","title":"GenericChartExtensions.WithPolar","content":"GenericChartExtensions.WithPolar \nWithPolar \n\n Sets the polar object with the given id on the chart layout\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithAngularAxis","title":"GenericChartExtensions.WithAngularAxis","content":"GenericChartExtensions.WithAngularAxis \nWithAngularAxis \n\n Sets the angular axis of the polar object with the given id on the chart layout\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithRadialAxis","title":"GenericChartExtensions.WithRadialAxis","content":"GenericChartExtensions.WithRadialAxis \nWithRadialAxis \n\n Sets the radial axis of the polar object with the given id on the chart layout\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithColorAxis","title":"GenericChartExtensions.WithColorAxis","content":"GenericChartExtensions.WithColorAxis \nWithColorAxis \n\n Sets the color axis of the color axis with the given id on the chart layout\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithScene","title":"GenericChartExtensions.WithScene","content":"GenericChartExtensions.WithScene \nWithScene \n\n Sets the scene object with the given id on the chart layout\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithTernary","title":"GenericChartExtensions.WithTernary","content":"GenericChartExtensions.WithTernary \nWithTernary \n\n Sets the scene object with the given id on the chart layout\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithLayoutImage","title":"GenericChartExtensions.WithLayoutImage","content":"GenericChartExtensions.WithLayoutImage \nWithLayoutImage \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithLayoutImages","title":"GenericChartExtensions.WithLayoutImages","content":"GenericChartExtensions.WithLayoutImages \nWithLayoutImages \n"},{"uri":"https://plotly.net/reference/plotly-net-html.html","title":"HTML","content":"HTML \n\n HTML template for Plotly.js\n \nHTML.doc \ndoc \nHTML.chart \nchart \nHTML.staticChart \nstaticChart"},{"uri":"https://plotly.net/reference/plotly-net-html.html#doc","title":"HTML.doc","content":"HTML.doc \ndoc \n"},{"uri":"https://plotly.net/reference/plotly-net-html.html#chart","title":"HTML.chart","content":"HTML.chart \nchart \n"},{"uri":"https://plotly.net/reference/plotly-net-html.html#staticChart","title":"HTML.staticChart","content":"HTML.staticChart \nstaticChart \n"},{"uri":"https://plotly.net/reference/plotly-net-sankeyextension.html","title":"SankeyExtension","content":"SankeyExtension \n \nSankeyExtension.Sankey \nSankey \nSankeyExtension.Sankey \nSankey"},{"uri":"https://plotly.net/reference/plotly-net-sankeyextension.html#Sankey","title":"SankeyExtension.Sankey","content":"SankeyExtension.Sankey \nSankey \n"},{"uri":"https://plotly.net/reference/plotly-net-sankeyextension.html#Sankey","title":"SankeyExtension.Sankey","content":"SankeyExtension.Sankey \nSankey \n"},{"uri":"https://plotly.net/reference/plotly-net-seq.html","title":"Seq","content":"Seq \n \nSeq.unzip \nunzip \nSeq.unzip3 \nunzip3"},{"uri":"https://plotly.net/reference/plotly-net-seq.html#unzip","title":"Seq.unzip","content":"Seq.unzip \nunzip \n\n Splits a sequence of pairs into two sequences\n"},{"uri":"https://plotly.net/reference/plotly-net-seq.html#unzip3","title":"Seq.unzip3","content":"Seq.unzip3 \nunzip3 \n\n Splits a sequence of triples into three sequences\n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam.html","title":"StyleParam","content":"StyleParam \n \nStyleParam.ModeUtils \nModeUtils \nStyleParam.Align \nAlign \nStyleParam.AngularUnit \nAngularUnit \nStyleParam.AnnotationAlignment \nAnnotationAlignment \nStyleParam.AnnotationEditOptions \nAnnotationEditOptions \nStyleParam.ArrowHead \nArrowHead \nStyleParam.ArrowSide \nArrowSide \nStyleParam.AspectMode \nAspectMode \nStyleParam.AutoRange \nAutoRange \nStyleParam.AutoTypeNumbers \nAutoTypeNumbers \nStyleParam.AxisConstraint \nAxisConstraint \nStyleParam.AxisConstraintDirection \nAxisConstraintDirection \nStyleParam.AxisType \nAxisType \nStyleParam.BarMode \nBarMode \nStyleParam.BarNorm \nBarNorm \nStyleParam.BoxMean \nBoxMean \nStyleParam.BoxMode \nBoxMode \nStyleParam.BoxPoints \nBoxPoints \nStyleParam.BranchValues \nBranchValues \nStyleParam.Calendar \nCalendar \nStyleParam.CategoryOrder \nCategoryOrder \nStyleParam.CategoryTickAnchor \nCategoryTickAnchor \nStyleParam.CheaterType \nCheaterType \nStyleParam.ClickMode \nClickMode \nStyleParam.ClickToShow \nClickToShow \nStyleParam.ColorComponentBound \nColorComponentBound \nStyleParam.ColorModel \nColorModel \nStyleParam.Colorscale \nColorscale \nStyleParam.ConeAnchor \nConeAnchor \nStyleParam.ConeSizeMode \nConeSizeMode \nStyleParam.ConnectorMode \nConnectorMode \nStyleParam.ConstrainText \nConstrainText \nStyleParam.CoordinateType \nCoordinateType \nStyleParam.CumulativeDirection \nCumulativeDirection \nStyleParam.Currentbin \nCurrentbin \nStyleParam.Delaunayaxis \nDelaunayaxis \nStyleParam.Direction \nDirection \nStyleParam.DragMode \nDragMode \nStyleParam.DrawingStyle \nDrawingStyle \nStyleParam.ErrorType \nErrorType \nStyleParam.ExponentFormat \nExponentFormat \nStyleParam.Fill \nFill \nStyleParam.FontFamily \nFontFamily \nStyleParam.FunnelMode \nFunnelMode \nStyleParam.GeoFitBounds \nGeoFitBounds \nStyleParam.GeoProjectionType \nGeoProjectionType \nStyleParam.GeoResolution \nGeoResolution \nStyleParam.GeoScope \nGeoScope \nStyleParam.GradientType \nGradientType \nStyleParam.GroupNorm \nGroupNorm \nStyleParam.HistFunc \nHistFunc \nStyleParam.HistNorm \nHistNorm \nStyleParam.HorizontalAlign \nHorizontalAlign \nStyleParam.HoverInfo \nHoverInfo \nStyleParam.HoverMode \nHoverMode \nStyleParam.HoverOn \nHoverOn \nStyleParam.IcicleCount \nIcicleCount \nStyleParam.ImageFormat \nImageFormat \nStyleParam.IndicatorAlignment \nIndicatorAlignment \nStyleParam.IndicatorDeltaPosition \nIndicatorDeltaPosition \nStyleParam.IndicatorGaugeShape \nIndicatorGaugeShape \nStyleParam.IndicatorMode \nIndicatorMode \nStyleParam.InsideTextAnchor \nInsideTextAnchor \nStyleParam.InsideTextOrientation \nInsideTextOrientation \nStyleParam.IntensityMode \nIntensityMode \nStyleParam.JitterPoints \nJitterPoints \nStyleParam.Layer \nLayer \nStyleParam.LayoutGridPattern \nLayoutGridPattern \nStyleParam.LayoutGridRowOrder \nLayoutGridRowOrder \nStyleParam.LayoutGridXSide \nLayoutGridXSide \nStyleParam.LayoutGridYSide \nLayoutGridYSide \nStyleParam.LayoutImageSizing \nLayoutImageSizing \nStyleParam.LinearAxisId \nLinearAxisId \nStyleParam.LocationFormat \nLocationFormat \nStyleParam.MapboxLayerSourceType \nMapboxLayerSourceType \nStyleParam.MapboxLayerSymbolPlacement \nMapboxLayerSymbolPlacement \nStyleParam.MapboxLayerType \nMapboxLayerType \nStyleParam.MapboxStyle \nMapboxStyle \nStyleParam.MarkerSizeMode \nMarkerSizeMode \nStyleParam.MarkerSymbol \nMarkerSymbol \nStyleParam.Mirror \nMirror \nStyleParam.Mode \nMode \nStyleParam.ModeBarButton \nModeBarButton \nStyleParam.Orientation \nOrientation \nStyleParam.PathbarEdgeShape \nPathbarEdgeShape \nStyleParam.PatternFillMode \nPatternFillMode \nStyleParam.PatternShape \nPatternShape \nStyleParam.PeriodAlignment \nPeriodAlignment \nStyleParam.PolarGridShape \nPolarGridShape \nStyleParam.QuartileMethod \nQuartileMethod \nStyleParam.Range \nRange \nStyleParam.RangeMode \nRangeMode \nStyleParam.RangebreakPattern \nRangebreakPattern \nStyleParam.RangesliderRangeMode \nRangesliderRangeMode \nStyleParam.ScaleMode \nScaleMode \nStyleParam.SelectDirection \nSelectDirection \nStyleParam.Shape \nShape \nStyleParam.ShapeType \nShapeType \nStyleParam.ShowExponent \nShowExponent \nStyleParam.ShowTickOption \nShowTickOption \nStyleParam.Side \nSide \nStyleParam.SmoothAlg \nSmoothAlg \nStyleParam.SpanMode \nSpanMode \nStyleParam.SpikeMode \nSpikeMode \nStyleParam.SpikeSnap \nSpikeSnap \nStyleParam.StackGaps \nStackGaps \nStyleParam.SubPlotId \nSubPlotId \nStyleParam.SurfaceAxis \nSurfaceAxis \nStyleParam.SurfacePattern \nSurfacePattern \nStyleParam.SymbolStyle \nSymbolStyle \nStyleParam.TextInfo \nTextInfo \nStyleParam.TextPosition \nTextPosition \nStyleParam.TickLabelMode \nTickLabelMode \nStyleParam.TickLabelOverflow \nTickLabelOverflow \nStyleParam.TickLabelPosition \nTickLabelPosition \nStyleParam.TickMode \nTickMode \nStyleParam.TickOptions \nTickOptions \nStyleParam.TilingFlip \nTilingFlip \nStyleParam.TimeStep \nTimeStep \nStyleParam.TimeStepMode \nTimeStepMode \nStyleParam.TraceItemClickOptions \nTraceItemClickOptions \nStyleParam.TraceItemSizing \nTraceItemSizing \nStyleParam.TraceOrder \nTraceOrder \nStyleParam.TransitionEasing \nTransitionEasing \nStyleParam.TransitionOrdering \nTransitionOrdering \nStyleParam.TreemapTilingPacking \nTreemapTilingPacking \nStyleParam.UniformTextMode \nUniformTextMode \nStyleParam.UnitMode \nUnitMode \nStyleParam.VerticalAlign \nVerticalAlign \nStyleParam.ViolinMode \nViolinMode \nStyleParam.ViolinSide \nViolinSide \nStyleParam.Visible \nVisible \nStyleParam.WaterfallMeasure \nWaterfallMeasure \nStyleParam.WaterfallMode \nWaterfallMode \nStyleParam.XAnchorPosition \nXAnchorPosition \nStyleParam.YAnchorPosition \nYAnchorPosition"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-modeutils.html","title":"ModeUtils","content":"ModeUtils \n\n Functions to manipulate StyleParam Mode\n \nModeUtils.showText \nshowText \nModeUtils.showMarker \nshowMarker \nModeUtils.showLines \nshowLines"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-modeutils.html#showText","title":"ModeUtils.showText","content":"ModeUtils.showText \nshowText \n\n Takes the current mode and adds the Text flag\n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-modeutils.html#showMarker","title":"ModeUtils.showMarker","content":"ModeUtils.showMarker \nshowMarker \n\n Takes the current mode and adds the Markers flag\n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-modeutils.html#showLines","title":"ModeUtils.showLines","content":"ModeUtils.showLines \nshowLines \n\n Takes the current mode and adds the Lines flag\n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-align.html","title":"Align","content":"Align \n\n Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines\n \nAlign.Convert \nConvert \nAlign.toString \ntoString \nAlign.convert \nconvert \nAlign.Auto \nAuto \nAlign.Left \nLeft \nAlign.Right \nRight"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-align.html#Convert","title":"Align.Convert","content":"Align.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-align.html#toString","title":"Align.toString","content":"Align.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-align.html#convert","title":"Align.convert","content":"Align.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-align.html#Auto","title":"Align.Auto","content":"Align.Auto \nAuto \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-align.html#Left","title":"Align.Left","content":"Align.Left \nLeft \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-align.html#Right","title":"Align.Right","content":"Align.Right \nRight \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-angularunit.html","title":"AngularUnit","content":"AngularUnit \n \nAngularUnit.Convert \nConvert \nAngularUnit.toString \ntoString \nAngularUnit.convert \nconvert \nAngularUnit.Radians \nRadians \nAngularUnit.Degrees \nDegrees \nAngularUnit.Gradians \nGradians"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-angularunit.html#Convert","title":"AngularUnit.Convert","content":"AngularUnit.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-angularunit.html#toString","title":"AngularUnit.toString","content":"AngularUnit.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-angularunit.html#convert","title":"AngularUnit.convert","content":"AngularUnit.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-angularunit.html#Radians","title":"AngularUnit.Radians","content":"AngularUnit.Radians \nRadians \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-angularunit.html#Degrees","title":"AngularUnit.Degrees","content":"AngularUnit.Degrees \nDegrees \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-angularunit.html#Gradians","title":"AngularUnit.Gradians","content":"AngularUnit.Gradians \nGradians \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-annotationalignment.html","title":"AnnotationAlignment","content":"AnnotationAlignment \n \nAnnotationAlignment.Convert \nConvert \nAnnotationAlignment.toString \ntoString \nAnnotationAlignment.convert \nconvert \nAnnotationAlignment.Left \nLeft \nAnnotationAlignment.Center \nCenter \nAnnotationAlignment.Right \nRight"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-annotationalignment.html#Convert","title":"AnnotationAlignment.Convert","content":"AnnotationAlignment.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-annotationalignment.html#toString","title":"AnnotationAlignment.toString","content":"AnnotationAlignment.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-annotationalignment.html#convert","title":"AnnotationAlignment.convert","content":"AnnotationAlignment.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-annotationalignment.html#Left","title":"AnnotationAlignment.Left","content":"AnnotationAlignment.Left \nLeft \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-annotationalignment.html#Center","title":"AnnotationAlignment.Center","content":"AnnotationAlignment.Center \nCenter \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-annotationalignment.html#Right","title":"AnnotationAlignment.Right","content":"AnnotationAlignment.Right \nRight \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-annotationeditoptions.html","title":"AnnotationEditOptions","content":"AnnotationEditOptions \n\n Editable parts of a chart that can be set via Chart config.\n \nAnnotationEditOptions.Convert \nConvert \nAnnotationEditOptions.toString \ntoString \nAnnotationEditOptions.convert \nconvert \nAnnotationEditOptions.AnnotationPosition \nAnnotationPosition \nAnnotationEditOptions.AnnotationTail \nAnnotationTail \nAnnotationEditOptions.AnnotationText \nAnnotationText \nAnnotationEditOptions.AxisTitleText \nAxisTitleText \nAnnotationEditOptions.ColorbarPosition \nColorbarPosition \nAnnotationEditOptions.ColorbarTitleText \nColorbarTitleText \nAnnotationEditOptions.LegendPosition \nLegendPosition \nAnnotationEditOptions.LegendText \nLegendText \nAnnotationEditOptions.ShapePosition \nShapePosition"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-annotationeditoptions.html#Convert","title":"AnnotationEditOptions.Convert","content":"AnnotationEditOptions.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-annotationeditoptions.html#toString","title":"AnnotationEditOptions.toString","content":"AnnotationEditOptions.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-annotationeditoptions.html#convert","title":"AnnotationEditOptions.convert","content":"AnnotationEditOptions.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-annotationeditoptions.html#AnnotationPosition","title":"AnnotationEditOptions.AnnotationPosition","content":"AnnotationEditOptions.AnnotationPosition \nAnnotationPosition \n\nDetermines if the main anchor of the annotation is editable.The main anchor corresponds to the\u0027,\ntext (if no arrow) or the arrow (which drags the whole thing leaving the arrow length \u0026 direction unchanged).\n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-annotationeditoptions.html#AnnotationTail","title":"AnnotationEditOptions.AnnotationTail","content":"AnnotationEditOptions.AnnotationTail \nAnnotationTail \n\nHas only an effect for annotations with arrows. Enables changing the length and direction of the arrow.\n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-annotationeditoptions.html#AnnotationText","title":"AnnotationEditOptions.AnnotationText","content":"AnnotationEditOptions.AnnotationText \nAnnotationText \n\nEnables editing annotation text.\n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-annotationeditoptions.html#AxisTitleText","title":"AnnotationEditOptions.AxisTitleText","content":"AnnotationEditOptions.AxisTitleText \nAxisTitleText \n\nEnables editing axis title text.\n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-annotationeditoptions.html#ColorbarPosition","title":"AnnotationEditOptions.ColorbarPosition","content":"AnnotationEditOptions.ColorbarPosition \nColorbarPosition \n\nEnables moving colorbars.\n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-annotationeditoptions.html#ColorbarTitleText","title":"AnnotationEditOptions.ColorbarTitleText","content":"AnnotationEditOptions.ColorbarTitleText \nColorbarTitleText \n\nEnables editing colorbar title text.\n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-annotationeditoptions.html#LegendPosition","title":"AnnotationEditOptions.LegendPosition","content":"AnnotationEditOptions.LegendPosition \nLegendPosition \n\nEnables moving the legend.\n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-annotationeditoptions.html#LegendText","title":"AnnotationEditOptions.LegendText","content":"AnnotationEditOptions.LegendText \nLegendText \n\nEnables editing the trace name fields from the legend\n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-annotationeditoptions.html#ShapePosition","title":"AnnotationEditOptions.ShapePosition","content":"AnnotationEditOptions.ShapePosition \nShapePosition \n\nEnables moving shapes.\n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-arrowhead.html","title":"ArrowHead","content":"ArrowHead \n \nArrowHead.Convert \nConvert \nArrowHead.toEnum \ntoEnum \nArrowHead.convert \nconvert \nArrowHead.TriangleShort \nTriangleShort \nArrowHead.TriangleTall \nTriangleTall \nArrowHead.Barbed \nBarbed \nArrowHead.SimpleShort \nSimpleShort \nArrowHead.SimpleTall \nSimpleTall \nArrowHead.Cirle \nCirle \nArrowHead.Square \nSquare \nArrowHead.LineOnly \nLineOnly"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-arrowhead.html#Convert","title":"ArrowHead.Convert","content":"ArrowHead.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-arrowhead.html#toEnum","title":"ArrowHead.toEnum","content":"ArrowHead.toEnum \ntoEnum \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-arrowhead.html#convert","title":"ArrowHead.convert","content":"ArrowHead.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-arrowhead.html#TriangleShort","title":"ArrowHead.TriangleShort","content":"ArrowHead.TriangleShort \nTriangleShort \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-arrowhead.html#TriangleTall","title":"ArrowHead.TriangleTall","content":"ArrowHead.TriangleTall \nTriangleTall \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-arrowhead.html#Barbed","title":"ArrowHead.Barbed","content":"ArrowHead.Barbed \nBarbed \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-arrowhead.html#SimpleShort","title":"ArrowHead.SimpleShort","content":"ArrowHead.SimpleShort \nSimpleShort \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-arrowhead.html#SimpleTall","title":"ArrowHead.SimpleTall","content":"ArrowHead.SimpleTall \nSimpleTall \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-arrowhead.html#Cirle","title":"ArrowHead.Cirle","content":"ArrowHead.Cirle \nCirle \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-arrowhead.html#Square","title":"ArrowHead.Square","content":"ArrowHead.Square \nSquare \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-arrowhead.html#LineOnly","title":"ArrowHead.LineOnly","content":"ArrowHead.LineOnly \nLineOnly \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-arrowside.html","title":"ArrowSide","content":"ArrowSide \n \nArrowSide.Convert \nConvert \nArrowSide.toString \ntoString \nArrowSide.convert \nconvert \nArrowSide.Start \nStart \nArrowSide.End \nEnd \nArrowSide.StartEnd \nStartEnd \nArrowSide.None \nNone"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-arrowside.html#Convert","title":"ArrowSide.Convert","content":"ArrowSide.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-arrowside.html#toString","title":"ArrowSide.toString","content":"ArrowSide.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-arrowside.html#convert","title":"ArrowSide.convert","content":"ArrowSide.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-arrowside.html#Start","title":"ArrowSide.Start","content":"ArrowSide.Start \nStart \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-arrowside.html#End","title":"ArrowSide.End","content":"ArrowSide.End \nEnd \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-arrowside.html#StartEnd","title":"ArrowSide.StartEnd","content":"ArrowSide.StartEnd \nStartEnd \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-arrowside.html#None","title":"ArrowSide.None","content":"ArrowSide.None \nNone \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-aspectmode.html","title":"AspectMode","content":"AspectMode \n \nAspectMode.Convert \nConvert \nAspectMode.toString \ntoString \nAspectMode.convert \nconvert \nAspectMode.Auto \nAuto \nAspectMode.Cube \nCube \nAspectMode.Data \nData \nAspectMode.Manual \nManual"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-aspectmode.html#Convert","title":"AspectMode.Convert","content":"AspectMode.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-aspectmode.html#toString","title":"AspectMode.toString","content":"AspectMode.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-aspectmode.html#convert","title":"AspectMode.convert","content":"AspectMode.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-aspectmode.html#Auto","title":"AspectMode.Auto","content":"AspectMode.Auto \nAuto \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-aspectmode.html#Cube","title":"AspectMode.Cube","content":"AspectMode.Cube \nCube \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-aspectmode.html#Data","title":"AspectMode.Data","content":"AspectMode.Data \nData \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-aspectmode.html#Manual","title":"AspectMode.Manual","content":"AspectMode.Manual \nManual \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-autorange.html","title":"AutoRange","content":"AutoRange \n\n Determines whether or not the range of this axis is computed in relation to the input data. See \u0060rangemode\u0060 for more info. If \u0060range\u0060 is provided, then \u0060autorange\u0060 is set to \u0022false\u0022.\n \nAutoRange.Convert \nConvert \nAutoRange.toString \ntoString \nAutoRange.convert \nconvert \nAutoRange.True \nTrue \nAutoRange.False \nFalse \nAutoRange.Reversed \nReversed"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-autorange.html#Convert","title":"AutoRange.Convert","content":"AutoRange.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-autorange.html#toString","title":"AutoRange.toString","content":"AutoRange.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-autorange.html#convert","title":"AutoRange.convert","content":"AutoRange.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-autorange.html#True","title":"AutoRange.True","content":"AutoRange.True \nTrue \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-autorange.html#False","title":"AutoRange.False","content":"AutoRange.False \nFalse \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-autorange.html#Reversed","title":"AutoRange.Reversed","content":"AutoRange.Reversed \nReversed \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-autotypenumbers.html","title":"AutoTypeNumbers","content":"AutoTypeNumbers \n \nAutoTypeNumbers.Convert \nConvert \nAutoTypeNumbers.toString \ntoString \nAutoTypeNumbers.convert \nconvert \nAutoTypeNumbers.ConvertTypes \nConvertTypes \nAutoTypeNumbers.Strict \nStrict"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-autotypenumbers.html#Convert","title":"AutoTypeNumbers.Convert","content":"AutoTypeNumbers.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-autotypenumbers.html#toString","title":"AutoTypeNumbers.toString","content":"AutoTypeNumbers.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-autotypenumbers.html#convert","title":"AutoTypeNumbers.convert","content":"AutoTypeNumbers.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-autotypenumbers.html#ConvertTypes","title":"AutoTypeNumbers.ConvertTypes","content":"AutoTypeNumbers.ConvertTypes \nConvertTypes \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-autotypenumbers.html#Strict","title":"AutoTypeNumbers.Strict","content":"AutoTypeNumbers.Strict \nStrict \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-axisconstraint.html","title":"AxisConstraint","content":"AxisConstraint \n\n If the axis needs to be compressed (either due to its own \u0060scaleanchor\u0060 and \u0060scaleratio\u0060 or those of the other axis), determines how that happens: by increasing the \u0022range\u0022, or by decreasing the \u0022domain\u0022. Default is \u0022domain\u0022 for axes containing image traces, \u0022range\u0022 otherwise.\n \nAxisConstraint.Convert \nConvert \nAxisConstraint.toString \ntoString \nAxisConstraint.convert \nconvert \nAxisConstraint.Range \nRange \nAxisConstraint.Domain \nDomain"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-axisconstraint.html#Convert","title":"AxisConstraint.Convert","content":"AxisConstraint.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-axisconstraint.html#toString","title":"AxisConstraint.toString","content":"AxisConstraint.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-axisconstraint.html#convert","title":"AxisConstraint.convert","content":"AxisConstraint.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-axisconstraint.html#Range","title":"AxisConstraint.Range","content":"AxisConstraint.Range \nRange \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-axisconstraint.html#Domain","title":"AxisConstraint.Domain","content":"AxisConstraint.Domain \nDomain \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-axisconstraintdirection.html","title":"AxisConstraintDirection","content":"AxisConstraintDirection \n \nAxisConstraintDirection.Convert \nConvert \nAxisConstraintDirection.toString \ntoString \nAxisConstraintDirection.convert \nconvert \nAxisConstraintDirection.Left \nLeft \nAxisConstraintDirection.Center \nCenter \nAxisConstraintDirection.Right \nRight \nAxisConstraintDirection.Top \nTop \nAxisConstraintDirection.Middle \nMiddle \nAxisConstraintDirection.Bottom \nBottom"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-axisconstraintdirection.html#Convert","title":"AxisConstraintDirection.Convert","content":"AxisConstraintDirection.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-axisconstraintdirection.html#toString","title":"AxisConstraintDirection.toString","content":"AxisConstraintDirection.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-axisconstraintdirection.html#convert","title":"AxisConstraintDirection.convert","content":"AxisConstraintDirection.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-axisconstraintdirection.html#Left","title":"AxisConstraintDirection.Left","content":"AxisConstraintDirection.Left \nLeft \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-axisconstraintdirection.html#Center","title":"AxisConstraintDirection.Center","content":"AxisConstraintDirection.Center \nCenter \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-axisconstraintdirection.html#Right","title":"AxisConstraintDirection.Right","content":"AxisConstraintDirection.Right \nRight \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-axisconstraintdirection.html#Top","title":"AxisConstraintDirection.Top","content":"AxisConstraintDirection.Top \nTop \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-axisconstraintdirection.html#Middle","title":"AxisConstraintDirection.Middle","content":"AxisConstraintDirection.Middle \nMiddle \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-axisconstraintdirection.html#Bottom","title":"AxisConstraintDirection.Bottom","content":"AxisConstraintDirection.Bottom \nBottom \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-axistype.html","title":"AxisType","content":"AxisType \n\n Sets the axis type. By default (Auto), plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.\n \nAxisType.Convert \nConvert \nAxisType.toString \ntoString \nAxisType.convert \nconvert \nAxisType.Auto \nAuto \nAxisType.Linear \nLinear \nAxisType.Log \nLog \nAxisType.Date \nDate \nAxisType.Category \nCategory \nAxisType.MultiCategory \nMultiCategory"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-axistype.html#Convert","title":"AxisType.Convert","content":"AxisType.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-axistype.html#toString","title":"AxisType.toString","content":"AxisType.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-axistype.html#convert","title":"AxisType.convert","content":"AxisType.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-axistype.html#Auto","title":"AxisType.Auto","content":"AxisType.Auto \nAuto \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-axistype.html#Linear","title":"AxisType.Linear","content":"AxisType.Linear \nLinear \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-axistype.html#Log","title":"AxisType.Log","content":"AxisType.Log \nLog \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-axistype.html#Date","title":"AxisType.Date","content":"AxisType.Date \nDate \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-axistype.html#Category","title":"AxisType.Category","content":"AxisType.Category \nCategory \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-axistype.html#MultiCategory","title":"AxisType.MultiCategory","content":"AxisType.MultiCategory \nMultiCategory \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-barmode.html","title":"BarMode","content":"BarMode \n\n For bar and histogram plots only. This sets how multiple bar objects are plotted together. In other words, this defines how bars at the same location\n appear on the plot. If set to \u0027stack\u0027 the bars are stacked on top of one another. If set to \u0027group\u0027, the bars are plotted next to one another, centered \n around the shared location. If set to \u0027overlay\u0027, the bars are simply plotted over one another, you may need to set the opacity to see this.\n \nBarMode.Convert \nConvert \nBarMode.toString \ntoString \nBarMode.convert \nconvert \nBarMode.Stack \nStack \nBarMode.Group \nGroup \nBarMode.Overlay \nOverlay \nBarMode.Relative \nRelative"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-barmode.html#Convert","title":"BarMode.Convert","content":"BarMode.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-barmode.html#toString","title":"BarMode.toString","content":"BarMode.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-barmode.html#convert","title":"BarMode.convert","content":"BarMode.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-barmode.html#Stack","title":"BarMode.Stack","content":"BarMode.Stack \nStack \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-barmode.html#Group","title":"BarMode.Group","content":"BarMode.Group \nGroup \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-barmode.html#Overlay","title":"BarMode.Overlay","content":"BarMode.Overlay \nOverlay \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-barmode.html#Relative","title":"BarMode.Relative","content":"BarMode.Relative \nRelative \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-barnorm.html","title":"BarNorm","content":"BarNorm \n \nBarNorm.Convert \nConvert \nBarNorm.toString \ntoString \nBarNorm.convert \nconvert \nBarNorm.NoNorm \nNoNorm \nBarNorm.Fraction \nFraction \nBarNorm.Percent \nPercent"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-barnorm.html#Convert","title":"BarNorm.Convert","content":"BarNorm.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-barnorm.html#toString","title":"BarNorm.toString","content":"BarNorm.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-barnorm.html#convert","title":"BarNorm.convert","content":"BarNorm.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-barnorm.html#NoNorm","title":"BarNorm.NoNorm","content":"BarNorm.NoNorm \nNoNorm \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-barnorm.html#Fraction","title":"BarNorm.Fraction","content":"BarNorm.Fraction \nFraction \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-barnorm.html#Percent","title":"BarNorm.Percent","content":"BarNorm.Percent \nPercent \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-boxmean.html","title":"BoxMean","content":"BoxMean \n \nBoxMean.Convert \nConvert \nBoxMean.convert \nconvert \nBoxMean.True \nTrue \nBoxMean.False \nFalse \nBoxMean.SD \nSD"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-boxmean.html#Convert","title":"BoxMean.Convert","content":"BoxMean.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-boxmean.html#convert","title":"BoxMean.convert","content":"BoxMean.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-boxmean.html#True","title":"BoxMean.True","content":"BoxMean.True \nTrue \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-boxmean.html#False","title":"BoxMean.False","content":"BoxMean.False \nFalse \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-boxmean.html#SD","title":"BoxMean.SD","content":"BoxMean.SD \nSD \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-boxmode.html","title":"BoxMode","content":"BoxMode \n \nBoxMode.Convert \nConvert \nBoxMode.toString \ntoString \nBoxMode.convert \nconvert \nBoxMode.Group \nGroup \nBoxMode.Overlay \nOverlay"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-boxmode.html#Convert","title":"BoxMode.Convert","content":"BoxMode.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-boxmode.html#toString","title":"BoxMode.toString","content":"BoxMode.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-boxmode.html#convert","title":"BoxMode.convert","content":"BoxMode.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-boxmode.html#Group","title":"BoxMode.Group","content":"BoxMode.Group \nGroup \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-boxmode.html#Overlay","title":"BoxMode.Overlay","content":"BoxMode.Overlay \nOverlay \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-boxpoints.html","title":"BoxPoints","content":"BoxPoints \n \nBoxPoints.Convert \nConvert \nBoxPoints.toString \ntoString \nBoxPoints.convert \nconvert \nBoxPoints.Outliers \nOutliers \nBoxPoints.All \nAll \nBoxPoints.Suspectedoutliers \nSuspectedoutliers \nBoxPoints.False \nFalse"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-boxpoints.html#Convert","title":"BoxPoints.Convert","content":"BoxPoints.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-boxpoints.html#toString","title":"BoxPoints.toString","content":"BoxPoints.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-boxpoints.html#convert","title":"BoxPoints.convert","content":"BoxPoints.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-boxpoints.html#Outliers","title":"BoxPoints.Outliers","content":"BoxPoints.Outliers \nOutliers \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-boxpoints.html#All","title":"BoxPoints.All","content":"BoxPoints.All \nAll \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-boxpoints.html#Suspectedoutliers","title":"BoxPoints.Suspectedoutliers","content":"BoxPoints.Suspectedoutliers \nSuspectedoutliers \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-boxpoints.html#False","title":"BoxPoints.False","content":"BoxPoints.False \nFalse \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-branchvalues.html","title":"BranchValues","content":"BranchValues \n \nBranchValues.Convert \nConvert \nBranchValues.toString \ntoString \nBranchValues.convert \nconvert \nBranchValues.Remainder \nRemainder \nBranchValues.Total \nTotal"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-branchvalues.html#Convert","title":"BranchValues.Convert","content":"BranchValues.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-branchvalues.html#toString","title":"BranchValues.toString","content":"BranchValues.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-branchvalues.html#convert","title":"BranchValues.convert","content":"BranchValues.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-branchvalues.html#Remainder","title":"BranchValues.Remainder","content":"BranchValues.Remainder \nRemainder \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-branchvalues.html#Total","title":"BranchValues.Total","content":"BranchValues.Total \nTotal \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-calendar.html","title":"Calendar","content":"Calendar \n\n Sets the calendar system to use with \u0060x y z\u0060 date data. Default: \u0022gregorian\u0022\n \nCalendar.Convert \nConvert \nCalendar.toString \ntoString \nCalendar.convert \nconvert \nCalendar.Gregorian \nGregorian \nCalendar.Chinese \nChinese \nCalendar.Coptic \nCoptic \nCalendar.Discworld \nDiscworld \nCalendar.Ethiopian \nEthiopian \nCalendar.Hebrew \nHebrew \nCalendar.Islamic \nIslamic \nCalendar.Julian \nJulian \nCalendar.Mayan \nMayan \nCalendar.Nanakshahi \nNanakshahi \nCalendar.Nepali \nNepali \nCalendar.Persian \nPersian \nCalendar.Jalali \nJalali \nCalendar.Taiwan \nTaiwan \nCalendar.Thai \nThai \nCalendar.Ummalqura \nUmmalqura"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-calendar.html#Convert","title":"Calendar.Convert","content":"Calendar.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-calendar.html#toString","title":"Calendar.toString","content":"Calendar.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-calendar.html#convert","title":"Calendar.convert","content":"Calendar.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-calendar.html#Gregorian","title":"Calendar.Gregorian","content":"Calendar.Gregorian \nGregorian \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-calendar.html#Chinese","title":"Calendar.Chinese","content":"Calendar.Chinese \nChinese \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-calendar.html#Coptic","title":"Calendar.Coptic","content":"Calendar.Coptic \nCoptic \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-calendar.html#Discworld","title":"Calendar.Discworld","content":"Calendar.Discworld \nDiscworld \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-calendar.html#Ethiopian","title":"Calendar.Ethiopian","content":"Calendar.Ethiopian \nEthiopian \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-calendar.html#Hebrew","title":"Calendar.Hebrew","content":"Calendar.Hebrew \nHebrew \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-calendar.html#Islamic","title":"Calendar.Islamic","content":"Calendar.Islamic \nIslamic \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-calendar.html#Julian","title":"Calendar.Julian","content":"Calendar.Julian \nJulian \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-calendar.html#Mayan","title":"Calendar.Mayan","content":"Calendar.Mayan \nMayan \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-calendar.html#Nanakshahi","title":"Calendar.Nanakshahi","content":"Calendar.Nanakshahi \nNanakshahi \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-calendar.html#Nepali","title":"Calendar.Nepali","content":"Calendar.Nepali \nNepali \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-calendar.html#Persian","title":"Calendar.Persian","content":"Calendar.Persian \nPersian \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-calendar.html#Jalali","title":"Calendar.Jalali","content":"Calendar.Jalali \nJalali \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-calendar.html#Taiwan","title":"Calendar.Taiwan","content":"Calendar.Taiwan \nTaiwan \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-calendar.html#Thai","title":"Calendar.Thai","content":"Calendar.Thai \nThai \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-calendar.html#Ummalqura","title":"Calendar.Ummalqura","content":"Calendar.Ummalqura \nUmmalqura \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-categoryorder.html","title":"CategoryOrder","content":"CategoryOrder \n\n Specifies the ordering logic for the case of categorical variables. By default, plotly uses \u0022trace\u0022, which specifies the order that is present in the data supplied. \n Set \u0060categoryorder\u0060 to \u0022category ascending\u0022 or \u0022category descending\u0022 if order should be determined by the alphanumerical order of the category names. \n Set \u0060categoryorder\u0060 to \u0022array\u0022 to derive the ordering from the attribute \u0060categoryarray\u0060. If a category is not found in the \u0060categoryarray\u0060 array, the sorting behavior for that attribute will be identical to the \u0022trace\u0022 mode. \n The unspecified categories will follow the categories in \u0060categoryarray\u0060. Set \u0060categoryorder\u0060 to \u0022total ascending\u0022 or \u0022total descending\u0022 if order should be determined by the numerical order of the values. \n Similarly, the order can be determined by the min, max, sum, mean or median of all the values.\n \nCategoryOrder.Convert \nConvert \nCategoryOrder.toString \ntoString \nCategoryOrder.convert \nconvert \nCategoryOrder.Trace \nTrace \nCategoryOrder.CategoryAscending \nCategoryAscending \nCategoryOrder.CategoryDescending \nCategoryDescending \nCategoryOrder.Array \nArray \nCategoryOrder.TotalAscending \nTotalAscending \nCategoryOrder.TotalDescending \nTotalDescending \nCategoryOrder.MinAscending \nMinAscending \nCategoryOrder.MinDescending \nMinDescending \nCategoryOrder.MaxAscending \nMaxAscending \nCategoryOrder.MaxDescending \nMaxDescending \nCategoryOrder.SumAscending \nSumAscending \nCategoryOrder.SumDescending \nSumDescending \nCategoryOrder.MeanAscending \nMeanAscending \nCategoryOrder.MeanDescending \nMeanDescending \nCategoryOrder.MedianAscending \nMedianAscending \nCategoryOrder.MedianDescending \nMedianDescending"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-categoryorder.html#Convert","title":"CategoryOrder.Convert","content":"CategoryOrder.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-categoryorder.html#toString","title":"CategoryOrder.toString","content":"CategoryOrder.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-categoryorder.html#convert","title":"CategoryOrder.convert","content":"CategoryOrder.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-categoryorder.html#Trace","title":"CategoryOrder.Trace","content":"CategoryOrder.Trace \nTrace \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-categoryorder.html#CategoryAscending","title":"CategoryOrder.CategoryAscending","content":"CategoryOrder.CategoryAscending \nCategoryAscending \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-categoryorder.html#CategoryDescending","title":"CategoryOrder.CategoryDescending","content":"CategoryOrder.CategoryDescending \nCategoryDescending \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-categoryorder.html#Array","title":"CategoryOrder.Array","content":"CategoryOrder.Array \nArray \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-categoryorder.html#TotalAscending","title":"CategoryOrder.TotalAscending","content":"CategoryOrder.TotalAscending \nTotalAscending \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-categoryorder.html#TotalDescending","title":"CategoryOrder.TotalDescending","content":"CategoryOrder.TotalDescending \nTotalDescending \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-categoryorder.html#MinAscending","title":"CategoryOrder.MinAscending","content":"CategoryOrder.MinAscending \nMinAscending \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-categoryorder.html#MinDescending","title":"CategoryOrder.MinDescending","content":"CategoryOrder.MinDescending \nMinDescending \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-categoryorder.html#MaxAscending","title":"CategoryOrder.MaxAscending","content":"CategoryOrder.MaxAscending \nMaxAscending \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-categoryorder.html#MaxDescending","title":"CategoryOrder.MaxDescending","content":"CategoryOrder.MaxDescending \nMaxDescending \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-categoryorder.html#SumAscending","title":"CategoryOrder.SumAscending","content":"CategoryOrder.SumAscending \nSumAscending \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-categoryorder.html#SumDescending","title":"CategoryOrder.SumDescending","content":"CategoryOrder.SumDescending \nSumDescending \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-categoryorder.html#MeanAscending","title":"CategoryOrder.MeanAscending","content":"CategoryOrder.MeanAscending \nMeanAscending \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-categoryorder.html#MeanDescending","title":"CategoryOrder.MeanDescending","content":"CategoryOrder.MeanDescending \nMeanDescending \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-categoryorder.html#MedianAscending","title":"CategoryOrder.MedianAscending","content":"CategoryOrder.MedianAscending \nMedianAscending \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-categoryorder.html#MedianDescending","title":"CategoryOrder.MedianDescending","content":"CategoryOrder.MedianDescending \nMedianDescending \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-categorytickanchor.html","title":"CategoryTickAnchor","content":"CategoryTickAnchor \n \nCategoryTickAnchor.Convert \nConvert \nCategoryTickAnchor.toString \ntoString \nCategoryTickAnchor.convert \nconvert \nCategoryTickAnchor.Labels \nLabels \nCategoryTickAnchor.Boundaries \nBoundaries"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-categorytickanchor.html#Convert","title":"CategoryTickAnchor.Convert","content":"CategoryTickAnchor.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-categorytickanchor.html#toString","title":"CategoryTickAnchor.toString","content":"CategoryTickAnchor.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-categorytickanchor.html#convert","title":"CategoryTickAnchor.convert","content":"CategoryTickAnchor.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-categorytickanchor.html#Labels","title":"CategoryTickAnchor.Labels","content":"CategoryTickAnchor.Labels \nLabels \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-categorytickanchor.html#Boundaries","title":"CategoryTickAnchor.Boundaries","content":"CategoryTickAnchor.Boundaries \nBoundaries \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-cheatertype.html","title":"CheaterType","content":"CheaterType \n \nCheaterType.Convert \nConvert \nCheaterType.toString \ntoString \nCheaterType.convert \nconvert \nCheaterType.Index \nIndex \nCheaterType.Value \nValue"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-cheatertype.html#Convert","title":"CheaterType.Convert","content":"CheaterType.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-cheatertype.html#toString","title":"CheaterType.toString","content":"CheaterType.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-cheatertype.html#convert","title":"CheaterType.convert","content":"CheaterType.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-cheatertype.html#Index","title":"CheaterType.Index","content":"CheaterType.Index \nIndex \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-cheatertype.html#Value","title":"CheaterType.Value","content":"CheaterType.Value \nValue \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-clickmode.html","title":"ClickMode","content":"ClickMode \n \nClickMode.Convert \nConvert \nClickMode.toString \ntoString \nClickMode.convert \nconvert \nClickMode.Event \nEvent \nClickMode.Select \nSelect \nClickMode.EventSelect \nEventSelect \nClickMode.NoClickMode \nNoClickMode"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-clickmode.html#Convert","title":"ClickMode.Convert","content":"ClickMode.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-clickmode.html#toString","title":"ClickMode.toString","content":"ClickMode.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-clickmode.html#convert","title":"ClickMode.convert","content":"ClickMode.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-clickmode.html#Event","title":"ClickMode.Event","content":"ClickMode.Event \nEvent \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-clickmode.html#Select","title":"ClickMode.Select","content":"ClickMode.Select \nSelect \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-clickmode.html#EventSelect","title":"ClickMode.EventSelect","content":"ClickMode.EventSelect \nEventSelect \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-clickmode.html#NoClickMode","title":"ClickMode.NoClickMode","content":"ClickMode.NoClickMode \nNoClickMode \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-clicktoshow.html","title":"ClickToShow","content":"ClickToShow \n \nClickToShow.Convert \nConvert \nClickToShow.toString \ntoString \nClickToShow.convert \nconvert \nClickToShow.False \nFalse \nClickToShow.OnOff \nOnOff \nClickToShow.OnOut \nOnOut"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-clicktoshow.html#Convert","title":"ClickToShow.Convert","content":"ClickToShow.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-clicktoshow.html#toString","title":"ClickToShow.toString","content":"ClickToShow.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-clicktoshow.html#convert","title":"ClickToShow.convert","content":"ClickToShow.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-clicktoshow.html#False","title":"ClickToShow.False","content":"ClickToShow.False \nFalse \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-clicktoshow.html#OnOff","title":"ClickToShow.OnOff","content":"ClickToShow.OnOff \nOnOff \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-clicktoshow.html#OnOut","title":"ClickToShow.OnOut","content":"ClickToShow.OnOut \nOnOut \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-colorcomponentbound.html","title":"ColorComponentBound","content":"ColorComponentBound \n \nColorComponentBound.Convert \nConvert \nColorComponentBound.convert \nconvert \nColorComponentBound.RGB \nRGB \nColorComponentBound.RGBA \nRGBA \nColorComponentBound.RGBA256 \nRGBA256 \nColorComponentBound.HSL \nHSL \nColorComponentBound.HSLA \nHSLA"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-colorcomponentbound.html#Convert","title":"ColorComponentBound.Convert","content":"ColorComponentBound.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-colorcomponentbound.html#convert","title":"ColorComponentBound.convert","content":"ColorComponentBound.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-colorcomponentbound.html#RGB","title":"ColorComponentBound.RGB","content":"ColorComponentBound.RGB \nRGB \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-colorcomponentbound.html#RGBA","title":"ColorComponentBound.RGBA","content":"ColorComponentBound.RGBA \nRGBA \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-colorcomponentbound.html#RGBA256","title":"ColorComponentBound.RGBA256","content":"ColorComponentBound.RGBA256 \nRGBA256 \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-colorcomponentbound.html#HSL","title":"ColorComponentBound.HSL","content":"ColorComponentBound.HSL \nHSL \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-colorcomponentbound.html#HSLA","title":"ColorComponentBound.HSLA","content":"ColorComponentBound.HSLA \nHSLA \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-colormodel.html","title":"ColorModel","content":"ColorModel \n \nColorModel.Convert \nConvert \nColorModel.toString \ntoString \nColorModel.convert \nconvert \nColorModel.RGB \nRGB \nColorModel.RGBA \nRGBA \nColorModel.RGBA256 \nRGBA256 \nColorModel.HSL \nHSL \nColorModel.HSLA \nHSLA"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-colormodel.html#Convert","title":"ColorModel.Convert","content":"ColorModel.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-colormodel.html#toString","title":"ColorModel.toString","content":"ColorModel.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-colormodel.html#convert","title":"ColorModel.convert","content":"ColorModel.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-colormodel.html#RGB","title":"ColorModel.RGB","content":"ColorModel.RGB \nRGB \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-colormodel.html#RGBA","title":"ColorModel.RGBA","content":"ColorModel.RGBA \nRGBA \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-colormodel.html#RGBA256","title":"ColorModel.RGBA256","content":"ColorModel.RGBA256 \nRGBA256 \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-colormodel.html#HSL","title":"ColorModel.HSL","content":"ColorModel.HSL \nHSL \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-colormodel.html#HSLA","title":"ColorModel.HSLA","content":"ColorModel.HSLA \nHSLA \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-colorscale.html","title":"Colorscale","content":"Colorscale \n\n The colorscale must be a collection containing a mapping of a normalized value (between 0.0 and 1.0) to it\u0027s color. At minimum, a mapping for the lowest (0.0) and highest (1.0) values are required. \n \nColorscale.Convert \nConvert \nColorscale.convert \nconvert \nColorscale.Custom \nCustom \nColorscale.RdBu \nRdBu \nColorscale.Earth \nEarth \nColorscale.Blackbody \nBlackbody \nColorscale.YIOrRd \nYIOrRd \nColorscale.YIGnBu \nYIGnBu \nColorscale.Bluered \nBluered \nColorscale.Portland \nPortland \nColorscale.Electric \nElectric \nColorscale.Jet \nJet \nColorscale.Hot \nHot \nColorscale.Greys \nGreys \nColorscale.Greens \nGreens \nColorscale.Picnic \nPicnic \nColorscale.Rainbow \nRainbow \nColorscale.Viridis \nViridis \nColorscale.Cividis \nCividis"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-colorscale.html#Convert","title":"Colorscale.Convert","content":"Colorscale.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-colorscale.html#convert","title":"Colorscale.convert","content":"Colorscale.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-colorscale.html#Custom","title":"Colorscale.Custom","content":"Colorscale.Custom \nCustom \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-colorscale.html#RdBu","title":"Colorscale.RdBu","content":"Colorscale.RdBu \nRdBu \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-colorscale.html#Earth","title":"Colorscale.Earth","content":"Colorscale.Earth \nEarth \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-colorscale.html#Blackbody","title":"Colorscale.Blackbody","content":"Colorscale.Blackbody \nBlackbody \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-colorscale.html#YIOrRd","title":"Colorscale.YIOrRd","content":"Colorscale.YIOrRd \nYIOrRd \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-colorscale.html#YIGnBu","title":"Colorscale.YIGnBu","content":"Colorscale.YIGnBu \nYIGnBu \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-colorscale.html#Bluered","title":"Colorscale.Bluered","content":"Colorscale.Bluered \nBluered \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-colorscale.html#Portland","title":"Colorscale.Portland","content":"Colorscale.Portland \nPortland \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-colorscale.html#Electric","title":"Colorscale.Electric","content":"Colorscale.Electric \nElectric \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-colorscale.html#Jet","title":"Colorscale.Jet","content":"Colorscale.Jet \nJet \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-colorscale.html#Hot","title":"Colorscale.Hot","content":"Colorscale.Hot \nHot \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-colorscale.html#Greys","title":"Colorscale.Greys","content":"Colorscale.Greys \nGreys \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-colorscale.html#Greens","title":"Colorscale.Greens","content":"Colorscale.Greens \nGreens \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-colorscale.html#Picnic","title":"Colorscale.Picnic","content":"Colorscale.Picnic \nPicnic \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-colorscale.html#Rainbow","title":"Colorscale.Rainbow","content":"Colorscale.Rainbow \nRainbow \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-colorscale.html#Viridis","title":"Colorscale.Viridis","content":"Colorscale.Viridis \nViridis \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-colorscale.html#Cividis","title":"Colorscale.Cividis","content":"Colorscale.Cividis \nCividis \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-coneanchor.html","title":"ConeAnchor","content":"ConeAnchor \n\n Sets the cones\u0027 anchor with respect to their x/y/z positions. Note that \u0022cm\u0022 denote the cone\u0027s center of mass which corresponds to 1/4 from the tail to tip.\n \nConeAnchor.Convert \nConvert \nConeAnchor.toString \ntoString \nConeAnchor.convert \nconvert \nConeAnchor.Tip \nTip \nConeAnchor.Tail \nTail \nConeAnchor.CenterOfMass \nCenterOfMass \nConeAnchor.Center \nCenter"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-coneanchor.html#Convert","title":"ConeAnchor.Convert","content":"ConeAnchor.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-coneanchor.html#toString","title":"ConeAnchor.toString","content":"ConeAnchor.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-coneanchor.html#convert","title":"ConeAnchor.convert","content":"ConeAnchor.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-coneanchor.html#Tip","title":"ConeAnchor.Tip","content":"ConeAnchor.Tip \nTip \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-coneanchor.html#Tail","title":"ConeAnchor.Tail","content":"ConeAnchor.Tail \nTail \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-coneanchor.html#CenterOfMass","title":"ConeAnchor.CenterOfMass","content":"ConeAnchor.CenterOfMass \nCenterOfMass \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-coneanchor.html#Center","title":"ConeAnchor.Center","content":"ConeAnchor.Center \nCenter \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-conesizemode.html","title":"ConeSizeMode","content":"ConeSizeMode \n\n Sets the cones\u0027 anchor with respect to their x/y/z positions. Note that \u0022cm\u0022 denote the cone\u0027s center of mass which corresponds to 1/4 from the tail to tip.\n \nConeSizeMode.Convert \nConvert \nConeSizeMode.toString \ntoString \nConeSizeMode.convert \nconvert \nConeSizeMode.Scaled \nScaled \nConeSizeMode.Absolute \nAbsolute"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-conesizemode.html#Convert","title":"ConeSizeMode.Convert","content":"ConeSizeMode.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-conesizemode.html#toString","title":"ConeSizeMode.toString","content":"ConeSizeMode.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-conesizemode.html#convert","title":"ConeSizeMode.convert","content":"ConeSizeMode.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-conesizemode.html#Scaled","title":"ConeSizeMode.Scaled","content":"ConeSizeMode.Scaled \nScaled \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-conesizemode.html#Absolute","title":"ConeSizeMode.Absolute","content":"ConeSizeMode.Absolute \nAbsolute \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-connectormode.html","title":"ConnectorMode","content":"ConnectorMode \n\nThe shape of connector lines in Waterfall charts.\n \nConnectorMode.Convert \nConvert \nConnectorMode.toString \ntoString \nConnectorMode.convert \nconvert \nConnectorMode.Spanning \nSpanning \nConnectorMode.Between \nBetween"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-connectormode.html#Convert","title":"ConnectorMode.Convert","content":"ConnectorMode.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-connectormode.html#toString","title":"ConnectorMode.toString","content":"ConnectorMode.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-connectormode.html#convert","title":"ConnectorMode.convert","content":"ConnectorMode.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-connectormode.html#Spanning","title":"ConnectorMode.Spanning","content":"ConnectorMode.Spanning \nSpanning \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-connectormode.html#Between","title":"ConnectorMode.Between","content":"ConnectorMode.Between \nBetween \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-constraintext.html","title":"ConstrainText","content":"ConstrainText \n \nConstrainText.Convert \nConvert \nConstrainText.toString \ntoString \nConstrainText.convert \nconvert \nConstrainText.Inside \nInside \nConstrainText.Outside \nOutside \nConstrainText.Both \nBoth \nConstrainText.None \nNone"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-constraintext.html#Convert","title":"ConstrainText.Convert","content":"ConstrainText.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-constraintext.html#toString","title":"ConstrainText.toString","content":"ConstrainText.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-constraintext.html#convert","title":"ConstrainText.convert","content":"ConstrainText.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-constraintext.html#Inside","title":"ConstrainText.Inside","content":"ConstrainText.Inside \nInside \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-constraintext.html#Outside","title":"ConstrainText.Outside","content":"ConstrainText.Outside \nOutside \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-constraintext.html#Both","title":"ConstrainText.Both","content":"ConstrainText.Both \nBoth \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-constraintext.html#None","title":"ConstrainText.None","content":"ConstrainText.None \nNone \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-coordinatetype.html","title":"CoordinateType","content":"CoordinateType \n \nCoordinateType.Convert \nConvert \nCoordinateType.toString \ntoString \nCoordinateType.convert \nconvert \nCoordinateType.Array \nArray \nCoordinateType.Scaled \nScaled"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-coordinatetype.html#Convert","title":"CoordinateType.Convert","content":"CoordinateType.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-coordinatetype.html#toString","title":"CoordinateType.toString","content":"CoordinateType.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-coordinatetype.html#convert","title":"CoordinateType.convert","content":"CoordinateType.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-coordinatetype.html#Array","title":"CoordinateType.Array","content":"CoordinateType.Array \nArray \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-coordinatetype.html#Scaled","title":"CoordinateType.Scaled","content":"CoordinateType.Scaled \nScaled \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-cumulativedirection.html","title":"CumulativeDirection","content":"CumulativeDirection \n\n Only applies if cumulative is enabled. If \u0022increasing\u0022 (default) we sum all prior bins, so the result increases from left to right.\n If \u0022decreasing\u0022 we sum later bins so the result decreases from left to right.  default: \u0022increasing\u0022\n \nCumulativeDirection.Convert \nConvert \nCumulativeDirection.toString \ntoString \nCumulativeDirection.convert \nconvert \nCumulativeDirection.Increasing \nIncreasing \nCumulativeDirection.Decreasing \nDecreasing"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-cumulativedirection.html#Convert","title":"CumulativeDirection.Convert","content":"CumulativeDirection.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-cumulativedirection.html#toString","title":"CumulativeDirection.toString","content":"CumulativeDirection.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-cumulativedirection.html#convert","title":"CumulativeDirection.convert","content":"CumulativeDirection.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-cumulativedirection.html#Increasing","title":"CumulativeDirection.Increasing","content":"CumulativeDirection.Increasing \nIncreasing \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-cumulativedirection.html#Decreasing","title":"CumulativeDirection.Decreasing","content":"CumulativeDirection.Decreasing \nDecreasing \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-currentbin.html","title":"Currentbin","content":"Currentbin \n\n Only applies if cumulative is enabled. Sets whether the current bin is included, excluded, or has half of its value included in \n the current cumulative value. \u0022include\u0022 is the default for compatibility with various other tools, however it introduces\n a half-bin bias to the results. \u0022exclude\u0022 makes the opposite half-bin bias, and \u0022half\u0022 removes it.\n \nCurrentbin.Convert \nConvert \nCurrentbin.toString \ntoString \nCurrentbin.convert \nconvert \nCurrentbin.Include \nInclude \nCurrentbin.Exclude \nExclude \nCurrentbin.Half \nHalf"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-currentbin.html#Convert","title":"Currentbin.Convert","content":"Currentbin.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-currentbin.html#toString","title":"Currentbin.toString","content":"Currentbin.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-currentbin.html#convert","title":"Currentbin.convert","content":"Currentbin.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-currentbin.html#Include","title":"Currentbin.Include","content":"Currentbin.Include \nInclude \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-currentbin.html#Exclude","title":"Currentbin.Exclude","content":"Currentbin.Exclude \nExclude \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-currentbin.html#Half","title":"Currentbin.Half","content":"Currentbin.Half \nHalf \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-delaunayaxis.html","title":"Delaunayaxis","content":"Delaunayaxis \n\n Sets the Delaunay axis, which is the axis that is perpendicular to the surface of the Delaunay triangulation.\n It has an effect if \u0060i\u0060, \u0060j\u0060, \u0060k\u0060 are not provided and \u0060alphahull\u0060 is set to indicate Delaunay triangulation. \n Default is \u0022z\u0022\n \nDelaunayaxis.Convert \nConvert \nDelaunayaxis.toString \ntoString \nDelaunayaxis.convert \nconvert \nDelaunayaxis.X \nX \nDelaunayaxis.Y \nY \nDelaunayaxis.Z \nZ"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-delaunayaxis.html#Convert","title":"Delaunayaxis.Convert","content":"Delaunayaxis.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-delaunayaxis.html#toString","title":"Delaunayaxis.toString","content":"Delaunayaxis.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-delaunayaxis.html#convert","title":"Delaunayaxis.convert","content":"Delaunayaxis.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-delaunayaxis.html#X","title":"Delaunayaxis.X","content":"Delaunayaxis.X \nX \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-delaunayaxis.html#Y","title":"Delaunayaxis.Y","content":"Delaunayaxis.Y \nY \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-delaunayaxis.html#Z","title":"Delaunayaxis.Z","content":"Delaunayaxis.Z \nZ \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-direction.html","title":"Direction","content":"Direction \n\n Specifies the direction at which succeeding sectors follow one another.\n \nDirection.Convert \nConvert \nDirection.toString \ntoString \nDirection.convert \nconvert \nDirection.Clockwise \nClockwise \nDirection.CounterClockwise \nCounterClockwise"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-direction.html#Convert","title":"Direction.Convert","content":"Direction.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-direction.html#toString","title":"Direction.toString","content":"Direction.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-direction.html#convert","title":"Direction.convert","content":"Direction.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-direction.html#Clockwise","title":"Direction.Clockwise","content":"Direction.Clockwise \nClockwise \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-direction.html#CounterClockwise","title":"Direction.CounterClockwise","content":"Direction.CounterClockwise \nCounterClockwise \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-dragmode.html","title":"DragMode","content":"DragMode \n\n Sets this figure\u0027s behavior when a user preforms a mouse \u0027drag\u0027 in the plot area. When set to \u0027zoom\u0027, a portion of the plot will be highlighted,\n when the viewer exits the drag, this highlighted section will be zoomed in on. When set to \u0027pan\u0027, data in the plot will move along with the viewers\n dragging motions. A user can always depress the \u0027shift\u0027 key to access the whatever functionality has not been set as the default. In 3D plots, the \n default drag mode is \u0027rotate\u0027 which rotates the scene.\n \nDragMode.Convert \nConvert \nDragMode.toString \ntoString \nDragMode.convert \nconvert \nDragMode.Zoom \nZoom \nDragMode.Pan \nPan \nDragMode.Select \nSelect \nDragMode.Lasso \nLasso \nDragMode.DrawClosedPath \nDrawClosedPath \nDragMode.DrawOpenPath \nDrawOpenPath \nDragMode.DrawLine \nDrawLine \nDragMode.DrawRect \nDrawRect \nDragMode.DrawCircle \nDrawCircle \nDragMode.Orbit \nOrbit \nDragMode.TurnTable \nTurnTable \nDragMode.False \nFalse"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-dragmode.html#Convert","title":"DragMode.Convert","content":"DragMode.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-dragmode.html#toString","title":"DragMode.toString","content":"DragMode.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-dragmode.html#convert","title":"DragMode.convert","content":"DragMode.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-dragmode.html#Zoom","title":"DragMode.Zoom","content":"DragMode.Zoom \nZoom \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-dragmode.html#Pan","title":"DragMode.Pan","content":"DragMode.Pan \nPan \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-dragmode.html#Select","title":"DragMode.Select","content":"DragMode.Select \nSelect \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-dragmode.html#Lasso","title":"DragMode.Lasso","content":"DragMode.Lasso \nLasso \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-dragmode.html#DrawClosedPath","title":"DragMode.DrawClosedPath","content":"DragMode.DrawClosedPath \nDrawClosedPath \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-dragmode.html#DrawOpenPath","title":"DragMode.DrawOpenPath","content":"DragMode.DrawOpenPath \nDrawOpenPath \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-dragmode.html#DrawLine","title":"DragMode.DrawLine","content":"DragMode.DrawLine \nDrawLine \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-dragmode.html#DrawRect","title":"DragMode.DrawRect","content":"DragMode.DrawRect \nDrawRect \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-dragmode.html#DrawCircle","title":"DragMode.DrawCircle","content":"DragMode.DrawCircle \nDrawCircle \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-dragmode.html#Orbit","title":"DragMode.Orbit","content":"DragMode.Orbit \nOrbit \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-dragmode.html#TurnTable","title":"DragMode.TurnTable","content":"DragMode.TurnTable \nTurnTable \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-dragmode.html#False","title":"DragMode.False","content":"DragMode.False \nFalse \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-drawingstyle.html","title":"DrawingStyle","content":"DrawingStyle \n\n Dash: Sets the drawing style of the lines segments in this trace.\n Sets the style of the lines. Set to a dash string type or a dash length in px.\n \nDrawingStyle.Convert \nConvert \nDrawingStyle.toString \ntoString \nDrawingStyle.convert \nconvert \nDrawingStyle.Solid \nSolid \nDrawingStyle.Dash \nDash \nDrawingStyle.Dot \nDot \nDrawingStyle.DashDot \nDashDot \nDrawingStyle.User \nUser"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-drawingstyle.html#Convert","title":"DrawingStyle.Convert","content":"DrawingStyle.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-drawingstyle.html#toString","title":"DrawingStyle.toString","content":"DrawingStyle.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-drawingstyle.html#convert","title":"DrawingStyle.convert","content":"DrawingStyle.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-drawingstyle.html#Solid","title":"DrawingStyle.Solid","content":"DrawingStyle.Solid \nSolid \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-drawingstyle.html#Dash","title":"DrawingStyle.Dash","content":"DrawingStyle.Dash \nDash \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-drawingstyle.html#Dot","title":"DrawingStyle.Dot","content":"DrawingStyle.Dot \nDot \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-drawingstyle.html#DashDot","title":"DrawingStyle.DashDot","content":"DrawingStyle.DashDot \nDashDot \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-drawingstyle.html#User","title":"DrawingStyle.User","content":"DrawingStyle.User \nUser \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-errortype.html","title":"ErrorType","content":"ErrorType \n \nErrorType.Convert \nConvert \nErrorType.toString \ntoString \nErrorType.convert \nconvert \nErrorType.Percent \nPercent \nErrorType.Constant \nConstant \nErrorType.Sqrt \nSqrt \nErrorType.Data \nData"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-errortype.html#Convert","title":"ErrorType.Convert","content":"ErrorType.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-errortype.html#toString","title":"ErrorType.toString","content":"ErrorType.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-errortype.html#convert","title":"ErrorType.convert","content":"ErrorType.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-errortype.html#Percent","title":"ErrorType.Percent","content":"ErrorType.Percent \nPercent \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-errortype.html#Constant","title":"ErrorType.Constant","content":"ErrorType.Constant \nConstant \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-errortype.html#Sqrt","title":"ErrorType.Sqrt","content":"ErrorType.Sqrt \nSqrt \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-errortype.html#Data","title":"ErrorType.Data","content":"ErrorType.Data \nData \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-exponentformat.html","title":"ExponentFormat","content":"ExponentFormat \n\n Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If \u0022none\u0022, it appears as 1,000,000,000. If \u0022e\u0022, 1e\u002B9. If \u0022E\u0022, 1E\u002B9. \n If \u0022power\u0022, 1x10^9 (with 9 in a super script). If \u0022SI\u0022, 1G. If \u0022B\u0022, 1B.\n \nExponentFormat.Convert \nConvert \nExponentFormat.toString \ntoString \nExponentFormat.convert \nconvert \nExponentFormat.B \nB \nExponentFormat.SI \nSI \nExponentFormat.Power \nPower \nExponentFormat.Ecapital \nEcapital \nExponentFormat.E \nE \nExponentFormat.None \nNone"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-exponentformat.html#Convert","title":"ExponentFormat.Convert","content":"ExponentFormat.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-exponentformat.html#toString","title":"ExponentFormat.toString","content":"ExponentFormat.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-exponentformat.html#convert","title":"ExponentFormat.convert","content":"ExponentFormat.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-exponentformat.html#B","title":"ExponentFormat.B","content":"ExponentFormat.B \nB \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-exponentformat.html#SI","title":"ExponentFormat.SI","content":"ExponentFormat.SI \nSI \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-exponentformat.html#Power","title":"ExponentFormat.Power","content":"ExponentFormat.Power \nPower \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-exponentformat.html#Ecapital","title":"ExponentFormat.Ecapital","content":"ExponentFormat.Ecapital \nEcapital \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-exponentformat.html#E","title":"ExponentFormat.E","content":"ExponentFormat.E \nE \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-exponentformat.html#None","title":"ExponentFormat.None","content":"ExponentFormat.None \nNone \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-fill.html","title":"Fill","content":"Fill \n\n Sets the area to fill with a solid color. (default: \u0022none\u0022 )\n \nFill.Convert \nConvert \nFill.toString \ntoString \nFill.convert \nconvert \nFill.None \nNone \nFill.ToZero_y \nToZero_y \nFill.ToZero_x \nToZero_x \nFill.ToNext_y \nToNext_y \nFill.ToNext_x \nToNext_x \nFill.ToSelf \nToSelf \nFill.ToNext \nToNext"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-fill.html#Convert","title":"Fill.Convert","content":"Fill.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-fill.html#toString","title":"Fill.toString","content":"Fill.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-fill.html#convert","title":"Fill.convert","content":"Fill.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-fill.html#None","title":"Fill.None","content":"Fill.None \nNone \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-fill.html#ToZero_y","title":"Fill.ToZero_y","content":"Fill.ToZero_y \nToZero_y \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-fill.html#ToZero_x","title":"Fill.ToZero_x","content":"Fill.ToZero_x \nToZero_x \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-fill.html#ToNext_y","title":"Fill.ToNext_y","content":"Fill.ToNext_y \nToNext_y \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-fill.html#ToNext_x","title":"Fill.ToNext_x","content":"Fill.ToNext_x \nToNext_x \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-fill.html#ToSelf","title":"Fill.ToSelf","content":"Fill.ToSelf \nToSelf \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-fill.html#ToNext","title":"Fill.ToNext","content":"Fill.ToNext \nToNext \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-fontfamily.html","title":"FontFamily","content":"FontFamily \n\n Names of installed font families\n \nFontFamily.Convert \nConvert \nFontFamily.toString \ntoString \nFontFamily.convert \nconvert \nFontFamily.Arial \nArial \nFontFamily.Balto \nBalto \nFontFamily.Courier_New \nCourier_New \nFontFamily.Consolas \nConsolas \nFontFamily.Droid_Sans \nDroid_Sans \nFontFamily.Droid_Serif \nDroid_Serif \nFontFamily.Droid_Sans_Mono \nDroid_Sans_Mono \nFontFamily.Gravitas_One \nGravitas_One \nFontFamily.Old_Standard_TT \nOld_Standard_TT \nFontFamily.Open_Sans \nOpen_Sans \nFontFamily.Overpass \nOverpass \nFontFamily.PT_Sans_Narrow \nPT_Sans_Narrow \nFontFamily.Raleway \nRaleway \nFontFamily.Times_New_Roman \nTimes_New_Roman \nFontFamily.Custom \nCustom"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-fontfamily.html#Convert","title":"FontFamily.Convert","content":"FontFamily.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-fontfamily.html#toString","title":"FontFamily.toString","content":"FontFamily.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-fontfamily.html#convert","title":"FontFamily.convert","content":"FontFamily.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-fontfamily.html#Arial","title":"FontFamily.Arial","content":"FontFamily.Arial \nArial \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-fontfamily.html#Balto","title":"FontFamily.Balto","content":"FontFamily.Balto \nBalto \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-fontfamily.html#Courier_New","title":"FontFamily.Courier_New","content":"FontFamily.Courier_New \nCourier_New \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-fontfamily.html#Consolas","title":"FontFamily.Consolas","content":"FontFamily.Consolas \nConsolas \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-fontfamily.html#Droid_Sans","title":"FontFamily.Droid_Sans","content":"FontFamily.Droid_Sans \nDroid_Sans \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-fontfamily.html#Droid_Serif","title":"FontFamily.Droid_Serif","content":"FontFamily.Droid_Serif \nDroid_Serif \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-fontfamily.html#Droid_Sans_Mono","title":"FontFamily.Droid_Sans_Mono","content":"FontFamily.Droid_Sans_Mono \nDroid_Sans_Mono \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-fontfamily.html#Gravitas_One","title":"FontFamily.Gravitas_One","content":"FontFamily.Gravitas_One \nGravitas_One \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-fontfamily.html#Old_Standard_TT","title":"FontFamily.Old_Standard_TT","content":"FontFamily.Old_Standard_TT \nOld_Standard_TT \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-fontfamily.html#Open_Sans","title":"FontFamily.Open_Sans","content":"FontFamily.Open_Sans \nOpen_Sans \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-fontfamily.html#Overpass","title":"FontFamily.Overpass","content":"FontFamily.Overpass \nOverpass \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-fontfamily.html#PT_Sans_Narrow","title":"FontFamily.PT_Sans_Narrow","content":"FontFamily.PT_Sans_Narrow \nPT_Sans_Narrow \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-fontfamily.html#Raleway","title":"FontFamily.Raleway","content":"FontFamily.Raleway \nRaleway \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-fontfamily.html#Times_New_Roman","title":"FontFamily.Times_New_Roman","content":"FontFamily.Times_New_Roman \nTimes_New_Roman \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-fontfamily.html#Custom","title":"FontFamily.Custom","content":"FontFamily.Custom \nCustom \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-funnelmode.html","title":"FunnelMode","content":"FunnelMode \n \nFunnelMode.Convert \nConvert \nFunnelMode.toString \ntoString \nFunnelMode.convert \nconvert \nFunnelMode.Stack \nStack \nFunnelMode.Group \nGroup \nFunnelMode.Overlay \nOverlay"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-funnelmode.html#Convert","title":"FunnelMode.Convert","content":"FunnelMode.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-funnelmode.html#toString","title":"FunnelMode.toString","content":"FunnelMode.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-funnelmode.html#convert","title":"FunnelMode.convert","content":"FunnelMode.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-funnelmode.html#Stack","title":"FunnelMode.Stack","content":"FunnelMode.Stack \nStack \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-funnelmode.html#Group","title":"FunnelMode.Group","content":"FunnelMode.Group \nGroup \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-funnelmode.html#Overlay","title":"FunnelMode.Overlay","content":"FunnelMode.Overlay \nOverlay \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geofitbounds.html","title":"GeoFitBounds","content":"GeoFitBounds \n\nUsed for the Layout.geo field. Determines if this subplot\u0027s view settings are auto-computed to fit trace data. On scoped maps, setting \u0060fitbounds\u0060 leads to \u0060center.lon\u0060 and \u0060center.lat\u0060 getting auto-filled. On maps with a non-clipped projection, setting \u0060fitbounds\u0060 leads to \u0060center.lon\u0060, \u0060center.lat\u0060, and \u0060projection.rotation.lon\u0060 getting auto-filled. On maps with a clipped projection, setting \u0060fitbounds\u0060 leads to \u0060center.lon\u0060, \u0060center.lat\u0060, \u0060projection.rotation.lon\u0060, \u0060projection.rotation.lat\u0060, \u0060lonaxis.range\u0060 and \u0060lonaxis.range\u0060 getting auto-filled. If \u0022locations\u0022, only the trace\u0027s visible locations are considered in the \u0060fitbounds\u0060 computations. If \u0022geojson\u0022, the entire trace input \u0060geojson\u0060 (if provided) is considered in the \u0060fitbounds\u0060 computations, Defaults to \u0022false\u0022.\n \nGeoFitBounds.Convert \nConvert \nGeoFitBounds.toString \ntoString \nGeoFitBounds.convert \nconvert \nGeoFitBounds.False \nFalse \nGeoFitBounds.Locations \nLocations \nGeoFitBounds.GeoJson \nGeoJson"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geofitbounds.html#Convert","title":"GeoFitBounds.Convert","content":"GeoFitBounds.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geofitbounds.html#toString","title":"GeoFitBounds.toString","content":"GeoFitBounds.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geofitbounds.html#convert","title":"GeoFitBounds.convert","content":"GeoFitBounds.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geofitbounds.html#False","title":"GeoFitBounds.False","content":"GeoFitBounds.False \nFalse \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geofitbounds.html#Locations","title":"GeoFitBounds.Locations","content":"GeoFitBounds.Locations \nLocations \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geofitbounds.html#GeoJson","title":"GeoFitBounds.GeoJson","content":"GeoFitBounds.GeoJson \nGeoJson \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoprojectiontype.html","title":"GeoProjectionType","content":"GeoProjectionType \n \nGeoProjectionType.Convert \nConvert \nGeoProjectionType.toString \ntoString \nGeoProjectionType.convert \nconvert \nGeoProjectionType.EquiRectangular \nEquiRectangular \nGeoProjectionType.Mercator \nMercator \nGeoProjectionType.Orthographic \nOrthographic \nGeoProjectionType.NaturalEarth \nNaturalEarth \nGeoProjectionType.Kavrayskiy7 \nKavrayskiy7 \nGeoProjectionType.Miller \nMiller \nGeoProjectionType.Robinson \nRobinson \nGeoProjectionType.Eckert4 \nEckert4 \nGeoProjectionType.AzimuthalEqualArea \nAzimuthalEqualArea \nGeoProjectionType.AzimuthalEquidistant \nAzimuthalEquidistant \nGeoProjectionType.ConicEqualArea \nConicEqualArea \nGeoProjectionType.ConicConformal \nConicConformal \nGeoProjectionType.ConicEquidistant \nConicEquidistant \nGeoProjectionType.Gnomonic \nGnomonic \nGeoProjectionType.Stereographic \nStereographic \nGeoProjectionType.Mollweide \nMollweide \nGeoProjectionType.Hammer \nHammer \nGeoProjectionType.TransverseMercator \nTransverseMercator \nGeoProjectionType.AlbersUSA \nAlbersUSA \nGeoProjectionType.WinkelTripel \nWinkelTripel \nGeoProjectionType.Aitoff \nAitoff \nGeoProjectionType.Sinusoidal \nSinusoidal"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoprojectiontype.html#Convert","title":"GeoProjectionType.Convert","content":"GeoProjectionType.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoprojectiontype.html#toString","title":"GeoProjectionType.toString","content":"GeoProjectionType.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoprojectiontype.html#convert","title":"GeoProjectionType.convert","content":"GeoProjectionType.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoprojectiontype.html#EquiRectangular","title":"GeoProjectionType.EquiRectangular","content":"GeoProjectionType.EquiRectangular \nEquiRectangular \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoprojectiontype.html#Mercator","title":"GeoProjectionType.Mercator","content":"GeoProjectionType.Mercator \nMercator \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoprojectiontype.html#Orthographic","title":"GeoProjectionType.Orthographic","content":"GeoProjectionType.Orthographic \nOrthographic \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoprojectiontype.html#NaturalEarth","title":"GeoProjectionType.NaturalEarth","content":"GeoProjectionType.NaturalEarth \nNaturalEarth \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoprojectiontype.html#Kavrayskiy7","title":"GeoProjectionType.Kavrayskiy7","content":"GeoProjectionType.Kavrayskiy7 \nKavrayskiy7 \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoprojectiontype.html#Miller","title":"GeoProjectionType.Miller","content":"GeoProjectionType.Miller \nMiller \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoprojectiontype.html#Robinson","title":"GeoProjectionType.Robinson","content":"GeoProjectionType.Robinson \nRobinson \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoprojectiontype.html#Eckert4","title":"GeoProjectionType.Eckert4","content":"GeoProjectionType.Eckert4 \nEckert4 \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoprojectiontype.html#AzimuthalEqualArea","title":"GeoProjectionType.AzimuthalEqualArea","content":"GeoProjectionType.AzimuthalEqualArea \nAzimuthalEqualArea \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoprojectiontype.html#AzimuthalEquidistant","title":"GeoProjectionType.AzimuthalEquidistant","content":"GeoProjectionType.AzimuthalEquidistant \nAzimuthalEquidistant \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoprojectiontype.html#ConicEqualArea","title":"GeoProjectionType.ConicEqualArea","content":"GeoProjectionType.ConicEqualArea \nConicEqualArea \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoprojectiontype.html#ConicConformal","title":"GeoProjectionType.ConicConformal","content":"GeoProjectionType.ConicConformal \nConicConformal \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoprojectiontype.html#ConicEquidistant","title":"GeoProjectionType.ConicEquidistant","content":"GeoProjectionType.ConicEquidistant \nConicEquidistant \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoprojectiontype.html#Gnomonic","title":"GeoProjectionType.Gnomonic","content":"GeoProjectionType.Gnomonic \nGnomonic \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoprojectiontype.html#Stereographic","title":"GeoProjectionType.Stereographic","content":"GeoProjectionType.Stereographic \nStereographic \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoprojectiontype.html#Mollweide","title":"GeoProjectionType.Mollweide","content":"GeoProjectionType.Mollweide \nMollweide \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoprojectiontype.html#Hammer","title":"GeoProjectionType.Hammer","content":"GeoProjectionType.Hammer \nHammer \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoprojectiontype.html#TransverseMercator","title":"GeoProjectionType.TransverseMercator","content":"GeoProjectionType.TransverseMercator \nTransverseMercator \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoprojectiontype.html#AlbersUSA","title":"GeoProjectionType.AlbersUSA","content":"GeoProjectionType.AlbersUSA \nAlbersUSA \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoprojectiontype.html#WinkelTripel","title":"GeoProjectionType.WinkelTripel","content":"GeoProjectionType.WinkelTripel \nWinkelTripel \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoprojectiontype.html#Aitoff","title":"GeoProjectionType.Aitoff","content":"GeoProjectionType.Aitoff \nAitoff \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoprojectiontype.html#Sinusoidal","title":"GeoProjectionType.Sinusoidal","content":"GeoProjectionType.Sinusoidal \nSinusoidal \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-georesolution.html","title":"GeoResolution","content":"GeoResolution \n\nUsed for the Layout.geo field. Sets the resolution of the base layers. The values have units of km/mm e.g. 110 corresponds to a scale ratio of 1:110,000,000.\n \nGeoResolution.Convert \nConvert \nGeoResolution.toString \ntoString \nGeoResolution.convert \nconvert \nGeoResolution.R110 \nR110 \nGeoResolution.R50 \nR50"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-georesolution.html#Convert","title":"GeoResolution.Convert","content":"GeoResolution.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-georesolution.html#toString","title":"GeoResolution.toString","content":"GeoResolution.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-georesolution.html#convert","title":"GeoResolution.convert","content":"GeoResolution.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-georesolution.html#R110","title":"GeoResolution.R110","content":"GeoResolution.R110 \nR110 \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-georesolution.html#R50","title":"GeoResolution.R50","content":"GeoResolution.R50 \nR50 \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoscope.html","title":"GeoScope","content":"GeoScope \n \nGeoScope.Convert \nConvert \nGeoScope.toString \ntoString \nGeoScope.convert \nconvert \nGeoScope.World \nWorld \nGeoScope.Usa \nUsa \nGeoScope.Europe \nEurope \nGeoScope.Asia \nAsia \nGeoScope.Africa \nAfrica \nGeoScope.NorthAmerica \nNorthAmerica \nGeoScope.SouthAmerica \nSouthAmerica"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoscope.html#Convert","title":"GeoScope.Convert","content":"GeoScope.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoscope.html#toString","title":"GeoScope.toString","content":"GeoScope.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoscope.html#convert","title":"GeoScope.convert","content":"GeoScope.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoscope.html#World","title":"GeoScope.World","content":"GeoScope.World \nWorld \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoscope.html#Usa","title":"GeoScope.Usa","content":"GeoScope.Usa \nUsa \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoscope.html#Europe","title":"GeoScope.Europe","content":"GeoScope.Europe \nEurope \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoscope.html#Asia","title":"GeoScope.Asia","content":"GeoScope.Asia \nAsia \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoscope.html#Africa","title":"GeoScope.Africa","content":"GeoScope.Africa \nAfrica \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoscope.html#NorthAmerica","title":"GeoScope.NorthAmerica","content":"GeoScope.NorthAmerica \nNorthAmerica \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoscope.html#SouthAmerica","title":"GeoScope.SouthAmerica","content":"GeoScope.SouthAmerica \nSouthAmerica \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-gradienttype.html","title":"GradientType","content":"GradientType \n \nGradientType.Convert \nConvert \nGradientType.toString \ntoString \nGradientType.convert \nconvert \nGradientType.Radial \nRadial \nGradientType.Horizontal \nHorizontal \nGradientType.Vertical \nVertical \nGradientType.None \nNone"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-gradienttype.html#Convert","title":"GradientType.Convert","content":"GradientType.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-gradienttype.html#toString","title":"GradientType.toString","content":"GradientType.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-gradienttype.html#convert","title":"GradientType.convert","content":"GradientType.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-gradienttype.html#Radial","title":"GradientType.Radial","content":"GradientType.Radial \nRadial \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-gradienttype.html#Horizontal","title":"GradientType.Horizontal","content":"GradientType.Horizontal \nHorizontal \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-gradienttype.html#Vertical","title":"GradientType.Vertical","content":"GradientType.Vertical \nVertical \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-gradienttype.html#None","title":"GradientType.None","content":"GradientType.None \nNone \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-groupnorm.html","title":"GroupNorm","content":"GroupNorm \n \nGroupNorm.Convert \nConvert \nGroupNorm.toString \ntoString \nGroupNorm.convert \nconvert \nGroupNorm.None \nNone \nGroupNorm.Fraction \nFraction \nGroupNorm.Percent \nPercent"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-groupnorm.html#Convert","title":"GroupNorm.Convert","content":"GroupNorm.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-groupnorm.html#toString","title":"GroupNorm.toString","content":"GroupNorm.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-groupnorm.html#convert","title":"GroupNorm.convert","content":"GroupNorm.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-groupnorm.html#None","title":"GroupNorm.None","content":"GroupNorm.None \nNone \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-groupnorm.html#Fraction","title":"GroupNorm.Fraction","content":"GroupNorm.Fraction \nFraction \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-groupnorm.html#Percent","title":"GroupNorm.Percent","content":"GroupNorm.Percent \nPercent \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-histfunc.html","title":"HistFunc","content":"HistFunc \n\n Sets the binning function used for this histogram trace. The default value is \u0027count\u0027 where the histogram values are computed \n by counting the number of values lying inside each bin. With \u0027histfunc\u0027 set to \u0027sum\u0027, \u0027avg\u0027, \u0027min\u0027 or \u0027max\u0027, the histogram values \n are computed using the sum, the average, the minimum or the \u0027maximum\u0027 of the values lying inside each bin respectively.\n default: Count    \n \nHistFunc.Convert \nConvert \nHistFunc.toString \ntoString \nHistFunc.convert \nconvert \nHistFunc.Count \nCount \nHistFunc.Sum \nSum \nHistFunc.Avg \nAvg \nHistFunc.Min \nMin \nHistFunc.Max \nMax"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-histfunc.html#Convert","title":"HistFunc.Convert","content":"HistFunc.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-histfunc.html#toString","title":"HistFunc.toString","content":"HistFunc.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-histfunc.html#convert","title":"HistFunc.convert","content":"HistFunc.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-histfunc.html#Count","title":"HistFunc.Count","content":"HistFunc.Count \nCount \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-histfunc.html#Sum","title":"HistFunc.Sum","content":"HistFunc.Sum \nSum \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-histfunc.html#Avg","title":"HistFunc.Avg","content":"HistFunc.Avg \nAvg \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-histfunc.html#Min","title":"HistFunc.Min","content":"HistFunc.Min \nMin \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-histfunc.html#Max","title":"HistFunc.Max","content":"HistFunc.Max \nMax \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-histnorm.html","title":"HistNorm","content":"HistNorm \n\n Sets the type of normalization for this histogram trace. By default (\u0027histnorm\u0027 set to \u0027\u0027) the height of each bar \n displays the frequency of occurrence, i.e., the number of times this value was found in the corresponding bin.\n If set to \u0027percent\u0027, the height of each bar displays the percentage of total occurrences found within the corresponding bin. \n If set to \u0027probability\u0027, the height of each bar displays the probability that an event will fall into the corresponding bin. \n If set to \u0027density\u0027, the height of each bar is equal to the number of occurrences in a bin divided by the size of the bin \n interval such that summing the area of all bins will yield the total number of occurrences. If set to \u0027probability density\u0027, \n the height of each bar is equal to the number of probability that an event will fall into the corresponding bin divided by \n the size of the bin interval such that summing the area of all bins will yield 1.\n default: None  \n \nHistNorm.Convert \nConvert \nHistNorm.toString \ntoString \nHistNorm.convert \nconvert \nHistNorm.None \nNone \nHistNorm.Percent \nPercent \nHistNorm.Probability \nProbability \nHistNorm.Density \nDensity \nHistNorm.ProbabilityDensity \nProbabilityDensity"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-histnorm.html#Convert","title":"HistNorm.Convert","content":"HistNorm.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-histnorm.html#toString","title":"HistNorm.toString","content":"HistNorm.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-histnorm.html#convert","title":"HistNorm.convert","content":"HistNorm.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-histnorm.html#None","title":"HistNorm.None","content":"HistNorm.None \nNone \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-histnorm.html#Percent","title":"HistNorm.Percent","content":"HistNorm.Percent \nPercent \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-histnorm.html#Probability","title":"HistNorm.Probability","content":"HistNorm.Probability \nProbability \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-histnorm.html#Density","title":"HistNorm.Density","content":"HistNorm.Density \nDensity \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-histnorm.html#ProbabilityDensity","title":"HistNorm.ProbabilityDensity","content":"HistNorm.ProbabilityDensity \nProbabilityDensity \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-horizontalalign.html","title":"HorizontalAlign","content":"HorizontalAlign \n \nHorizontalAlign.Convert \nConvert \nHorizontalAlign.toString \ntoString \nHorizontalAlign.convert \nconvert \nHorizontalAlign.Left \nLeft \nHorizontalAlign.Center \nCenter \nHorizontalAlign.Right \nRight"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-horizontalalign.html#Convert","title":"HorizontalAlign.Convert","content":"HorizontalAlign.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-horizontalalign.html#toString","title":"HorizontalAlign.toString","content":"HorizontalAlign.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-horizontalalign.html#convert","title":"HorizontalAlign.convert","content":"HorizontalAlign.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-horizontalalign.html#Left","title":"HorizontalAlign.Left","content":"HorizontalAlign.Left \nLeft \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-horizontalalign.html#Center","title":"HorizontalAlign.Center","content":"HorizontalAlign.Center \nCenter \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-horizontalalign.html#Right","title":"HorizontalAlign.Right","content":"HorizontalAlign.Right \nRight \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-hoverinfo.html","title":"HoverInfo","content":"HoverInfo \n \nHoverInfo.Convert \nConvert \nHoverInfo.toString \ntoString \nHoverInfo.convert \nconvert \nHoverInfo.X \nX \nHoverInfo.XY \nXY \nHoverInfo.XYZ \nXYZ \nHoverInfo.XYZText \nXYZText \nHoverInfo.Y \nY \nHoverInfo.YZ \nYZ \nHoverInfo.YZText \nYZText \nHoverInfo.YZTextNames \nYZTextNames \nHoverInfo.Z \nZ \nHoverInfo.ZText \nZText \nHoverInfo.ZTextName \nZTextName \nHoverInfo.Text \nText \nHoverInfo.TextName \nTextName \nHoverInfo.Name \nName \nHoverInfo.All \nAll"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-hoverinfo.html#Convert","title":"HoverInfo.Convert","content":"HoverInfo.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-hoverinfo.html#toString","title":"HoverInfo.toString","content":"HoverInfo.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-hoverinfo.html#convert","title":"HoverInfo.convert","content":"HoverInfo.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-hoverinfo.html#X","title":"HoverInfo.X","content":"HoverInfo.X \nX \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-hoverinfo.html#XY","title":"HoverInfo.XY","content":"HoverInfo.XY \nXY \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-hoverinfo.html#XYZ","title":"HoverInfo.XYZ","content":"HoverInfo.XYZ \nXYZ \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-hoverinfo.html#XYZText","title":"HoverInfo.XYZText","content":"HoverInfo.XYZText \nXYZText \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-hoverinfo.html#Y","title":"HoverInfo.Y","content":"HoverInfo.Y \nY \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-hoverinfo.html#YZ","title":"HoverInfo.YZ","content":"HoverInfo.YZ \nYZ \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-hoverinfo.html#YZText","title":"HoverInfo.YZText","content":"HoverInfo.YZText \nYZText \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-hoverinfo.html#YZTextNames","title":"HoverInfo.YZTextNames","content":"HoverInfo.YZTextNames \nYZTextNames \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-hoverinfo.html#Z","title":"HoverInfo.Z","content":"HoverInfo.Z \nZ \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-hoverinfo.html#ZText","title":"HoverInfo.ZText","content":"HoverInfo.ZText \nZText \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-hoverinfo.html#ZTextName","title":"HoverInfo.ZTextName","content":"HoverInfo.ZTextName \nZTextName \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-hoverinfo.html#Text","title":"HoverInfo.Text","content":"HoverInfo.Text \nText \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-hoverinfo.html#TextName","title":"HoverInfo.TextName","content":"HoverInfo.TextName \nTextName \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-hoverinfo.html#Name","title":"HoverInfo.Name","content":"HoverInfo.Name \nName \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-hoverinfo.html#All","title":"HoverInfo.All","content":"HoverInfo.All \nAll \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-hovermode.html","title":"HoverMode","content":"HoverMode \n\n Sets this figure\u0027s behavior when a user hovers over it. When set to \u0027x\u0027, all data sharing the same \u0027x\u0027 coordinate will be shown on screen\n with corresponding trace labels. When set to \u0027y\u0027 all data sharing the same \u0027y\u0027 coordinates will be shown on the screen with corresponding\n trace labels. When set to \u0027closest\u0027, information about the data point closest to where the viewer is hovering will appear.\n \nHoverMode.Convert \nConvert \nHoverMode.toString \ntoString \nHoverMode.convert \nconvert \nHoverMode.Closest \nClosest \nHoverMode.X \nX \nHoverMode.Y \nY \nHoverMode.False \nFalse"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-hovermode.html#Convert","title":"HoverMode.Convert","content":"HoverMode.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-hovermode.html#toString","title":"HoverMode.toString","content":"HoverMode.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-hovermode.html#convert","title":"HoverMode.convert","content":"HoverMode.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-hovermode.html#Closest","title":"HoverMode.Closest","content":"HoverMode.Closest \nClosest \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-hovermode.html#X","title":"HoverMode.X","content":"HoverMode.X \nX \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-hovermode.html#Y","title":"HoverMode.Y","content":"HoverMode.Y \nY \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-hovermode.html#False","title":"HoverMode.False","content":"HoverMode.False \nFalse \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-hoveron.html","title":"HoverOn","content":"HoverOn \n \nHoverOn.Convert \nConvert \nHoverOn.toString \ntoString \nHoverOn.convert \nconvert \nHoverOn.Points \nPoints \nHoverOn.Fills \nFills \nHoverOn.PointsFills \nPointsFills"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-hoveron.html#Convert","title":"HoverOn.Convert","content":"HoverOn.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-hoveron.html#toString","title":"HoverOn.toString","content":"HoverOn.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-hoveron.html#convert","title":"HoverOn.convert","content":"HoverOn.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-hoveron.html#Points","title":"HoverOn.Points","content":"HoverOn.Points \nPoints \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-hoveron.html#Fills","title":"HoverOn.Fills","content":"HoverOn.Fills \nFills \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-hoveron.html#PointsFills","title":"HoverOn.PointsFills","content":"HoverOn.PointsFills \nPointsFills \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-iciclecount.html","title":"IcicleCount","content":"IcicleCount \n \nIcicleCount.Convert \nConvert \nIcicleCount.toString \ntoString \nIcicleCount.convert \nconvert \nIcicleCount.Branches \nBranches \nIcicleCount.Leaves \nLeaves \nIcicleCount.BranchesLeaves \nBranchesLeaves"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-iciclecount.html#Convert","title":"IcicleCount.Convert","content":"IcicleCount.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-iciclecount.html#toString","title":"IcicleCount.toString","content":"IcicleCount.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-iciclecount.html#convert","title":"IcicleCount.convert","content":"IcicleCount.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-iciclecount.html#Branches","title":"IcicleCount.Branches","content":"IcicleCount.Branches \nBranches \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-iciclecount.html#Leaves","title":"IcicleCount.Leaves","content":"IcicleCount.Leaves \nLeaves \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-iciclecount.html#BranchesLeaves","title":"IcicleCount.BranchesLeaves","content":"IcicleCount.BranchesLeaves \nBranchesLeaves \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-imageformat.html","title":"ImageFormat","content":"ImageFormat \n \nImageFormat.Convert \nConvert \nImageFormat.toString \ntoString \nImageFormat.convert \nconvert \nImageFormat.SVG \nSVG \nImageFormat.PNG \nPNG \nImageFormat.JPEG \nJPEG"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-imageformat.html#Convert","title":"ImageFormat.Convert","content":"ImageFormat.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-imageformat.html#toString","title":"ImageFormat.toString","content":"ImageFormat.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-imageformat.html#convert","title":"ImageFormat.convert","content":"ImageFormat.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-imageformat.html#SVG","title":"ImageFormat.SVG","content":"ImageFormat.SVG \nSVG \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-imageformat.html#PNG","title":"ImageFormat.PNG","content":"ImageFormat.PNG \nPNG \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-imageformat.html#JPEG","title":"ImageFormat.JPEG","content":"ImageFormat.JPEG \nJPEG \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-indicatoralignment.html","title":"IndicatorAlignment","content":"IndicatorAlignment \n \nIndicatorAlignment.Convert \nConvert \nIndicatorAlignment.toString \ntoString \nIndicatorAlignment.convert \nconvert \nIndicatorAlignment.Left \nLeft \nIndicatorAlignment.Center \nCenter \nIndicatorAlignment.Right \nRight"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-indicatoralignment.html#Convert","title":"IndicatorAlignment.Convert","content":"IndicatorAlignment.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-indicatoralignment.html#toString","title":"IndicatorAlignment.toString","content":"IndicatorAlignment.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-indicatoralignment.html#convert","title":"IndicatorAlignment.convert","content":"IndicatorAlignment.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-indicatoralignment.html#Left","title":"IndicatorAlignment.Left","content":"IndicatorAlignment.Left \nLeft \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-indicatoralignment.html#Center","title":"IndicatorAlignment.Center","content":"IndicatorAlignment.Center \nCenter \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-indicatoralignment.html#Right","title":"IndicatorAlignment.Right","content":"IndicatorAlignment.Right \nRight \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-indicatordeltaposition.html","title":"IndicatorDeltaPosition","content":"IndicatorDeltaPosition \n \nIndicatorDeltaPosition.Convert \nConvert \nIndicatorDeltaPosition.toString \ntoString \nIndicatorDeltaPosition.convert \nconvert \nIndicatorDeltaPosition.Top \nTop \nIndicatorDeltaPosition.Bottom \nBottom \nIndicatorDeltaPosition.Left \nLeft \nIndicatorDeltaPosition.Right \nRight"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-indicatordeltaposition.html#Convert","title":"IndicatorDeltaPosition.Convert","content":"IndicatorDeltaPosition.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-indicatordeltaposition.html#toString","title":"IndicatorDeltaPosition.toString","content":"IndicatorDeltaPosition.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-indicatordeltaposition.html#convert","title":"IndicatorDeltaPosition.convert","content":"IndicatorDeltaPosition.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-indicatordeltaposition.html#Top","title":"IndicatorDeltaPosition.Top","content":"IndicatorDeltaPosition.Top \nTop \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-indicatordeltaposition.html#Bottom","title":"IndicatorDeltaPosition.Bottom","content":"IndicatorDeltaPosition.Bottom \nBottom \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-indicatordeltaposition.html#Left","title":"IndicatorDeltaPosition.Left","content":"IndicatorDeltaPosition.Left \nLeft \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-indicatordeltaposition.html#Right","title":"IndicatorDeltaPosition.Right","content":"IndicatorDeltaPosition.Right \nRight \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-indicatorgaugeshape.html","title":"IndicatorGaugeShape","content":"IndicatorGaugeShape \n \nIndicatorGaugeShape.Convert \nConvert \nIndicatorGaugeShape.toString \ntoString \nIndicatorGaugeShape.convert \nconvert \nIndicatorGaugeShape.Angular \nAngular \nIndicatorGaugeShape.Bullet \nBullet"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-indicatorgaugeshape.html#Convert","title":"IndicatorGaugeShape.Convert","content":"IndicatorGaugeShape.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-indicatorgaugeshape.html#toString","title":"IndicatorGaugeShape.toString","content":"IndicatorGaugeShape.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-indicatorgaugeshape.html#convert","title":"IndicatorGaugeShape.convert","content":"IndicatorGaugeShape.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-indicatorgaugeshape.html#Angular","title":"IndicatorGaugeShape.Angular","content":"IndicatorGaugeShape.Angular \nAngular \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-indicatorgaugeshape.html#Bullet","title":"IndicatorGaugeShape.Bullet","content":"IndicatorGaugeShape.Bullet \nBullet \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-indicatormode.html","title":"IndicatorMode","content":"IndicatorMode \n \nIndicatorMode.Convert \nConvert \nIndicatorMode.toString \ntoString \nIndicatorMode.convert \nconvert \nIndicatorMode.Number \nNumber \nIndicatorMode.Delta \nDelta \nIndicatorMode.Gauge \nGauge \nIndicatorMode.NumberDelta \nNumberDelta \nIndicatorMode.NumberGauge \nNumberGauge \nIndicatorMode.DeltaGauge \nDeltaGauge \nIndicatorMode.NumberDeltaGauge \nNumberDeltaGauge"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-indicatormode.html#Convert","title":"IndicatorMode.Convert","content":"IndicatorMode.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-indicatormode.html#toString","title":"IndicatorMode.toString","content":"IndicatorMode.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-indicatormode.html#convert","title":"IndicatorMode.convert","content":"IndicatorMode.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-indicatormode.html#Number","title":"IndicatorMode.Number","content":"IndicatorMode.Number \nNumber \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-indicatormode.html#Delta","title":"IndicatorMode.Delta","content":"IndicatorMode.Delta \nDelta \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-indicatormode.html#Gauge","title":"IndicatorMode.Gauge","content":"IndicatorMode.Gauge \nGauge \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-indicatormode.html#NumberDelta","title":"IndicatorMode.NumberDelta","content":"IndicatorMode.NumberDelta \nNumberDelta \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-indicatormode.html#NumberGauge","title":"IndicatorMode.NumberGauge","content":"IndicatorMode.NumberGauge \nNumberGauge \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-indicatormode.html#DeltaGauge","title":"IndicatorMode.DeltaGauge","content":"IndicatorMode.DeltaGauge \nDeltaGauge \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-indicatormode.html#NumberDeltaGauge","title":"IndicatorMode.NumberDeltaGauge","content":"IndicatorMode.NumberDeltaGauge \nNumberDeltaGauge \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-insidetextanchor.html","title":"InsideTextAnchor","content":"InsideTextAnchor \n \nInsideTextAnchor.Convert \nConvert \nInsideTextAnchor.toString \ntoString \nInsideTextAnchor.convert \nconvert \nInsideTextAnchor.End \nEnd \nInsideTextAnchor.Middle \nMiddle \nInsideTextAnchor.Start \nStart"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-insidetextanchor.html#Convert","title":"InsideTextAnchor.Convert","content":"InsideTextAnchor.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-insidetextanchor.html#toString","title":"InsideTextAnchor.toString","content":"InsideTextAnchor.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-insidetextanchor.html#convert","title":"InsideTextAnchor.convert","content":"InsideTextAnchor.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-insidetextanchor.html#End","title":"InsideTextAnchor.End","content":"InsideTextAnchor.End \nEnd \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-insidetextanchor.html#Middle","title":"InsideTextAnchor.Middle","content":"InsideTextAnchor.Middle \nMiddle \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-insidetextanchor.html#Start","title":"InsideTextAnchor.Start","content":"InsideTextAnchor.Start \nStart \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-insidetextorientation.html","title":"InsideTextOrientation","content":"InsideTextOrientation \n \nInsideTextOrientation.Convert \nConvert \nInsideTextOrientation.toString \ntoString \nInsideTextOrientation.convert \nconvert \nInsideTextOrientation.Horizontal \nHorizontal \nInsideTextOrientation.Radial \nRadial \nInsideTextOrientation.Tangential \nTangential \nInsideTextOrientation.Auto \nAuto"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-insidetextorientation.html#Convert","title":"InsideTextOrientation.Convert","content":"InsideTextOrientation.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-insidetextorientation.html#toString","title":"InsideTextOrientation.toString","content":"InsideTextOrientation.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-insidetextorientation.html#convert","title":"InsideTextOrientation.convert","content":"InsideTextOrientation.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-insidetextorientation.html#Horizontal","title":"InsideTextOrientation.Horizontal","content":"InsideTextOrientation.Horizontal \nHorizontal \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-insidetextorientation.html#Radial","title":"InsideTextOrientation.Radial","content":"InsideTextOrientation.Radial \nRadial \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-insidetextorientation.html#Tangential","title":"InsideTextOrientation.Tangential","content":"InsideTextOrientation.Tangential \nTangential \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-insidetextorientation.html#Auto","title":"InsideTextOrientation.Auto","content":"InsideTextOrientation.Auto \nAuto \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-intensitymode.html","title":"IntensityMode","content":"IntensityMode \n \nIntensityMode.Convert \nConvert \nIntensityMode.toString \ntoString \nIntensityMode.convert \nconvert \nIntensityMode.Vertex \nVertex \nIntensityMode.Cell \nCell"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-intensitymode.html#Convert","title":"IntensityMode.Convert","content":"IntensityMode.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-intensitymode.html#toString","title":"IntensityMode.toString","content":"IntensityMode.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-intensitymode.html#convert","title":"IntensityMode.convert","content":"IntensityMode.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-intensitymode.html#Vertex","title":"IntensityMode.Vertex","content":"IntensityMode.Vertex \nVertex \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-intensitymode.html#Cell","title":"IntensityMode.Cell","content":"IntensityMode.Cell \nCell \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-jitterpoints.html","title":"JitterPoints","content":"JitterPoints \n \nJitterPoints.toString \ntoString \nJitterPoints.convert \nconvert"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-jitterpoints.html#toString","title":"JitterPoints.toString","content":"JitterPoints.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-jitterpoints.html#convert","title":"JitterPoints.convert","content":"JitterPoints.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layer.html","title":"Layer","content":"Layer \n\n Specifies whether shapes are drawn below or above traces. Default is Above\n \nLayer.Convert \nConvert \nLayer.toString \ntoString \nLayer.convert \nconvert \nLayer.Below \nBelow \nLayer.Above \nAbove \nLayer.AboveTraces \nAboveTraces \nLayer.BelowTraces \nBelowTraces"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layer.html#Convert","title":"Layer.Convert","content":"Layer.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layer.html#toString","title":"Layer.toString","content":"Layer.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layer.html#convert","title":"Layer.convert","content":"Layer.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layer.html#Below","title":"Layer.Below","content":"Layer.Below \nBelow \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layer.html#Above","title":"Layer.Above","content":"Layer.Above \nAbove \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layer.html#AboveTraces","title":"Layer.AboveTraces","content":"Layer.AboveTraces \nAboveTraces \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layer.html#BelowTraces","title":"Layer.BelowTraces","content":"Layer.BelowTraces \nBelowTraces \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layoutgridpattern.html","title":"LayoutGridPattern","content":"LayoutGridPattern \n\n Pattern to use for autogenerating Axis Ids when not specifically specifying subplot axes IDs in LayoutGrids\n \nLayoutGridPattern.Convert \nConvert \nLayoutGridPattern.toString \ntoString \nLayoutGridPattern.convert \nconvert \nLayoutGridPattern.Independent \nIndependent \nLayoutGridPattern.Coupled \nCoupled"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layoutgridpattern.html#Convert","title":"LayoutGridPattern.Convert","content":"LayoutGridPattern.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layoutgridpattern.html#toString","title":"LayoutGridPattern.toString","content":"LayoutGridPattern.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layoutgridpattern.html#convert","title":"LayoutGridPattern.convert","content":"LayoutGridPattern.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layoutgridpattern.html#Independent","title":"LayoutGridPattern.Independent","content":"LayoutGridPattern.Independent \nIndependent \n\n Uses a new xy pair for each cell, left-to-right across each row then iterating rows according to \u0060roworder\u0060\n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layoutgridpattern.html#Coupled","title":"LayoutGridPattern.Coupled","content":"LayoutGridPattern.Coupled \nCoupled \n\n Gives one x axis per column and one y axis per row\n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layoutgridroworder.html","title":"LayoutGridRowOrder","content":"LayoutGridRowOrder \n\n Determines wether the rows of a LayoutGrid are enumerated from the top or the bottom.\n \nLayoutGridRowOrder.Convert \nConvert \nLayoutGridRowOrder.toString \ntoString \nLayoutGridRowOrder.convert \nconvert \nLayoutGridRowOrder.TopToBottom \nTopToBottom \nLayoutGridRowOrder.BottomToTop \nBottomToTop"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layoutgridroworder.html#Convert","title":"LayoutGridRowOrder.Convert","content":"LayoutGridRowOrder.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layoutgridroworder.html#toString","title":"LayoutGridRowOrder.toString","content":"LayoutGridRowOrder.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layoutgridroworder.html#convert","title":"LayoutGridRowOrder.convert","content":"LayoutGridRowOrder.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layoutgridroworder.html#TopToBottom","title":"LayoutGridRowOrder.TopToBottom","content":"LayoutGridRowOrder.TopToBottom \nTopToBottom \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layoutgridroworder.html#BottomToTop","title":"LayoutGridRowOrder.BottomToTop","content":"LayoutGridRowOrder.BottomToTop \nBottomToTop \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layoutgridxside.html","title":"LayoutGridXSide","content":"LayoutGridXSide \n\n Sets where the x axis labels and titles go on a layout grid.\n \nLayoutGridXSide.Convert \nConvert \nLayoutGridXSide.toString \ntoString \nLayoutGridXSide.convert \nconvert \nLayoutGridXSide.Bottom \nBottom \nLayoutGridXSide.BottomPlot \nBottomPlot \nLayoutGridXSide.Top \nTop \nLayoutGridXSide.TopPlot \nTopPlot"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layoutgridxside.html#Convert","title":"LayoutGridXSide.Convert","content":"LayoutGridXSide.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layoutgridxside.html#toString","title":"LayoutGridXSide.toString","content":"LayoutGridXSide.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layoutgridxside.html#convert","title":"LayoutGridXSide.convert","content":"LayoutGridXSide.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layoutgridxside.html#Bottom","title":"LayoutGridXSide.Bottom","content":"LayoutGridXSide.Bottom \nBottom \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layoutgridxside.html#BottomPlot","title":"LayoutGridXSide.BottomPlot","content":"LayoutGridXSide.BottomPlot \nBottomPlot \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layoutgridxside.html#Top","title":"LayoutGridXSide.Top","content":"LayoutGridXSide.Top \nTop \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layoutgridxside.html#TopPlot","title":"LayoutGridXSide.TopPlot","content":"LayoutGridXSide.TopPlot \nTopPlot \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layoutgridyside.html","title":"LayoutGridYSide","content":"LayoutGridYSide \n\n Sets where the y axis labels and titles go on a layout grid.\n \nLayoutGridYSide.Convert \nConvert \nLayoutGridYSide.toString \ntoString \nLayoutGridYSide.convert \nconvert \nLayoutGridYSide.Left \nLeft \nLayoutGridYSide.LeftPlot \nLeftPlot \nLayoutGridYSide.Right \nRight \nLayoutGridYSide.RightPlot \nRightPlot"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layoutgridyside.html#Convert","title":"LayoutGridYSide.Convert","content":"LayoutGridYSide.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layoutgridyside.html#toString","title":"LayoutGridYSide.toString","content":"LayoutGridYSide.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layoutgridyside.html#convert","title":"LayoutGridYSide.convert","content":"LayoutGridYSide.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layoutgridyside.html#Left","title":"LayoutGridYSide.Left","content":"LayoutGridYSide.Left \nLeft \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layoutgridyside.html#LeftPlot","title":"LayoutGridYSide.LeftPlot","content":"LayoutGridYSide.LeftPlot \nLeftPlot \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layoutgridyside.html#Right","title":"LayoutGridYSide.Right","content":"LayoutGridYSide.Right \nRight \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layoutgridyside.html#RightPlot","title":"LayoutGridYSide.RightPlot","content":"LayoutGridYSide.RightPlot \nRightPlot \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layoutimagesizing.html","title":"LayoutImageSizing","content":"LayoutImageSizing \n\n Specifies whether shapes are drawn below or above traces. Default is Above\n \nLayoutImageSizing.Convert \nConvert \nLayoutImageSizing.toString \ntoString \nLayoutImageSizing.convert \nconvert \nLayoutImageSizing.Fill \nFill \nLayoutImageSizing.Contain \nContain \nLayoutImageSizing.Stretch \nStretch"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layoutimagesizing.html#Convert","title":"LayoutImageSizing.Convert","content":"LayoutImageSizing.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layoutimagesizing.html#toString","title":"LayoutImageSizing.toString","content":"LayoutImageSizing.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layoutimagesizing.html#convert","title":"LayoutImageSizing.convert","content":"LayoutImageSizing.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layoutimagesizing.html#Fill","title":"LayoutImageSizing.Fill","content":"LayoutImageSizing.Fill \nFill \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layoutimagesizing.html#Contain","title":"LayoutImageSizing.Contain","content":"LayoutImageSizing.Contain \nContain \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layoutimagesizing.html#Stretch","title":"LayoutImageSizing.Stretch","content":"LayoutImageSizing.Stretch \nStretch \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-linearaxisid.html","title":"LinearAxisId","content":"LinearAxisId \n \nLinearAxisId.Convert \nConvert \nLinearAxisId.toString \ntoString \nLinearAxisId.convert \nconvert \nLinearAxisId.X \nX \nLinearAxisId.Y \nY"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-linearaxisid.html#Convert","title":"LinearAxisId.Convert","content":"LinearAxisId.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-linearaxisid.html#toString","title":"LinearAxisId.toString","content":"LinearAxisId.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-linearaxisid.html#convert","title":"LinearAxisId.convert","content":"LinearAxisId.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-linearaxisid.html#X","title":"LinearAxisId.X","content":"LinearAxisId.X \nX \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-linearaxisid.html#Y","title":"LinearAxisId.Y","content":"LinearAxisId.Y \nY \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-locationformat.html","title":"LocationFormat","content":"LocationFormat \n\n Determines the set of locations used to match entries in \u0060locations\u0060 to regions on the map. Default: ISO-3\n \nLocationFormat.Convert \nConvert \nLocationFormat.toString \ntoString \nLocationFormat.convert \nconvert \nLocationFormat.CountryNames \nCountryNames \nLocationFormat.ISO_3 \nISO_3 \nLocationFormat.USA_states \nUSA_states \nLocationFormat.GeoJson_Id \nGeoJson_Id"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-locationformat.html#Convert","title":"LocationFormat.Convert","content":"LocationFormat.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-locationformat.html#toString","title":"LocationFormat.toString","content":"LocationFormat.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-locationformat.html#convert","title":"LocationFormat.convert","content":"LocationFormat.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-locationformat.html#CountryNames","title":"LocationFormat.CountryNames","content":"LocationFormat.CountryNames \nCountryNames \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-locationformat.html#ISO_3","title":"LocationFormat.ISO_3","content":"LocationFormat.ISO_3 \nISO_3 \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-locationformat.html#USA_states","title":"LocationFormat.USA_states","content":"LocationFormat.USA_states \nUSA_states \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-locationformat.html#GeoJson_Id","title":"LocationFormat.GeoJson_Id","content":"LocationFormat.GeoJson_Id \nGeoJson_Id \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mapboxlayersourcetype.html","title":"MapboxLayerSourceType","content":"MapboxLayerSourceType \n \nMapboxLayerSourceType.Convert \nConvert \nMapboxLayerSourceType.toString \ntoString \nMapboxLayerSourceType.convert \nconvert \nMapboxLayerSourceType.GeoJson \nGeoJson \nMapboxLayerSourceType.Vector \nVector \nMapboxLayerSourceType.Raster \nRaster \nMapboxLayerSourceType.Image \nImage"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mapboxlayersourcetype.html#Convert","title":"MapboxLayerSourceType.Convert","content":"MapboxLayerSourceType.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mapboxlayersourcetype.html#toString","title":"MapboxLayerSourceType.toString","content":"MapboxLayerSourceType.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mapboxlayersourcetype.html#convert","title":"MapboxLayerSourceType.convert","content":"MapboxLayerSourceType.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mapboxlayersourcetype.html#GeoJson","title":"MapboxLayerSourceType.GeoJson","content":"MapboxLayerSourceType.GeoJson \nGeoJson \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mapboxlayersourcetype.html#Vector","title":"MapboxLayerSourceType.Vector","content":"MapboxLayerSourceType.Vector \nVector \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mapboxlayersourcetype.html#Raster","title":"MapboxLayerSourceType.Raster","content":"MapboxLayerSourceType.Raster \nRaster \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mapboxlayersourcetype.html#Image","title":"MapboxLayerSourceType.Image","content":"MapboxLayerSourceType.Image \nImage \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mapboxlayersymbolplacement.html","title":"MapboxLayerSymbolPlacement","content":"MapboxLayerSymbolPlacement \n \nMapboxLayerSymbolPlacement.Convert \nConvert \nMapboxLayerSymbolPlacement.toString \ntoString \nMapboxLayerSymbolPlacement.convert \nconvert \nMapboxLayerSymbolPlacement.Point \nPoint \nMapboxLayerSymbolPlacement.Line \nLine \nMapboxLayerSymbolPlacement.LineCenter \nLineCenter"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mapboxlayersymbolplacement.html#Convert","title":"MapboxLayerSymbolPlacement.Convert","content":"MapboxLayerSymbolPlacement.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mapboxlayersymbolplacement.html#toString","title":"MapboxLayerSymbolPlacement.toString","content":"MapboxLayerSymbolPlacement.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mapboxlayersymbolplacement.html#convert","title":"MapboxLayerSymbolPlacement.convert","content":"MapboxLayerSymbolPlacement.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mapboxlayersymbolplacement.html#Point","title":"MapboxLayerSymbolPlacement.Point","content":"MapboxLayerSymbolPlacement.Point \nPoint \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mapboxlayersymbolplacement.html#Line","title":"MapboxLayerSymbolPlacement.Line","content":"MapboxLayerSymbolPlacement.Line \nLine \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mapboxlayersymbolplacement.html#LineCenter","title":"MapboxLayerSymbolPlacement.LineCenter","content":"MapboxLayerSymbolPlacement.LineCenter \nLineCenter \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mapboxlayertype.html","title":"MapboxLayerType","content":"MapboxLayerType \n \nMapboxLayerType.Convert \nConvert \nMapboxLayerType.toString \ntoString \nMapboxLayerType.convert \nconvert \nMapboxLayerType.Circle \nCircle \nMapboxLayerType.Line \nLine \nMapboxLayerType.Fill \nFill \nMapboxLayerType.Symbol \nSymbol \nMapboxLayerType.Raster \nRaster"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mapboxlayertype.html#Convert","title":"MapboxLayerType.Convert","content":"MapboxLayerType.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mapboxlayertype.html#toString","title":"MapboxLayerType.toString","content":"MapboxLayerType.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mapboxlayertype.html#convert","title":"MapboxLayerType.convert","content":"MapboxLayerType.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mapboxlayertype.html#Circle","title":"MapboxLayerType.Circle","content":"MapboxLayerType.Circle \nCircle \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mapboxlayertype.html#Line","title":"MapboxLayerType.Line","content":"MapboxLayerType.Line \nLine \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mapboxlayertype.html#Fill","title":"MapboxLayerType.Fill","content":"MapboxLayerType.Fill \nFill \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mapboxlayertype.html#Symbol","title":"MapboxLayerType.Symbol","content":"MapboxLayerType.Symbol \nSymbol \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mapboxlayertype.html#Raster","title":"MapboxLayerType.Raster","content":"MapboxLayerType.Raster \nRaster \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mapboxstyle.html","title":"MapboxStyle","content":"MapboxStyle \n\n Defines the map layers that are rendered by default below the trace layers defined in \u0060data\u0060, which are themselves by default rendered below the layers defined in \u0060layout.mapbox.layers\u0060. \n These layers can be defined either explicitly as a Mapbox Style object which can contain multiple layer definitions that load data from any public or private Tile Map Service (TMS or XYZ) or Web Map Service (WMS) or implicitly by using one of the built-in style objects which use WMSes which do not require any access tokens, \n or by using a default Mapbox style or custom Mapbox style URL, both of which require a Mapbox access token Note that Mapbox access token can be set in the \u0060accesstoken\u0060 attribute or in the \u0060mapboxAccessToken\u0060 config option. \n Mapbox Style objects are of the form described in the Mapbox GL JS documentation available at https://docs.mapbox.com/mapbox-gl-js/style-spec The built-in plotly.js styles objects are: open-street-map, white-bg, carto-positron, carto-darkmatter, stamen-terrain, stamen-toner, stamen-watercolor \n The built-in Mapbox styles are: basic, streets, outdoors, light, dark, satellite, satellite-streets Mapbox style URLs are of the form: mapbox://mapbox.mapbox-\u003Cname\u003E-\u003Cversion\u003E\n \nMapboxStyle.Convert \nConvert \nMapboxStyle.toString \ntoString \nMapboxStyle.convert \nconvert \nMapboxStyle.OpenStreetMap \nOpenStreetMap \nMapboxStyle.WhiteBG \nWhiteBG \nMapboxStyle.CartoPositron \nCartoPositron \nMapboxStyle.CartoDarkmatter \nCartoDarkmatter \nMapboxStyle.StamenTerrain \nStamenTerrain \nMapboxStyle.StamenToner \nStamenToner \nMapboxStyle.StamenWatercolor \nStamenWatercolor \nMapboxStyle.MapboxBasic \nMapboxBasic \nMapboxStyle.MapboxStreets \nMapboxStreets \nMapboxStyle.MapboxOutdoors \nMapboxOutdoors \nMapboxStyle.MapboxLight \nMapboxLight \nMapboxStyle.MapboxDark \nMapboxDark \nMapboxStyle.MapboxSatellite \nMapboxSatellite \nMapboxStyle.MapboxSatelliteStreets \nMapboxSatelliteStreets \nMapboxStyle.Custom \nCustom"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mapboxstyle.html#Convert","title":"MapboxStyle.Convert","content":"MapboxStyle.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mapboxstyle.html#toString","title":"MapboxStyle.toString","content":"MapboxStyle.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mapboxstyle.html#convert","title":"MapboxStyle.convert","content":"MapboxStyle.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mapboxstyle.html#OpenStreetMap","title":"MapboxStyle.OpenStreetMap","content":"MapboxStyle.OpenStreetMap \nOpenStreetMap \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mapboxstyle.html#WhiteBG","title":"MapboxStyle.WhiteBG","content":"MapboxStyle.WhiteBG \nWhiteBG \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mapboxstyle.html#CartoPositron","title":"MapboxStyle.CartoPositron","content":"MapboxStyle.CartoPositron \nCartoPositron \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mapboxstyle.html#CartoDarkmatter","title":"MapboxStyle.CartoDarkmatter","content":"MapboxStyle.CartoDarkmatter \nCartoDarkmatter \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mapboxstyle.html#StamenTerrain","title":"MapboxStyle.StamenTerrain","content":"MapboxStyle.StamenTerrain \nStamenTerrain \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mapboxstyle.html#StamenToner","title":"MapboxStyle.StamenToner","content":"MapboxStyle.StamenToner \nStamenToner \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mapboxstyle.html#StamenWatercolor","title":"MapboxStyle.StamenWatercolor","content":"MapboxStyle.StamenWatercolor \nStamenWatercolor \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mapboxstyle.html#MapboxBasic","title":"MapboxStyle.MapboxBasic","content":"MapboxStyle.MapboxBasic \nMapboxBasic \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mapboxstyle.html#MapboxStreets","title":"MapboxStyle.MapboxStreets","content":"MapboxStyle.MapboxStreets \nMapboxStreets \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mapboxstyle.html#MapboxOutdoors","title":"MapboxStyle.MapboxOutdoors","content":"MapboxStyle.MapboxOutdoors \nMapboxOutdoors \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mapboxstyle.html#MapboxLight","title":"MapboxStyle.MapboxLight","content":"MapboxStyle.MapboxLight \nMapboxLight \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mapboxstyle.html#MapboxDark","title":"MapboxStyle.MapboxDark","content":"MapboxStyle.MapboxDark \nMapboxDark \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mapboxstyle.html#MapboxSatellite","title":"MapboxStyle.MapboxSatellite","content":"MapboxStyle.MapboxSatellite \nMapboxSatellite \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mapboxstyle.html#MapboxSatelliteStreets","title":"MapboxStyle.MapboxSatelliteStreets","content":"MapboxStyle.MapboxSatelliteStreets \nMapboxSatelliteStreets \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mapboxstyle.html#Custom","title":"MapboxStyle.Custom","content":"MapboxStyle.Custom \nCustom \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersizemode.html","title":"MarkerSizeMode","content":"MarkerSizeMode \n \nMarkerSizeMode.Convert \nConvert \nMarkerSizeMode.toString \ntoString \nMarkerSizeMode.convert \nconvert \nMarkerSizeMode.Diameter \nDiameter \nMarkerSizeMode.Area \nArea"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersizemode.html#Convert","title":"MarkerSizeMode.Convert","content":"MarkerSizeMode.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersizemode.html#toString","title":"MarkerSizeMode.toString","content":"MarkerSizeMode.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersizemode.html#convert","title":"MarkerSizeMode.convert","content":"MarkerSizeMode.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersizemode.html#Diameter","title":"MarkerSizeMode.Diameter","content":"MarkerSizeMode.Diameter \nDiameter \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersizemode.html#Area","title":"MarkerSizeMode.Area","content":"MarkerSizeMode.Area \nArea \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html","title":"MarkerSymbol","content":"MarkerSymbol \n \nMarkerSymbol.Convert \nConvert \nMarkerSymbol.convert \nconvert \nMarkerSymbol.toInteger \ntoInteger \nMarkerSymbol.Modified \nModified \nMarkerSymbol.Circle \nCircle \nMarkerSymbol.Square \nSquare \nMarkerSymbol.Diamond \nDiamond \nMarkerSymbol.Cross \nCross \nMarkerSymbol.X \nX \nMarkerSymbol.TriangleUp \nTriangleUp \nMarkerSymbol.TriangleDown \nTriangleDown \nMarkerSymbol.TriangleLeft \nTriangleLeft \nMarkerSymbol.TriangleRight \nTriangleRight \nMarkerSymbol.TriangleNE \nTriangleNE \nMarkerSymbol.TriangleSE \nTriangleSE \nMarkerSymbol.TriangleSW \nTriangleSW \nMarkerSymbol.TriangleNW \nTriangleNW \nMarkerSymbol.Pentagon \nPentagon \nMarkerSymbol.Hexagon \nHexagon \nMarkerSymbol.Hexagon2 \nHexagon2 \nMarkerSymbol.Octagon \nOctagon \nMarkerSymbol.Star \nStar \nMarkerSymbol.Hexagram \nHexagram \nMarkerSymbol.StarTriangleUp \nStarTriangleUp \nMarkerSymbol.StarTriangleDown \nStarTriangleDown \nMarkerSymbol.StarSquare \nStarSquare \nMarkerSymbol.StarDiamond \nStarDiamond \nMarkerSymbol.DiamondTall \nDiamondTall \nMarkerSymbol.DiamondWide \nDiamondWide \nMarkerSymbol.Hourglass \nHourglass \nMarkerSymbol.Bowtie \nBowtie \nMarkerSymbol.CircleCross \nCircleCross \nMarkerSymbol.CircleX \nCircleX \nMarkerSymbol.SquareCross \nSquareCross \nMarkerSymbol.SquareX \nSquareX \nMarkerSymbol.DiamondCross \nDiamondCross \nMarkerSymbol.DiamondX \nDiamondX \nMarkerSymbol.CrossThin \nCrossThin \nMarkerSymbol.XThin \nXThin \nMarkerSymbol.Asterisk \nAsterisk \nMarkerSymbol.Hash \nHash \nMarkerSymbol.YUp \nYUp \nMarkerSymbol.YDown \nYDown \nMarkerSymbol.YLeft \nYLeft \nMarkerSymbol.YRight \nYRight \nMarkerSymbol.LineEW \nLineEW \nMarkerSymbol.LineNS \nLineNS \nMarkerSymbol.LineNE \nLineNE \nMarkerSymbol.LineNW \nLineNW \nMarkerSymbol.ArrowUp \nArrowUp \nMarkerSymbol.ArrowDown \nArrowDown \nMarkerSymbol.ArrowLeft \nArrowLeft \nMarkerSymbol.ArrowRight \nArrowRight \nMarkerSymbol.ArrowBarUp \nArrowBarUp \nMarkerSymbol.ArrowBarDown \nArrowBarDown \nMarkerSymbol.ArrowBarLeft \nArrowBarLeft \nMarkerSymbol.ArrowBarRight \nArrowBarRight"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#Convert","title":"MarkerSymbol.Convert","content":"MarkerSymbol.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#convert","title":"MarkerSymbol.convert","content":"MarkerSymbol.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#toInteger","title":"MarkerSymbol.toInteger","content":"MarkerSymbol.toInteger \ntoInteger \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#Modified","title":"MarkerSymbol.Modified","content":"MarkerSymbol.Modified \nModified \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#Circle","title":"MarkerSymbol.Circle","content":"MarkerSymbol.Circle \nCircle \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#Square","title":"MarkerSymbol.Square","content":"MarkerSymbol.Square \nSquare \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#Diamond","title":"MarkerSymbol.Diamond","content":"MarkerSymbol.Diamond \nDiamond \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#Cross","title":"MarkerSymbol.Cross","content":"MarkerSymbol.Cross \nCross \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#X","title":"MarkerSymbol.X","content":"MarkerSymbol.X \nX \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#TriangleUp","title":"MarkerSymbol.TriangleUp","content":"MarkerSymbol.TriangleUp \nTriangleUp \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#TriangleDown","title":"MarkerSymbol.TriangleDown","content":"MarkerSymbol.TriangleDown \nTriangleDown \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#TriangleLeft","title":"MarkerSymbol.TriangleLeft","content":"MarkerSymbol.TriangleLeft \nTriangleLeft \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#TriangleRight","title":"MarkerSymbol.TriangleRight","content":"MarkerSymbol.TriangleRight \nTriangleRight \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#TriangleNE","title":"MarkerSymbol.TriangleNE","content":"MarkerSymbol.TriangleNE \nTriangleNE \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#TriangleSE","title":"MarkerSymbol.TriangleSE","content":"MarkerSymbol.TriangleSE \nTriangleSE \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#TriangleSW","title":"MarkerSymbol.TriangleSW","content":"MarkerSymbol.TriangleSW \nTriangleSW \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#TriangleNW","title":"MarkerSymbol.TriangleNW","content":"MarkerSymbol.TriangleNW \nTriangleNW \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#Pentagon","title":"MarkerSymbol.Pentagon","content":"MarkerSymbol.Pentagon \nPentagon \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#Hexagon","title":"MarkerSymbol.Hexagon","content":"MarkerSymbol.Hexagon \nHexagon \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#Hexagon2","title":"MarkerSymbol.Hexagon2","content":"MarkerSymbol.Hexagon2 \nHexagon2 \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#Octagon","title":"MarkerSymbol.Octagon","content":"MarkerSymbol.Octagon \nOctagon \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#Star","title":"MarkerSymbol.Star","content":"MarkerSymbol.Star \nStar \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#Hexagram","title":"MarkerSymbol.Hexagram","content":"MarkerSymbol.Hexagram \nHexagram \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#StarTriangleUp","title":"MarkerSymbol.StarTriangleUp","content":"MarkerSymbol.StarTriangleUp \nStarTriangleUp \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#StarTriangleDown","title":"MarkerSymbol.StarTriangleDown","content":"MarkerSymbol.StarTriangleDown \nStarTriangleDown \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#StarSquare","title":"MarkerSymbol.StarSquare","content":"MarkerSymbol.StarSquare \nStarSquare \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#StarDiamond","title":"MarkerSymbol.StarDiamond","content":"MarkerSymbol.StarDiamond \nStarDiamond \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#DiamondTall","title":"MarkerSymbol.DiamondTall","content":"MarkerSymbol.DiamondTall \nDiamondTall \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#DiamondWide","title":"MarkerSymbol.DiamondWide","content":"MarkerSymbol.DiamondWide \nDiamondWide \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#Hourglass","title":"MarkerSymbol.Hourglass","content":"MarkerSymbol.Hourglass \nHourglass \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#Bowtie","title":"MarkerSymbol.Bowtie","content":"MarkerSymbol.Bowtie \nBowtie \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#CircleCross","title":"MarkerSymbol.CircleCross","content":"MarkerSymbol.CircleCross \nCircleCross \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#CircleX","title":"MarkerSymbol.CircleX","content":"MarkerSymbol.CircleX \nCircleX \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#SquareCross","title":"MarkerSymbol.SquareCross","content":"MarkerSymbol.SquareCross \nSquareCross \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#SquareX","title":"MarkerSymbol.SquareX","content":"MarkerSymbol.SquareX \nSquareX \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#DiamondCross","title":"MarkerSymbol.DiamondCross","content":"MarkerSymbol.DiamondCross \nDiamondCross \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#DiamondX","title":"MarkerSymbol.DiamondX","content":"MarkerSymbol.DiamondX \nDiamondX \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#CrossThin","title":"MarkerSymbol.CrossThin","content":"MarkerSymbol.CrossThin \nCrossThin \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#XThin","title":"MarkerSymbol.XThin","content":"MarkerSymbol.XThin \nXThin \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#Asterisk","title":"MarkerSymbol.Asterisk","content":"MarkerSymbol.Asterisk \nAsterisk \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#Hash","title":"MarkerSymbol.Hash","content":"MarkerSymbol.Hash \nHash \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#YUp","title":"MarkerSymbol.YUp","content":"MarkerSymbol.YUp \nYUp \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#YDown","title":"MarkerSymbol.YDown","content":"MarkerSymbol.YDown \nYDown \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#YLeft","title":"MarkerSymbol.YLeft","content":"MarkerSymbol.YLeft \nYLeft \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#YRight","title":"MarkerSymbol.YRight","content":"MarkerSymbol.YRight \nYRight \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#LineEW","title":"MarkerSymbol.LineEW","content":"MarkerSymbol.LineEW \nLineEW \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#LineNS","title":"MarkerSymbol.LineNS","content":"MarkerSymbol.LineNS \nLineNS \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#LineNE","title":"MarkerSymbol.LineNE","content":"MarkerSymbol.LineNE \nLineNE \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#LineNW","title":"MarkerSymbol.LineNW","content":"MarkerSymbol.LineNW \nLineNW \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#ArrowUp","title":"MarkerSymbol.ArrowUp","content":"MarkerSymbol.ArrowUp \nArrowUp \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#ArrowDown","title":"MarkerSymbol.ArrowDown","content":"MarkerSymbol.ArrowDown \nArrowDown \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#ArrowLeft","title":"MarkerSymbol.ArrowLeft","content":"MarkerSymbol.ArrowLeft \nArrowLeft \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#ArrowRight","title":"MarkerSymbol.ArrowRight","content":"MarkerSymbol.ArrowRight \nArrowRight \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#ArrowBarUp","title":"MarkerSymbol.ArrowBarUp","content":"MarkerSymbol.ArrowBarUp \nArrowBarUp \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#ArrowBarDown","title":"MarkerSymbol.ArrowBarDown","content":"MarkerSymbol.ArrowBarDown \nArrowBarDown \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#ArrowBarLeft","title":"MarkerSymbol.ArrowBarLeft","content":"MarkerSymbol.ArrowBarLeft \nArrowBarLeft \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#ArrowBarRight","title":"MarkerSymbol.ArrowBarRight","content":"MarkerSymbol.ArrowBarRight \nArrowBarRight \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mirror.html","title":"Mirror","content":"Mirror \n\n Determines if the axis lines or/and ticks are mirrored to the opposite side of the plotting area. If \u0022true\u0022, the axis lines are mirrored. \n If \u0022ticks\u0022, the axis lines and ticks are mirrored. If \u0022false\u0022, mirroring is disable. If \u0022all\u0022, axis lines are mirrored on all shared-axes subplots. If \u0022allticks\u0022, axis lines and ticks are mirrored on all shared-axes subplots.\n \nMirror.Convert \nConvert \nMirror.toString \ntoString \nMirror.convert \nconvert \nMirror.True \nTrue \nMirror.Ticks \nTicks \nMirror.False \nFalse \nMirror.All \nAll \nMirror.AllTicks \nAllTicks"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mirror.html#Convert","title":"Mirror.Convert","content":"Mirror.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mirror.html#toString","title":"Mirror.toString","content":"Mirror.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mirror.html#convert","title":"Mirror.convert","content":"Mirror.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mirror.html#True","title":"Mirror.True","content":"Mirror.True \nTrue \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mirror.html#Ticks","title":"Mirror.Ticks","content":"Mirror.Ticks \nTicks \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mirror.html#False","title":"Mirror.False","content":"Mirror.False \nFalse \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mirror.html#All","title":"Mirror.All","content":"Mirror.All \nAll \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mirror.html#AllTicks","title":"Mirror.AllTicks","content":"Mirror.AllTicks \nAllTicks \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mode.html","title":"Mode","content":"Mode \n \nMode.Convert \nConvert \nMode.toString \ntoString \nMode.convert \nconvert \nMode.None \nNone \nMode.Lines \nLines \nMode.Lines_Markers \nLines_Markers \nMode.Lines_Text \nLines_Text \nMode.Lines_Markers_Text \nLines_Markers_Text \nMode.Markers \nMarkers \nMode.Markers_Text \nMarkers_Text \nMode.Text \nText"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mode.html#Convert","title":"Mode.Convert","content":"Mode.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mode.html#toString","title":"Mode.toString","content":"Mode.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mode.html#convert","title":"Mode.convert","content":"Mode.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mode.html#None","title":"Mode.None","content":"Mode.None \nNone \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mode.html#Lines","title":"Mode.Lines","content":"Mode.Lines \nLines \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mode.html#Lines_Markers","title":"Mode.Lines_Markers","content":"Mode.Lines_Markers \nLines_Markers \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mode.html#Lines_Text","title":"Mode.Lines_Text","content":"Mode.Lines_Text \nLines_Text \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mode.html#Lines_Markers_Text","title":"Mode.Lines_Markers_Text","content":"Mode.Lines_Markers_Text \nLines_Markers_Text \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mode.html#Markers","title":"Mode.Markers","content":"Mode.Markers \nMarkers \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mode.html#Markers_Text","title":"Mode.Markers_Text","content":"Mode.Markers_Text \nMarkers_Text \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mode.html#Text","title":"Mode.Text","content":"Mode.Text \nText \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-modebarbutton.html","title":"ModeBarButton","content":"ModeBarButton \n \nModeBarButton.Convert \nConvert \nModeBarButton.toString \ntoString \nModeBarButton.convert \nconvert \nModeBarButton.ToImage \nToImage \nModeBarButton.SendDataToCloud \nSendDataToCloud \nModeBarButton.EditInChartStudio \nEditInChartStudio \nModeBarButton.Zoom2d \nZoom2d \nModeBarButton.Pan2d \nPan2d \nModeBarButton.Select2d \nSelect2d \nModeBarButton.Lasso2d \nLasso2d \nModeBarButton.DrawClosedPath \nDrawClosedPath \nModeBarButton.DrawOpenPath \nDrawOpenPath \nModeBarButton.DrawLine \nDrawLine \nModeBarButton.DrawRect \nDrawRect \nModeBarButton.DrawCircle \nDrawCircle \nModeBarButton.EraseShape \nEraseShape \nModeBarButton.ZoomIn2d \nZoomIn2d \nModeBarButton.ZoomOut2d \nZoomOut2d \nModeBarButton.AutoScale2d \nAutoScale2d \nModeBarButton.ResetScale2d \nResetScale2d \nModeBarButton.HoverClosestCartesian \nHoverClosestCartesian \nModeBarButton.HoverCompareCartesian \nHoverCompareCartesian \nModeBarButton.Zoom3d \nZoom3d \nModeBarButton.Pan3d \nPan3d \nModeBarButton.OrbitRotation \nOrbitRotation \nModeBarButton.TableRotation \nTableRotation \nModeBarButton.ResetCameraDefault3d \nResetCameraDefault3d \nModeBarButton.ResetCameraLastSave3d \nResetCameraLastSave3d \nModeBarButton.HoverClosest3d \nHoverClosest3d \nModeBarButton.ZoomInGeo \nZoomInGeo \nModeBarButton.ZoomOutGeo \nZoomOutGeo \nModeBarButton.ResetGeo \nResetGeo \nModeBarButton.HoverClosestGeo \nHoverClosestGeo \nModeBarButton.HoverClosestGl2d \nHoverClosestGl2d \nModeBarButton.HoverClosestPie \nHoverClosestPie \nModeBarButton.ResetSankeyGroup \nResetSankeyGroup \nModeBarButton.ToggleHover \nToggleHover \nModeBarButton.ResetViews \nResetViews \nModeBarButton.ToggleSpikelines \nToggleSpikelines \nModeBarButton.ResetViewMapbox \nResetViewMapbox \nModeBarButton.ZoomInMapbox \nZoomInMapbox \nModeBarButton.ZoomOutMapbox \nZoomOutMapbox"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-modebarbutton.html#Convert","title":"ModeBarButton.Convert","content":"ModeBarButton.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-modebarbutton.html#toString","title":"ModeBarButton.toString","content":"ModeBarButton.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-modebarbutton.html#convert","title":"ModeBarButton.convert","content":"ModeBarButton.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-modebarbutton.html#ToImage","title":"ModeBarButton.ToImage","content":"ModeBarButton.ToImage \nToImage \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-modebarbutton.html#SendDataToCloud","title":"ModeBarButton.SendDataToCloud","content":"ModeBarButton.SendDataToCloud \nSendDataToCloud \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-modebarbutton.html#EditInChartStudio","title":"ModeBarButton.EditInChartStudio","content":"ModeBarButton.EditInChartStudio \nEditInChartStudio \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-modebarbutton.html#Zoom2d","title":"ModeBarButton.Zoom2d","content":"ModeBarButton.Zoom2d \nZoom2d \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-modebarbutton.html#Pan2d","title":"ModeBarButton.Pan2d","content":"ModeBarButton.Pan2d \nPan2d \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-modebarbutton.html#Select2d","title":"ModeBarButton.Select2d","content":"ModeBarButton.Select2d \nSelect2d \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-modebarbutton.html#Lasso2d","title":"ModeBarButton.Lasso2d","content":"ModeBarButton.Lasso2d \nLasso2d \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-modebarbutton.html#DrawClosedPath","title":"ModeBarButton.DrawClosedPath","content":"ModeBarButton.DrawClosedPath \nDrawClosedPath \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-modebarbutton.html#DrawOpenPath","title":"ModeBarButton.DrawOpenPath","content":"ModeBarButton.DrawOpenPath \nDrawOpenPath \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-modebarbutton.html#DrawLine","title":"ModeBarButton.DrawLine","content":"ModeBarButton.DrawLine \nDrawLine \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-modebarbutton.html#DrawRect","title":"ModeBarButton.DrawRect","content":"ModeBarButton.DrawRect \nDrawRect \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-modebarbutton.html#DrawCircle","title":"ModeBarButton.DrawCircle","content":"ModeBarButton.DrawCircle \nDrawCircle \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-modebarbutton.html#EraseShape","title":"ModeBarButton.EraseShape","content":"ModeBarButton.EraseShape \nEraseShape \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-modebarbutton.html#ZoomIn2d","title":"ModeBarButton.ZoomIn2d","content":"ModeBarButton.ZoomIn2d \nZoomIn2d \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-modebarbutton.html#ZoomOut2d","title":"ModeBarButton.ZoomOut2d","content":"ModeBarButton.ZoomOut2d \nZoomOut2d \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-modebarbutton.html#AutoScale2d","title":"ModeBarButton.AutoScale2d","content":"ModeBarButton.AutoScale2d \nAutoScale2d \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-modebarbutton.html#ResetScale2d","title":"ModeBarButton.ResetScale2d","content":"ModeBarButton.ResetScale2d \nResetScale2d \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-modebarbutton.html#HoverClosestCartesian","title":"ModeBarButton.HoverClosestCartesian","content":"ModeBarButton.HoverClosestCartesian \nHoverClosestCartesian \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-modebarbutton.html#HoverCompareCartesian","title":"ModeBarButton.HoverCompareCartesian","content":"ModeBarButton.HoverCompareCartesian \nHoverCompareCartesian \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-modebarbutton.html#Zoom3d","title":"ModeBarButton.Zoom3d","content":"ModeBarButton.Zoom3d \nZoom3d \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-modebarbutton.html#Pan3d","title":"ModeBarButton.Pan3d","content":"ModeBarButton.Pan3d \nPan3d \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-modebarbutton.html#OrbitRotation","title":"ModeBarButton.OrbitRotation","content":"ModeBarButton.OrbitRotation \nOrbitRotation \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-modebarbutton.html#TableRotation","title":"ModeBarButton.TableRotation","content":"ModeBarButton.TableRotation \nTableRotation \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-modebarbutton.html#ResetCameraDefault3d","title":"ModeBarButton.ResetCameraDefault3d","content":"ModeBarButton.ResetCameraDefault3d \nResetCameraDefault3d \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-modebarbutton.html#ResetCameraLastSave3d","title":"ModeBarButton.ResetCameraLastSave3d","content":"ModeBarButton.ResetCameraLastSave3d \nResetCameraLastSave3d \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-modebarbutton.html#HoverClosest3d","title":"ModeBarButton.HoverClosest3d","content":"ModeBarButton.HoverClosest3d \nHoverClosest3d \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-modebarbutton.html#ZoomInGeo","title":"ModeBarButton.ZoomInGeo","content":"ModeBarButton.ZoomInGeo \nZoomInGeo \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-modebarbutton.html#ZoomOutGeo","title":"ModeBarButton.ZoomOutGeo","content":"ModeBarButton.ZoomOutGeo \nZoomOutGeo \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-modebarbutton.html#ResetGeo","title":"ModeBarButton.ResetGeo","content":"ModeBarButton.ResetGeo \nResetGeo \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-modebarbutton.html#HoverClosestGeo","title":"ModeBarButton.HoverClosestGeo","content":"ModeBarButton.HoverClosestGeo \nHoverClosestGeo \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-modebarbutton.html#HoverClosestGl2d","title":"ModeBarButton.HoverClosestGl2d","content":"ModeBarButton.HoverClosestGl2d \nHoverClosestGl2d \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-modebarbutton.html#HoverClosestPie","title":"ModeBarButton.HoverClosestPie","content":"ModeBarButton.HoverClosestPie \nHoverClosestPie \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-modebarbutton.html#ResetSankeyGroup","title":"ModeBarButton.ResetSankeyGroup","content":"ModeBarButton.ResetSankeyGroup \nResetSankeyGroup \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-modebarbutton.html#ToggleHover","title":"ModeBarButton.ToggleHover","content":"ModeBarButton.ToggleHover \nToggleHover \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-modebarbutton.html#ResetViews","title":"ModeBarButton.ResetViews","content":"ModeBarButton.ResetViews \nResetViews \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-modebarbutton.html#ToggleSpikelines","title":"ModeBarButton.ToggleSpikelines","content":"ModeBarButton.ToggleSpikelines \nToggleSpikelines \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-modebarbutton.html#ResetViewMapbox","title":"ModeBarButton.ResetViewMapbox","content":"ModeBarButton.ResetViewMapbox \nResetViewMapbox \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-modebarbutton.html#ZoomInMapbox","title":"ModeBarButton.ZoomInMapbox","content":"ModeBarButton.ZoomInMapbox \nZoomInMapbox \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-modebarbutton.html#ZoomOutMapbox","title":"ModeBarButton.ZoomOutMapbox","content":"ModeBarButton.ZoomOutMapbox \nZoomOutMapbox \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-orientation.html","title":"Orientation","content":"Orientation \n \nOrientation.Convert \nConvert \nOrientation.toString \ntoString \nOrientation.convert \nconvert \nOrientation.Horizontal \nHorizontal \nOrientation.Vertical \nVertical"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-orientation.html#Convert","title":"Orientation.Convert","content":"Orientation.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-orientation.html#toString","title":"Orientation.toString","content":"Orientation.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-orientation.html#convert","title":"Orientation.convert","content":"Orientation.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-orientation.html#Horizontal","title":"Orientation.Horizontal","content":"Orientation.Horizontal \nHorizontal \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-orientation.html#Vertical","title":"Orientation.Vertical","content":"Orientation.Vertical \nVertical \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-pathbaredgeshape.html","title":"PathbarEdgeShape","content":"PathbarEdgeShape \n \nPathbarEdgeShape.Convert \nConvert \nPathbarEdgeShape.toString \ntoString \nPathbarEdgeShape.convert \nconvert \nPathbarEdgeShape.ArrowRight \nArrowRight \nPathbarEdgeShape.ArrowLeft \nArrowLeft \nPathbarEdgeShape.Straight \nStraight \nPathbarEdgeShape.Slash \nSlash \nPathbarEdgeShape.BackSlash \nBackSlash"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-pathbaredgeshape.html#Convert","title":"PathbarEdgeShape.Convert","content":"PathbarEdgeShape.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-pathbaredgeshape.html#toString","title":"PathbarEdgeShape.toString","content":"PathbarEdgeShape.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-pathbaredgeshape.html#convert","title":"PathbarEdgeShape.convert","content":"PathbarEdgeShape.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-pathbaredgeshape.html#ArrowRight","title":"PathbarEdgeShape.ArrowRight","content":"PathbarEdgeShape.ArrowRight \nArrowRight \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-pathbaredgeshape.html#ArrowLeft","title":"PathbarEdgeShape.ArrowLeft","content":"PathbarEdgeShape.ArrowLeft \nArrowLeft \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-pathbaredgeshape.html#Straight","title":"PathbarEdgeShape.Straight","content":"PathbarEdgeShape.Straight \nStraight \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-pathbaredgeshape.html#Slash","title":"PathbarEdgeShape.Slash","content":"PathbarEdgeShape.Slash \nSlash \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-pathbaredgeshape.html#BackSlash","title":"PathbarEdgeShape.BackSlash","content":"PathbarEdgeShape.BackSlash \nBackSlash \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-patternfillmode.html","title":"PatternFillMode","content":"PatternFillMode \n \nPatternFillMode.Convert \nConvert \nPatternFillMode.toString \ntoString \nPatternFillMode.convert \nconvert \nPatternFillMode.Replace \nReplace \nPatternFillMode.Overlay \nOverlay"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-patternfillmode.html#Convert","title":"PatternFillMode.Convert","content":"PatternFillMode.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-patternfillmode.html#toString","title":"PatternFillMode.toString","content":"PatternFillMode.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-patternfillmode.html#convert","title":"PatternFillMode.convert","content":"PatternFillMode.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-patternfillmode.html#Replace","title":"PatternFillMode.Replace","content":"PatternFillMode.Replace \nReplace \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-patternfillmode.html#Overlay","title":"PatternFillMode.Overlay","content":"PatternFillMode.Overlay \nOverlay \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-patternshape.html","title":"PatternShape","content":"PatternShape \n \nPatternShape.Convert \nConvert \nPatternShape.toString \ntoString \nPatternShape.convert \nconvert \nPatternShape.None \nNone \nPatternShape.DiagonalDescending \nDiagonalDescending \nPatternShape.DiagonalAscending \nDiagonalAscending \nPatternShape.DiagonalChecked \nDiagonalChecked \nPatternShape.HorizontalLines \nHorizontalLines \nPatternShape.VerticalLines \nVerticalLines \nPatternShape.Checked \nChecked \nPatternShape.Dots \nDots"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-patternshape.html#Convert","title":"PatternShape.Convert","content":"PatternShape.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-patternshape.html#toString","title":"PatternShape.toString","content":"PatternShape.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-patternshape.html#convert","title":"PatternShape.convert","content":"PatternShape.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-patternshape.html#None","title":"PatternShape.None","content":"PatternShape.None \nNone \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-patternshape.html#DiagonalDescending","title":"PatternShape.DiagonalDescending","content":"PatternShape.DiagonalDescending \nDiagonalDescending \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-patternshape.html#DiagonalAscending","title":"PatternShape.DiagonalAscending","content":"PatternShape.DiagonalAscending \nDiagonalAscending \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-patternshape.html#DiagonalChecked","title":"PatternShape.DiagonalChecked","content":"PatternShape.DiagonalChecked \nDiagonalChecked \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-patternshape.html#HorizontalLines","title":"PatternShape.HorizontalLines","content":"PatternShape.HorizontalLines \nHorizontalLines \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-patternshape.html#VerticalLines","title":"PatternShape.VerticalLines","content":"PatternShape.VerticalLines \nVerticalLines \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-patternshape.html#Checked","title":"PatternShape.Checked","content":"PatternShape.Checked \nChecked \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-patternshape.html#Dots","title":"PatternShape.Dots","content":"PatternShape.Dots \nDots \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-periodalignment.html","title":"PeriodAlignment","content":"PeriodAlignment \n \nPeriodAlignment.Convert \nConvert \nPeriodAlignment.toString \ntoString \nPeriodAlignment.convert \nconvert \nPeriodAlignment.Start \nStart \nPeriodAlignment.Middle \nMiddle \nPeriodAlignment.End \nEnd"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-periodalignment.html#Convert","title":"PeriodAlignment.Convert","content":"PeriodAlignment.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-periodalignment.html#toString","title":"PeriodAlignment.toString","content":"PeriodAlignment.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-periodalignment.html#convert","title":"PeriodAlignment.convert","content":"PeriodAlignment.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-periodalignment.html#Start","title":"PeriodAlignment.Start","content":"PeriodAlignment.Start \nStart \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-periodalignment.html#Middle","title":"PeriodAlignment.Middle","content":"PeriodAlignment.Middle \nMiddle \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-periodalignment.html#End","title":"PeriodAlignment.End","content":"PeriodAlignment.End \nEnd \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-polargridshape.html","title":"PolarGridShape","content":"PolarGridShape \n\n Sets the method used to compute the sample\u0027s Q1 and Q3 quartiles\n \nPolarGridShape.Convert \nConvert \nPolarGridShape.toString \ntoString \nPolarGridShape.convert \nconvert \nPolarGridShape.Circular \nCircular \nPolarGridShape.Linear \nLinear"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-polargridshape.html#Convert","title":"PolarGridShape.Convert","content":"PolarGridShape.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-polargridshape.html#toString","title":"PolarGridShape.toString","content":"PolarGridShape.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-polargridshape.html#convert","title":"PolarGridShape.convert","content":"PolarGridShape.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-polargridshape.html#Circular","title":"PolarGridShape.Circular","content":"PolarGridShape.Circular \nCircular \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-polargridshape.html#Linear","title":"PolarGridShape.Linear","content":"PolarGridShape.Linear \nLinear \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-quartilemethod.html","title":"QuartileMethod","content":"QuartileMethod \n\n Sets the method used to compute the sample\u0027s Q1 and Q3 quartiles\n \nQuartileMethod.Convert \nConvert \nQuartileMethod.toString \ntoString \nQuartileMethod.convert \nconvert \nQuartileMethod.Linear \nLinear \nQuartileMethod.Exclusive \nExclusive \nQuartileMethod.Inclusive \nInclusive"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-quartilemethod.html#Convert","title":"QuartileMethod.Convert","content":"QuartileMethod.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-quartilemethod.html#toString","title":"QuartileMethod.toString","content":"QuartileMethod.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-quartilemethod.html#convert","title":"QuartileMethod.convert","content":"QuartileMethod.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-quartilemethod.html#Linear","title":"QuartileMethod.Linear","content":"QuartileMethod.Linear \nLinear \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-quartilemethod.html#Exclusive","title":"QuartileMethod.Exclusive","content":"QuartileMethod.Exclusive \nExclusive \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-quartilemethod.html#Inclusive","title":"QuartileMethod.Inclusive","content":"QuartileMethod.Inclusive \nInclusive \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-range.html","title":"Range","content":"Range \n\n Defines a Range between min and max value \n \nRange.Convert \nConvert \nRange.convert \nconvert \nRange.MinMax \nMinMax \nRange.Values \nValues"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-range.html#Convert","title":"Range.Convert","content":"Range.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-range.html#convert","title":"Range.convert","content":"Range.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-range.html#MinMax","title":"Range.MinMax","content":"Range.MinMax \nMinMax \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-range.html#Values","title":"Range.Values","content":"Range.Values \nValues \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-rangemode.html","title":"RangeMode","content":"RangeMode \n\n If \u0022normal\u0022, the range is computed in relation to the extrema of the input data. If \u0022tozero\u0022\u0060, the range extends to 0, regardless of the input data If \u0022nonnegative\u0022, the range is non-negative, regardless of the input data.\n \nRangeMode.Convert \nConvert \nRangeMode.toString \ntoString \nRangeMode.convert \nconvert \nRangeMode.Normal \nNormal \nRangeMode.ToZero \nToZero \nRangeMode.NonNegative \nNonNegative"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-rangemode.html#Convert","title":"RangeMode.Convert","content":"RangeMode.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-rangemode.html#toString","title":"RangeMode.toString","content":"RangeMode.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-rangemode.html#convert","title":"RangeMode.convert","content":"RangeMode.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-rangemode.html#Normal","title":"RangeMode.Normal","content":"RangeMode.Normal \nNormal \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-rangemode.html#ToZero","title":"RangeMode.ToZero","content":"RangeMode.ToZero \nToZero \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-rangemode.html#NonNegative","title":"RangeMode.NonNegative","content":"RangeMode.NonNegative \nNonNegative \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-rangebreakpattern.html","title":"RangebreakPattern","content":"RangebreakPattern \n\n Determines a pattern on the time line that generates breaks.\n \nRangebreakPattern.Convert \nConvert \nRangebreakPattern.toString \ntoString \nRangebreakPattern.convert \nconvert \nRangebreakPattern.DayOfWeek \nDayOfWeek \nRangebreakPattern.Hour \nHour \nRangebreakPattern.NoPattern \nNoPattern"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-rangebreakpattern.html#Convert","title":"RangebreakPattern.Convert","content":"RangebreakPattern.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-rangebreakpattern.html#toString","title":"RangebreakPattern.toString","content":"RangebreakPattern.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-rangebreakpattern.html#convert","title":"RangebreakPattern.convert","content":"RangebreakPattern.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-rangebreakpattern.html#DayOfWeek","title":"RangebreakPattern.DayOfWeek","content":"RangebreakPattern.DayOfWeek \nDayOfWeek \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-rangebreakpattern.html#Hour","title":"RangebreakPattern.Hour","content":"RangebreakPattern.Hour \nHour \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-rangebreakpattern.html#NoPattern","title":"RangebreakPattern.NoPattern","content":"RangebreakPattern.NoPattern \nNoPattern \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-rangesliderrangemode.html","title":"RangesliderRangeMode","content":"RangesliderRangeMode \n \nRangesliderRangeMode.Convert \nConvert \nRangesliderRangeMode.toString \ntoString \nRangesliderRangeMode.convert \nconvert \nRangesliderRangeMode.Auto \nAuto \nRangesliderRangeMode.Fixed \nFixed \nRangesliderRangeMode.Match \nMatch"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-rangesliderrangemode.html#Convert","title":"RangesliderRangeMode.Convert","content":"RangesliderRangeMode.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-rangesliderrangemode.html#toString","title":"RangesliderRangeMode.toString","content":"RangesliderRangeMode.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-rangesliderrangemode.html#convert","title":"RangesliderRangeMode.convert","content":"RangesliderRangeMode.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-rangesliderrangemode.html#Auto","title":"RangesliderRangeMode.Auto","content":"RangesliderRangeMode.Auto \nAuto \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-rangesliderrangemode.html#Fixed","title":"RangesliderRangeMode.Fixed","content":"RangesliderRangeMode.Fixed \nFixed \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-rangesliderrangemode.html#Match","title":"RangesliderRangeMode.Match","content":"RangesliderRangeMode.Match \nMatch \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-scalemode.html","title":"ScaleMode","content":"ScaleMode \n \nScaleMode.Convert \nConvert \nScaleMode.toString \ntoString \nScaleMode.convert \nconvert \nScaleMode.Width \nWidth \nScaleMode.Count \nCount"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-scalemode.html#Convert","title":"ScaleMode.Convert","content":"ScaleMode.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-scalemode.html#toString","title":"ScaleMode.toString","content":"ScaleMode.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-scalemode.html#convert","title":"ScaleMode.convert","content":"ScaleMode.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-scalemode.html#Width","title":"ScaleMode.Width","content":"ScaleMode.Width \nWidth \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-scalemode.html#Count","title":"ScaleMode.Count","content":"ScaleMode.Count \nCount \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-selectdirection.html","title":"SelectDirection","content":"SelectDirection \n \nSelectDirection.Convert \nConvert \nSelectDirection.toString \ntoString \nSelectDirection.convert \nconvert \nSelectDirection.Horizontal \nHorizontal \nSelectDirection.Vertical \nVertical \nSelectDirection.Diagonal \nDiagonal \nSelectDirection.Any \nAny"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-selectdirection.html#Convert","title":"SelectDirection.Convert","content":"SelectDirection.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-selectdirection.html#toString","title":"SelectDirection.toString","content":"SelectDirection.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-selectdirection.html#convert","title":"SelectDirection.convert","content":"SelectDirection.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-selectdirection.html#Horizontal","title":"SelectDirection.Horizontal","content":"SelectDirection.Horizontal \nHorizontal \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-selectdirection.html#Vertical","title":"SelectDirection.Vertical","content":"SelectDirection.Vertical \nVertical \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-selectdirection.html#Diagonal","title":"SelectDirection.Diagonal","content":"SelectDirection.Diagonal \nDiagonal \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-selectdirection.html#Any","title":"SelectDirection.Any","content":"SelectDirection.Any \nAny \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-shape.html","title":"Shape","content":"Shape \n\n Determines the line shape. With \u0022spline\u0022 the lines are drawn using spline interpolation. The other available values correspond to step-wise line shapes.\n \nShape.Convert \nConvert \nShape.toString \ntoString \nShape.convert \nconvert \nShape.Linear \nLinear \nShape.Spline \nSpline \nShape.Hv \nHv \nShape.Vh \nVh \nShape.Hvh \nHvh \nShape.Vhv \nVhv"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-shape.html#Convert","title":"Shape.Convert","content":"Shape.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-shape.html#toString","title":"Shape.toString","content":"Shape.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-shape.html#convert","title":"Shape.convert","content":"Shape.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-shape.html#Linear","title":"Shape.Linear","content":"Shape.Linear \nLinear \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-shape.html#Spline","title":"Shape.Spline","content":"Shape.Spline \nSpline \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-shape.html#Hv","title":"Shape.Hv","content":"Shape.Hv \nHv \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-shape.html#Vh","title":"Shape.Vh","content":"Shape.Vh \nVh \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-shape.html#Hvh","title":"Shape.Hvh","content":"Shape.Hvh \nHvh \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-shape.html#Vhv","title":"Shape.Vhv","content":"Shape.Vhv \nVhv \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-shapetype.html","title":"ShapeType","content":"ShapeType \n\n Specifies the shape type to be drawn. If \u0022line\u0022, a line is drawn from (\u0060x0\u0060,\u0060y0\u0060) to (\u0060x1\u0060,\u0060y1\u0060) If \u0022circle\u0022, a circle is drawn from ((\u0060x0\u0060\u002B\u0060x1\u0060)/2, (\u0060y0\u0060\u002B\u0060y1\u0060)/2))\n with radius (|(\u0060x0\u0060\u002B\u0060x1\u0060)/2 - \u0060x0\u0060|, |(\u0060y0\u0060\u002B\u0060y1\u0060)/2 -\u0060y0\u0060)|) If \u0022rect\u0022, a rectangle is drawn linking (\u0060x0\u0060,\u0060y0\u0060), (\u0060x1\u0060,\u0060y0\u0060), (\u0060x1\u0060,\u0060y1\u0060), (\u0060x0\u0060,\u0060y1\u0060), (\u0060x0\u0060,\u0060y0\u0060)\n If \u0022path\u0022, draw a custom SVG path using \u0060path\u0060.          \n \nShapeType.Convert \nConvert \nShapeType.toString \ntoString \nShapeType.convert \nconvert \nShapeType.Circle \nCircle \nShapeType.Rectangle \nRectangle \nShapeType.SvgPath \nSvgPath \nShapeType.Line \nLine"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-shapetype.html#Convert","title":"ShapeType.Convert","content":"ShapeType.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-shapetype.html#toString","title":"ShapeType.toString","content":"ShapeType.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-shapetype.html#convert","title":"ShapeType.convert","content":"ShapeType.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-shapetype.html#Circle","title":"ShapeType.Circle","content":"ShapeType.Circle \nCircle \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-shapetype.html#Rectangle","title":"ShapeType.Rectangle","content":"ShapeType.Rectangle \nRectangle \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-shapetype.html#SvgPath","title":"ShapeType.SvgPath","content":"ShapeType.SvgPath \nSvgPath \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-shapetype.html#Line","title":"ShapeType.Line","content":"ShapeType.Line \nLine \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-showexponent.html","title":"ShowExponent","content":"ShowExponent \n\n If \u0022all\u0022, all exponents are shown besides their significands. If \u0022first\u0022, only the exponent of the first tick is shown. If \u0022last\u0022, only the exponent of the last tick is shown. If \u0022none\u0022, no exponents appear.\n \nShowExponent.Convert \nConvert \nShowExponent.toString \ntoString \nShowExponent.convert \nconvert \nShowExponent.All \nAll \nShowExponent.First \nFirst \nShowExponent.Last \nLast \nShowExponent.None \nNone"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-showexponent.html#Convert","title":"ShowExponent.Convert","content":"ShowExponent.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-showexponent.html#toString","title":"ShowExponent.toString","content":"ShowExponent.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-showexponent.html#convert","title":"ShowExponent.convert","content":"ShowExponent.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-showexponent.html#All","title":"ShowExponent.All","content":"ShowExponent.All \nAll \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-showexponent.html#First","title":"ShowExponent.First","content":"ShowExponent.First \nFirst \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-showexponent.html#Last","title":"ShowExponent.Last","content":"ShowExponent.Last \nLast \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-showexponent.html#None","title":"ShowExponent.None","content":"ShowExponent.None \nNone \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-showtickoption.html","title":"ShowTickOption","content":"ShowTickOption \n\n If \u0022all\u0022, all tick labels are displayed with a prefix. If \u0022first\u0022, only the first tick is displayed with a prefix. If \u0022last\u0022, only the last tick is displayed with a suffix. If \u0022none\u0022, tick prefixes are hidden.\n \nShowTickOption.Convert \nConvert \nShowTickOption.toString \ntoString \nShowTickOption.convert \nconvert \nShowTickOption.All \nAll \nShowTickOption.First \nFirst \nShowTickOption.Last \nLast \nShowTickOption.None \nNone"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-showtickoption.html#Convert","title":"ShowTickOption.Convert","content":"ShowTickOption.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-showtickoption.html#toString","title":"ShowTickOption.toString","content":"ShowTickOption.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-showtickoption.html#convert","title":"ShowTickOption.convert","content":"ShowTickOption.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-showtickoption.html#All","title":"ShowTickOption.All","content":"ShowTickOption.All \nAll \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-showtickoption.html#First","title":"ShowTickOption.First","content":"ShowTickOption.First \nFirst \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-showtickoption.html#Last","title":"ShowTickOption.Last","content":"ShowTickOption.Last \nLast \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-showtickoption.html#None","title":"ShowTickOption.None","content":"ShowTickOption.None \nNone \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-side.html","title":"Side","content":"Side \n \nSide.Convert \nConvert \nSide.toString \ntoString \nSide.convert \nconvert \nSide.Top \nTop \nSide.Bottom \nBottom \nSide.Left \nLeft \nSide.Right \nRight"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-side.html#Convert","title":"Side.Convert","content":"Side.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-side.html#toString","title":"Side.toString","content":"Side.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-side.html#convert","title":"Side.convert","content":"Side.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-side.html#Top","title":"Side.Top","content":"Side.Top \nTop \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-side.html#Bottom","title":"Side.Bottom","content":"Side.Bottom \nBottom \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-side.html#Left","title":"Side.Left","content":"Side.Left \nLeft \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-side.html#Right","title":"Side.Right","content":"Side.Right \nRight \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-smoothalg.html","title":"SmoothAlg","content":"SmoothAlg \n\n Choose between algorithms (\u0027best\u0027 or \u0027fast\u0027) to smooth data linked to \u0027z\u0027. The default value is false corresponding to no smoothing.\n \nSmoothAlg.Convert \nConvert \nSmoothAlg.toString \ntoString \nSmoothAlg.convert \nconvert \nSmoothAlg.False \nFalse \nSmoothAlg.Best \nBest \nSmoothAlg.Fast \nFast"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-smoothalg.html#Convert","title":"SmoothAlg.Convert","content":"SmoothAlg.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-smoothalg.html#toString","title":"SmoothAlg.toString","content":"SmoothAlg.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-smoothalg.html#convert","title":"SmoothAlg.convert","content":"SmoothAlg.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-smoothalg.html#False","title":"SmoothAlg.False","content":"SmoothAlg.False \nFalse \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-smoothalg.html#Best","title":"SmoothAlg.Best","content":"SmoothAlg.Best \nBest \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-smoothalg.html#Fast","title":"SmoothAlg.Fast","content":"SmoothAlg.Fast \nFast \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-spanmode.html","title":"SpanMode","content":"SpanMode \n \nSpanMode.Convert \nConvert \nSpanMode.toString \ntoString \nSpanMode.convert \nconvert \nSpanMode.Soft \nSoft \nSpanMode.Hard \nHard \nSpanMode.Manual \nManual"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-spanmode.html#Convert","title":"SpanMode.Convert","content":"SpanMode.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-spanmode.html#toString","title":"SpanMode.toString","content":"SpanMode.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-spanmode.html#convert","title":"SpanMode.convert","content":"SpanMode.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-spanmode.html#Soft","title":"SpanMode.Soft","content":"SpanMode.Soft \nSoft \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-spanmode.html#Hard","title":"SpanMode.Hard","content":"SpanMode.Hard \nHard \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-spanmode.html#Manual","title":"SpanMode.Manual","content":"SpanMode.Manual \nManual \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-spikemode.html","title":"SpikeMode","content":"SpikeMode \n\n Determines the drawing mode for the spike line\n \nSpikeMode.Convert \nConvert \nSpikeMode.toString \ntoString \nSpikeMode.convert \nconvert \nSpikeMode.Axis \nAxis \nSpikeMode.Across \nAcross \nSpikeMode.AxisAcross \nAxisAcross \nSpikeMode.Marker \nMarker \nSpikeMode.AxisMarker \nAxisMarker \nSpikeMode.AxisAcrossMarker \nAxisAcrossMarker"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-spikemode.html#Convert","title":"SpikeMode.Convert","content":"SpikeMode.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-spikemode.html#toString","title":"SpikeMode.toString","content":"SpikeMode.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-spikemode.html#convert","title":"SpikeMode.convert","content":"SpikeMode.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-spikemode.html#Axis","title":"SpikeMode.Axis","content":"SpikeMode.Axis \nAxis \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-spikemode.html#Across","title":"SpikeMode.Across","content":"SpikeMode.Across \nAcross \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-spikemode.html#AxisAcross","title":"SpikeMode.AxisAcross","content":"SpikeMode.AxisAcross \nAxisAcross \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-spikemode.html#Marker","title":"SpikeMode.Marker","content":"SpikeMode.Marker \nMarker \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-spikemode.html#AxisMarker","title":"SpikeMode.AxisMarker","content":"SpikeMode.AxisMarker \nAxisMarker \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-spikemode.html#AxisAcrossMarker","title":"SpikeMode.AxisAcrossMarker","content":"SpikeMode.AxisAcrossMarker \nAxisAcrossMarker \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-spikesnap.html","title":"SpikeSnap","content":"SpikeSnap \n\n Determines whether spikelines are stuck to the cursor or to the closest datapoints.\n \nSpikeSnap.Convert \nConvert \nSpikeSnap.toString \ntoString \nSpikeSnap.convert \nconvert \nSpikeSnap.Data \nData \nSpikeSnap.Cursor \nCursor \nSpikeSnap.HoveredData \nHoveredData"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-spikesnap.html#Convert","title":"SpikeSnap.Convert","content":"SpikeSnap.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-spikesnap.html#toString","title":"SpikeSnap.toString","content":"SpikeSnap.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-spikesnap.html#convert","title":"SpikeSnap.convert","content":"SpikeSnap.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-spikesnap.html#Data","title":"SpikeSnap.Data","content":"SpikeSnap.Data \nData \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-spikesnap.html#Cursor","title":"SpikeSnap.Cursor","content":"SpikeSnap.Cursor \nCursor \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-spikesnap.html#HoveredData","title":"SpikeSnap.HoveredData","content":"SpikeSnap.HoveredData \nHoveredData \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-stackgaps.html","title":"StackGaps","content":"StackGaps \n \nStackGaps.Convert \nConvert \nStackGaps.toString \ntoString \nStackGaps.convert \nconvert \nStackGaps.InferZero \nInferZero \nStackGaps.Interpolate \nInterpolate"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-stackgaps.html#Convert","title":"StackGaps.Convert","content":"StackGaps.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-stackgaps.html#toString","title":"StackGaps.toString","content":"StackGaps.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-stackgaps.html#convert","title":"StackGaps.convert","content":"StackGaps.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-stackgaps.html#InferZero","title":"StackGaps.InferZero","content":"StackGaps.InferZero \nInferZero \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-stackgaps.html#Interpolate","title":"StackGaps.Interpolate","content":"StackGaps.Interpolate \nInterpolate \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-subplotid.html","title":"SubPlotId","content":"SubPlotId \n \nSubPlotId.Convert \nConvert \nSubPlotId.toString \ntoString \nSubPlotId.convert \nconvert \nSubPlotId.XAxis \nXAxis \nSubPlotId.YAxis \nYAxis \nSubPlotId.ColorAxis \nColorAxis \nSubPlotId.Geo \nGeo \nSubPlotId.Mapbox \nMapbox \nSubPlotId.Polar \nPolar \nSubPlotId.Ternary \nTernary \nSubPlotId.Scene \nScene \nSubPlotId.Carpet \nCarpet"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-subplotid.html#Convert","title":"SubPlotId.Convert","content":"SubPlotId.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-subplotid.html#toString","title":"SubPlotId.toString","content":"SubPlotId.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-subplotid.html#convert","title":"SubPlotId.convert","content":"SubPlotId.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-subplotid.html#XAxis","title":"SubPlotId.XAxis","content":"SubPlotId.XAxis \nXAxis \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-subplotid.html#YAxis","title":"SubPlotId.YAxis","content":"SubPlotId.YAxis \nYAxis \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-subplotid.html#ColorAxis","title":"SubPlotId.ColorAxis","content":"SubPlotId.ColorAxis \nColorAxis \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-subplotid.html#Geo","title":"SubPlotId.Geo","content":"SubPlotId.Geo \nGeo \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-subplotid.html#Mapbox","title":"SubPlotId.Mapbox","content":"SubPlotId.Mapbox \nMapbox \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-subplotid.html#Polar","title":"SubPlotId.Polar","content":"SubPlotId.Polar \nPolar \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-subplotid.html#Ternary","title":"SubPlotId.Ternary","content":"SubPlotId.Ternary \nTernary \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-subplotid.html#Scene","title":"SubPlotId.Scene","content":"SubPlotId.Scene \nScene \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-subplotid.html#Carpet","title":"SubPlotId.Carpet","content":"SubPlotId.Carpet \nCarpet \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-surfaceaxis.html","title":"SurfaceAxis","content":"SurfaceAxis \n \nSurfaceAxis.Convert \nConvert \nSurfaceAxis.toString \ntoString \nSurfaceAxis.convert \nconvert \nSurfaceAxis.NoSurfaceAxis \nNoSurfaceAxis \nSurfaceAxis.X \nX \nSurfaceAxis.Y \nY \nSurfaceAxis.Z \nZ"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-surfaceaxis.html#Convert","title":"SurfaceAxis.Convert","content":"SurfaceAxis.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-surfaceaxis.html#toString","title":"SurfaceAxis.toString","content":"SurfaceAxis.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-surfaceaxis.html#convert","title":"SurfaceAxis.convert","content":"SurfaceAxis.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-surfaceaxis.html#NoSurfaceAxis","title":"SurfaceAxis.NoSurfaceAxis","content":"SurfaceAxis.NoSurfaceAxis \nNoSurfaceAxis \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-surfaceaxis.html#X","title":"SurfaceAxis.X","content":"SurfaceAxis.X \nX \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-surfaceaxis.html#Y","title":"SurfaceAxis.Y","content":"SurfaceAxis.Y \nY \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-surfaceaxis.html#Z","title":"SurfaceAxis.Z","content":"SurfaceAxis.Z \nZ \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-surfacepattern.html","title":"SurfacePattern","content":"SurfacePattern \n\n Sets the surface pattern of the iso-surface 3-D sections. The default pattern of the surface is \u0060all\u0060 meaning that the rest of surface elements would be shaded. The check options (either 1 or 2) could be used to draw half of the squares on the surface. Using various combinations of capital \u0060A\u0060, \u0060B\u0060, \u0060C\u0060, \u0060D\u0060 and \u0060E\u0060 may also be used to reduce the number of triangles on the iso-surfaces and creating other patterns of interest.\n \nSurfacePattern.Convert \nConvert \nSurfacePattern.toString \ntoString \nSurfacePattern.convert \nconvert \nSurfacePattern.A \nA \nSurfacePattern.B \nB \nSurfacePattern.C \nC \nSurfacePattern.D \nD \nSurfacePattern.E \nE \nSurfacePattern.AB \nAB \nSurfacePattern.AC \nAC \nSurfacePattern.AD \nAD \nSurfacePattern.AE \nAE \nSurfacePattern.BC \nBC \nSurfacePattern.BD \nBD \nSurfacePattern.BE \nBE \nSurfacePattern.CD \nCD \nSurfacePattern.CE \nCE \nSurfacePattern.ABC \nABC \nSurfacePattern.ABD \nABD \nSurfacePattern.ABE \nABE \nSurfacePattern.BCD \nBCD \nSurfacePattern.BDE \nBDE \nSurfacePattern.ABCD \nABCD \nSurfacePattern.BCDE \nBCDE \nSurfacePattern.Odd \nOdd \nSurfacePattern.Even \nEven \nSurfacePattern.All \nAll"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-surfacepattern.html#Convert","title":"SurfacePattern.Convert","content":"SurfacePattern.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-surfacepattern.html#toString","title":"SurfacePattern.toString","content":"SurfacePattern.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-surfacepattern.html#convert","title":"SurfacePattern.convert","content":"SurfacePattern.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-surfacepattern.html#A","title":"SurfacePattern.A","content":"SurfacePattern.A \nA \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-surfacepattern.html#B","title":"SurfacePattern.B","content":"SurfacePattern.B \nB \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-surfacepattern.html#C","title":"SurfacePattern.C","content":"SurfacePattern.C \nC \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-surfacepattern.html#D","title":"SurfacePattern.D","content":"SurfacePattern.D \nD \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-surfacepattern.html#E","title":"SurfacePattern.E","content":"SurfacePattern.E \nE \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-surfacepattern.html#AB","title":"SurfacePattern.AB","content":"SurfacePattern.AB \nAB \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-surfacepattern.html#AC","title":"SurfacePattern.AC","content":"SurfacePattern.AC \nAC \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-surfacepattern.html#AD","title":"SurfacePattern.AD","content":"SurfacePattern.AD \nAD \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-surfacepattern.html#AE","title":"SurfacePattern.AE","content":"SurfacePattern.AE \nAE \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-surfacepattern.html#BC","title":"SurfacePattern.BC","content":"SurfacePattern.BC \nBC \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-surfacepattern.html#BD","title":"SurfacePattern.BD","content":"SurfacePattern.BD \nBD \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-surfacepattern.html#BE","title":"SurfacePattern.BE","content":"SurfacePattern.BE \nBE \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-surfacepattern.html#CD","title":"SurfacePattern.CD","content":"SurfacePattern.CD \nCD \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-surfacepattern.html#CE","title":"SurfacePattern.CE","content":"SurfacePattern.CE \nCE \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-surfacepattern.html#ABC","title":"SurfacePattern.ABC","content":"SurfacePattern.ABC \nABC \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-surfacepattern.html#ABD","title":"SurfacePattern.ABD","content":"SurfacePattern.ABD \nABD \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-surfacepattern.html#ABE","title":"SurfacePattern.ABE","content":"SurfacePattern.ABE \nABE \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-surfacepattern.html#BCD","title":"SurfacePattern.BCD","content":"SurfacePattern.BCD \nBCD \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-surfacepattern.html#BDE","title":"SurfacePattern.BDE","content":"SurfacePattern.BDE \nBDE \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-surfacepattern.html#ABCD","title":"SurfacePattern.ABCD","content":"SurfacePattern.ABCD \nABCD \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-surfacepattern.html#BCDE","title":"SurfacePattern.BCDE","content":"SurfacePattern.BCDE \nBCDE \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-surfacepattern.html#Odd","title":"SurfacePattern.Odd","content":"SurfacePattern.Odd \nOdd \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-surfacepattern.html#Even","title":"SurfacePattern.Even","content":"SurfacePattern.Even \nEven \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-surfacepattern.html#All","title":"SurfacePattern.All","content":"SurfacePattern.All \nAll \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-symbolstyle.html","title":"SymbolStyle","content":"SymbolStyle \n \nSymbolStyle.Convert \nConvert \nSymbolStyle.toModifier \ntoModifier \nSymbolStyle.toString \ntoString \nSymbolStyle.convert \nconvert \nSymbolStyle.Open \nOpen \nSymbolStyle.Dot \nDot \nSymbolStyle.OpenDot \nOpenDot"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-symbolstyle.html#Convert","title":"SymbolStyle.Convert","content":"SymbolStyle.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-symbolstyle.html#toModifier","title":"SymbolStyle.toModifier","content":"SymbolStyle.toModifier \ntoModifier \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-symbolstyle.html#toString","title":"SymbolStyle.toString","content":"SymbolStyle.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-symbolstyle.html#convert","title":"SymbolStyle.convert","content":"SymbolStyle.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-symbolstyle.html#Open","title":"SymbolStyle.Open","content":"SymbolStyle.Open \nOpen \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-symbolstyle.html#Dot","title":"SymbolStyle.Dot","content":"SymbolStyle.Dot \nDot \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-symbolstyle.html#OpenDot","title":"SymbolStyle.OpenDot","content":"SymbolStyle.OpenDot \nOpenDot \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-textinfo.html","title":"TextInfo","content":"TextInfo \n\n Determines which trace information appear on the graph and  on hove (HoverInfo)\n \nTextInfo.Convert \nConvert \nTextInfo.toConcatString \ntoConcatString \nTextInfo.toString \ntoString \nTextInfo.convert \nconvert \nTextInfo.All \nAll \nTextInfo.None \nNone \nTextInfo.Label \nLabel \nTextInfo.Text \nText \nTextInfo.Value \nValue \nTextInfo.Percent \nPercent"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-textinfo.html#Convert","title":"TextInfo.Convert","content":"TextInfo.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-textinfo.html#toConcatString","title":"TextInfo.toConcatString","content":"TextInfo.toConcatString \ntoConcatString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-textinfo.html#toString","title":"TextInfo.toString","content":"TextInfo.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-textinfo.html#convert","title":"TextInfo.convert","content":"TextInfo.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-textinfo.html#All","title":"TextInfo.All","content":"TextInfo.All \nAll \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-textinfo.html#None","title":"TextInfo.None","content":"TextInfo.None \nNone \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-textinfo.html#Label","title":"TextInfo.Label","content":"TextInfo.Label \nLabel \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-textinfo.html#Text","title":"TextInfo.Text","content":"TextInfo.Text \nText \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-textinfo.html#Value","title":"TextInfo.Value","content":"TextInfo.Value \nValue \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-textinfo.html#Percent","title":"TextInfo.Percent","content":"TextInfo.Percent \nPercent \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-textposition.html","title":"TextPosition","content":"TextPosition \n\n Sets the positions of the \u0060text\u0060 elements. Note that not all options work for every type of trace, e.g. Pie Charts only support \u0022inside\u0022 | \u0022outside\u0022 | \u0022auto\u0022 | \u0022none\u0022\n\n - Cartesian plots: Sets the positions of the \u0060text\u0060 elements with respects to the (x,y) coordinates.\n\n - Pie Charts and derivatives: Specifies the location of the text with respects to the sector.\n \nTextPosition.Convert \nConvert \nTextPosition.toString \ntoString \nTextPosition.convert \nconvert \nTextPosition.TopLeft \nTopLeft \nTextPosition.TopCenter \nTopCenter \nTextPosition.TopRight \nTopRight \nTextPosition.MiddleLeft \nMiddleLeft \nTextPosition.MiddleCenter \nMiddleCenter \nTextPosition.MiddleRight \nMiddleRight \nTextPosition.BottomLeft \nBottomLeft \nTextPosition.BottomCenter \nBottomCenter \nTextPosition.BottomRight \nBottomRight \nTextPosition.Auto \nAuto \nTextPosition.Inside \nInside \nTextPosition.Outside \nOutside \nTextPosition.None \nNone"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-textposition.html#Convert","title":"TextPosition.Convert","content":"TextPosition.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-textposition.html#toString","title":"TextPosition.toString","content":"TextPosition.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-textposition.html#convert","title":"TextPosition.convert","content":"TextPosition.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-textposition.html#TopLeft","title":"TextPosition.TopLeft","content":"TextPosition.TopLeft \nTopLeft \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-textposition.html#TopCenter","title":"TextPosition.TopCenter","content":"TextPosition.TopCenter \nTopCenter \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-textposition.html#TopRight","title":"TextPosition.TopRight","content":"TextPosition.TopRight \nTopRight \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-textposition.html#MiddleLeft","title":"TextPosition.MiddleLeft","content":"TextPosition.MiddleLeft \nMiddleLeft \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-textposition.html#MiddleCenter","title":"TextPosition.MiddleCenter","content":"TextPosition.MiddleCenter \nMiddleCenter \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-textposition.html#MiddleRight","title":"TextPosition.MiddleRight","content":"TextPosition.MiddleRight \nMiddleRight \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-textposition.html#BottomLeft","title":"TextPosition.BottomLeft","content":"TextPosition.BottomLeft \nBottomLeft \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-textposition.html#BottomCenter","title":"TextPosition.BottomCenter","content":"TextPosition.BottomCenter \nBottomCenter \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-textposition.html#BottomRight","title":"TextPosition.BottomRight","content":"TextPosition.BottomRight \nBottomRight \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-textposition.html#Auto","title":"TextPosition.Auto","content":"TextPosition.Auto \nAuto \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-textposition.html#Inside","title":"TextPosition.Inside","content":"TextPosition.Inside \nInside \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-textposition.html#Outside","title":"TextPosition.Outside","content":"TextPosition.Outside \nOutside \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-textposition.html#None","title":"TextPosition.None","content":"TextPosition.None \nNone \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-ticklabelmode.html","title":"TickLabelMode","content":"TickLabelMode \n \nTickLabelMode.Convert \nConvert \nTickLabelMode.toString \ntoString \nTickLabelMode.convert \nconvert \nTickLabelMode.Instant \nInstant \nTickLabelMode.Period \nPeriod"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-ticklabelmode.html#Convert","title":"TickLabelMode.Convert","content":"TickLabelMode.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-ticklabelmode.html#toString","title":"TickLabelMode.toString","content":"TickLabelMode.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-ticklabelmode.html#convert","title":"TickLabelMode.convert","content":"TickLabelMode.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-ticklabelmode.html#Instant","title":"TickLabelMode.Instant","content":"TickLabelMode.Instant \nInstant \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-ticklabelmode.html#Period","title":"TickLabelMode.Period","content":"TickLabelMode.Period \nPeriod \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-ticklabeloverflow.html","title":"TickLabelOverflow","content":"TickLabelOverflow \n \nTickLabelOverflow.Convert \nConvert \nTickLabelOverflow.toString \ntoString \nTickLabelOverflow.convert \nconvert \nTickLabelOverflow.Allow \nAllow \nTickLabelOverflow.HidePastDiv \nHidePastDiv \nTickLabelOverflow.HidePastDomain \nHidePastDomain"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-ticklabeloverflow.html#Convert","title":"TickLabelOverflow.Convert","content":"TickLabelOverflow.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-ticklabeloverflow.html#toString","title":"TickLabelOverflow.toString","content":"TickLabelOverflow.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-ticklabeloverflow.html#convert","title":"TickLabelOverflow.convert","content":"TickLabelOverflow.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-ticklabeloverflow.html#Allow","title":"TickLabelOverflow.Allow","content":"TickLabelOverflow.Allow \nAllow \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-ticklabeloverflow.html#HidePastDiv","title":"TickLabelOverflow.HidePastDiv","content":"TickLabelOverflow.HidePastDiv \nHidePastDiv \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-ticklabeloverflow.html#HidePastDomain","title":"TickLabelOverflow.HidePastDomain","content":"TickLabelOverflow.HidePastDomain \nHidePastDomain \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-ticklabelposition.html","title":"TickLabelPosition","content":"TickLabelPosition \n \nTickLabelPosition.Convert \nConvert \nTickLabelPosition.toString \ntoString \nTickLabelPosition.convert \nconvert \nTickLabelPosition.Outside \nOutside \nTickLabelPosition.Inside \nInside \nTickLabelPosition.OutsideTop \nOutsideTop \nTickLabelPosition.InsideTop \nInsideTop \nTickLabelPosition.OutsideLeft \nOutsideLeft \nTickLabelPosition.InsideLeft \nInsideLeft \nTickLabelPosition.OutsideRight \nOutsideRight \nTickLabelPosition.InsideRight \nInsideRight \nTickLabelPosition.OutsideBottom \nOutsideBottom \nTickLabelPosition.InsideBottom \nInsideBottom"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-ticklabelposition.html#Convert","title":"TickLabelPosition.Convert","content":"TickLabelPosition.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-ticklabelposition.html#toString","title":"TickLabelPosition.toString","content":"TickLabelPosition.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-ticklabelposition.html#convert","title":"TickLabelPosition.convert","content":"TickLabelPosition.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-ticklabelposition.html#Outside","title":"TickLabelPosition.Outside","content":"TickLabelPosition.Outside \nOutside \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-ticklabelposition.html#Inside","title":"TickLabelPosition.Inside","content":"TickLabelPosition.Inside \nInside \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-ticklabelposition.html#OutsideTop","title":"TickLabelPosition.OutsideTop","content":"TickLabelPosition.OutsideTop \nOutsideTop \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-ticklabelposition.html#InsideTop","title":"TickLabelPosition.InsideTop","content":"TickLabelPosition.InsideTop \nInsideTop \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-ticklabelposition.html#OutsideLeft","title":"TickLabelPosition.OutsideLeft","content":"TickLabelPosition.OutsideLeft \nOutsideLeft \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-ticklabelposition.html#InsideLeft","title":"TickLabelPosition.InsideLeft","content":"TickLabelPosition.InsideLeft \nInsideLeft \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-ticklabelposition.html#OutsideRight","title":"TickLabelPosition.OutsideRight","content":"TickLabelPosition.OutsideRight \nOutsideRight \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-ticklabelposition.html#InsideRight","title":"TickLabelPosition.InsideRight","content":"TickLabelPosition.InsideRight \nInsideRight \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-ticklabelposition.html#OutsideBottom","title":"TickLabelPosition.OutsideBottom","content":"TickLabelPosition.OutsideBottom \nOutsideBottom \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-ticklabelposition.html#InsideBottom","title":"TickLabelPosition.InsideBottom","content":"TickLabelPosition.InsideBottom \nInsideBottom \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-tickmode.html","title":"TickMode","content":"TickMode \n\n Sets the tick mode for this axis. If \u0022auto\u0022, the number of ticks is set via \u0060nticks\u0060. If \u0022linear\u0022, the placement of the ticks is determined by a starting position \u0060tick0\u0060 and a tick step \u0060dtick\u0060 (\u0022linear\u0022 is the default value if \u0060tick0\u0060 and \u0060dtick\u0060 are provided). \n If \u0022array\u0022, the placement of the ticks is set via \u0060tickvals\u0060 and the tick text is \u0060ticktext\u0060. (\u0022array\u0022 is the default value if \u0060tickvals\u0060 is provided).\n \nTickMode.Convert \nConvert \nTickMode.toString \ntoString \nTickMode.convert \nconvert \nTickMode.Auto \nAuto \nTickMode.Linear \nLinear \nTickMode.Array \nArray"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-tickmode.html#Convert","title":"TickMode.Convert","content":"TickMode.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-tickmode.html#toString","title":"TickMode.toString","content":"TickMode.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-tickmode.html#convert","title":"TickMode.convert","content":"TickMode.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-tickmode.html#Auto","title":"TickMode.Auto","content":"TickMode.Auto \nAuto \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-tickmode.html#Linear","title":"TickMode.Linear","content":"TickMode.Linear \nLinear \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-tickmode.html#Array","title":"TickMode.Array","content":"TickMode.Array \nArray \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-tickoptions.html","title":"TickOptions","content":"TickOptions \n\n Determines whether ticks are drawn or not. If \u0022\u0022, this axis\u0027 ticks are not drawn. If \u0022outside\u0022 (\u0022inside\u0022), this axis\u0027 are drawn outside (inside) the axis lines.\n \nTickOptions.Convert \nConvert \nTickOptions.toString \ntoString \nTickOptions.convert \nconvert \nTickOptions.Outside \nOutside \nTickOptions.Inside \nInside \nTickOptions.Empty \nEmpty"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-tickoptions.html#Convert","title":"TickOptions.Convert","content":"TickOptions.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-tickoptions.html#toString","title":"TickOptions.toString","content":"TickOptions.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-tickoptions.html#convert","title":"TickOptions.convert","content":"TickOptions.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-tickoptions.html#Outside","title":"TickOptions.Outside","content":"TickOptions.Outside \nOutside \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-tickoptions.html#Inside","title":"TickOptions.Inside","content":"TickOptions.Inside \nInside \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-tickoptions.html#Empty","title":"TickOptions.Empty","content":"TickOptions.Empty \nEmpty \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-tilingflip.html","title":"TilingFlip","content":"TilingFlip \n \nTilingFlip.Convert \nConvert \nTilingFlip.toString \ntoString \nTilingFlip.convert \nconvert \nTilingFlip.X \nX \nTilingFlip.Y \nY \nTilingFlip.XY \nXY"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-tilingflip.html#Convert","title":"TilingFlip.Convert","content":"TilingFlip.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-tilingflip.html#toString","title":"TilingFlip.toString","content":"TilingFlip.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-tilingflip.html#convert","title":"TilingFlip.convert","content":"TilingFlip.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-tilingflip.html#X","title":"TilingFlip.X","content":"TilingFlip.X \nX \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-tilingflip.html#Y","title":"TilingFlip.Y","content":"TilingFlip.Y \nY \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-tilingflip.html#XY","title":"TilingFlip.XY","content":"TilingFlip.XY \nXY \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-timestep.html","title":"TimeStep","content":"TimeStep \n \nTimeStep.Convert \nConvert \nTimeStep.toString \ntoString \nTimeStep.convert \nconvert \nTimeStep.Month \nMonth \nTimeStep.Year \nYear \nTimeStep.Day \nDay \nTimeStep.Hour \nHour \nTimeStep.Minute \nMinute \nTimeStep.Second \nSecond \nTimeStep.All \nAll"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-timestep.html#Convert","title":"TimeStep.Convert","content":"TimeStep.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-timestep.html#toString","title":"TimeStep.toString","content":"TimeStep.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-timestep.html#convert","title":"TimeStep.convert","content":"TimeStep.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-timestep.html#Month","title":"TimeStep.Month","content":"TimeStep.Month \nMonth \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-timestep.html#Year","title":"TimeStep.Year","content":"TimeStep.Year \nYear \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-timestep.html#Day","title":"TimeStep.Day","content":"TimeStep.Day \nDay \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-timestep.html#Hour","title":"TimeStep.Hour","content":"TimeStep.Hour \nHour \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-timestep.html#Minute","title":"TimeStep.Minute","content":"TimeStep.Minute \nMinute \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-timestep.html#Second","title":"TimeStep.Second","content":"TimeStep.Second \nSecond \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-timestep.html#All","title":"TimeStep.All","content":"TimeStep.All \nAll \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-timestepmode.html","title":"TimeStepMode","content":"TimeStepMode \n\n Determines whether spikelines are stuck to the cursor or to the closest datapoints.\n \nTimeStepMode.Convert \nConvert \nTimeStepMode.toString \ntoString \nTimeStepMode.convert \nconvert \nTimeStepMode.Backward \nBackward \nTimeStepMode.ToDate \nToDate"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-timestepmode.html#Convert","title":"TimeStepMode.Convert","content":"TimeStepMode.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-timestepmode.html#toString","title":"TimeStepMode.toString","content":"TimeStepMode.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-timestepmode.html#convert","title":"TimeStepMode.convert","content":"TimeStepMode.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-timestepmode.html#Backward","title":"TimeStepMode.Backward","content":"TimeStepMode.Backward \nBackward \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-timestepmode.html#ToDate","title":"TimeStepMode.ToDate","content":"TimeStepMode.ToDate \nToDate \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-traceitemclickoptions.html","title":"TraceItemClickOptions","content":"TraceItemClickOptions \n \nTraceItemClickOptions.Convert \nConvert \nTraceItemClickOptions.toString \ntoString \nTraceItemClickOptions.convert \nconvert \nTraceItemClickOptions.Toggle \nToggle \nTraceItemClickOptions.ToggleOthers \nToggleOthers \nTraceItemClickOptions.False \nFalse"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-traceitemclickoptions.html#Convert","title":"TraceItemClickOptions.Convert","content":"TraceItemClickOptions.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-traceitemclickoptions.html#toString","title":"TraceItemClickOptions.toString","content":"TraceItemClickOptions.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-traceitemclickoptions.html#convert","title":"TraceItemClickOptions.convert","content":"TraceItemClickOptions.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-traceitemclickoptions.html#Toggle","title":"TraceItemClickOptions.Toggle","content":"TraceItemClickOptions.Toggle \nToggle \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-traceitemclickoptions.html#ToggleOthers","title":"TraceItemClickOptions.ToggleOthers","content":"TraceItemClickOptions.ToggleOthers \nToggleOthers \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-traceitemclickoptions.html#False","title":"TraceItemClickOptions.False","content":"TraceItemClickOptions.False \nFalse \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-traceitemsizing.html","title":"TraceItemSizing","content":"TraceItemSizing \n \nTraceItemSizing.Convert \nConvert \nTraceItemSizing.toString \ntoString \nTraceItemSizing.convert \nconvert \nTraceItemSizing.Trace \nTrace \nTraceItemSizing.Constant \nConstant"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-traceitemsizing.html#Convert","title":"TraceItemSizing.Convert","content":"TraceItemSizing.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-traceitemsizing.html#toString","title":"TraceItemSizing.toString","content":"TraceItemSizing.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-traceitemsizing.html#convert","title":"TraceItemSizing.convert","content":"TraceItemSizing.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-traceitemsizing.html#Trace","title":"TraceItemSizing.Trace","content":"TraceItemSizing.Trace \nTrace \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-traceitemsizing.html#Constant","title":"TraceItemSizing.Constant","content":"TraceItemSizing.Constant \nConstant \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-traceorder.html","title":"TraceOrder","content":"TraceOrder \n \nTraceOrder.Convert \nConvert \nTraceOrder.toString \ntoString \nTraceOrder.convert \nconvert \nTraceOrder.Normal \nNormal \nTraceOrder.Reversed \nReversed \nTraceOrder.Grouped \nGrouped \nTraceOrder.ReversedGrouped \nReversedGrouped"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-traceorder.html#Convert","title":"TraceOrder.Convert","content":"TraceOrder.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-traceorder.html#toString","title":"TraceOrder.toString","content":"TraceOrder.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-traceorder.html#convert","title":"TraceOrder.convert","content":"TraceOrder.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-traceorder.html#Normal","title":"TraceOrder.Normal","content":"TraceOrder.Normal \nNormal \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-traceorder.html#Reversed","title":"TraceOrder.Reversed","content":"TraceOrder.Reversed \nReversed \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-traceorder.html#Grouped","title":"TraceOrder.Grouped","content":"TraceOrder.Grouped \nGrouped \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-traceorder.html#ReversedGrouped","title":"TraceOrder.ReversedGrouped","content":"TraceOrder.ReversedGrouped \nReversedGrouped \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-transitioneasing.html","title":"TransitionEasing","content":"TransitionEasing \n \nTransitionEasing.Convert \nConvert \nTransitionEasing.toString \ntoString \nTransitionEasing.convert \nconvert \nTransitionEasing.Linear \nLinear \nTransitionEasing.Quad \nQuad \nTransitionEasing.Cubic \nCubic \nTransitionEasing.Sin \nSin \nTransitionEasing.Exp \nExp \nTransitionEasing.Circle \nCircle \nTransitionEasing.Elastic \nElastic \nTransitionEasing.Back \nBack \nTransitionEasing.Bounce \nBounce \nTransitionEasing.LinearIn \nLinearIn \nTransitionEasing.QuadIn \nQuadIn \nTransitionEasing.CubicIn \nCubicIn \nTransitionEasing.SinIn \nSinIn \nTransitionEasing.ExpIn \nExpIn \nTransitionEasing.CircleIn \nCircleIn \nTransitionEasing.ElasticIn \nElasticIn \nTransitionEasing.BackIn \nBackIn \nTransitionEasing.BounceIn \nBounceIn \nTransitionEasing.LinearOut \nLinearOut \nTransitionEasing.QuadOut \nQuadOut \nTransitionEasing.CubicOut \nCubicOut \nTransitionEasing.SinOut \nSinOut \nTransitionEasing.ExpOut \nExpOut \nTransitionEasing.CircleOut \nCircleOut \nTransitionEasing.ElasticOut \nElasticOut \nTransitionEasing.BackOut \nBackOut \nTransitionEasing.BounceOut \nBounceOut \nTransitionEasing.LinearInOut \nLinearInOut \nTransitionEasing.QuadInOut \nQuadInOut \nTransitionEasing.CubicInOut \nCubicInOut \nTransitionEasing.SinInOut \nSinInOut \nTransitionEasing.ExpInOut \nExpInOut \nTransitionEasing.CircleInOut \nCircleInOut \nTransitionEasing.ElasticInOut \nElasticInOut \nTransitionEasing.BackInOut \nBackInOut \nTransitionEasing.BounceInOut \nBounceInOut"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-transitioneasing.html#Convert","title":"TransitionEasing.Convert","content":"TransitionEasing.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-transitioneasing.html#toString","title":"TransitionEasing.toString","content":"TransitionEasing.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-transitioneasing.html#convert","title":"TransitionEasing.convert","content":"TransitionEasing.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-transitioneasing.html#Linear","title":"TransitionEasing.Linear","content":"TransitionEasing.Linear \nLinear \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-transitioneasing.html#Quad","title":"TransitionEasing.Quad","content":"TransitionEasing.Quad \nQuad \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-transitioneasing.html#Cubic","title":"TransitionEasing.Cubic","content":"TransitionEasing.Cubic \nCubic \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-transitioneasing.html#Sin","title":"TransitionEasing.Sin","content":"TransitionEasing.Sin \nSin \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-transitioneasing.html#Exp","title":"TransitionEasing.Exp","content":"TransitionEasing.Exp \nExp \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-transitioneasing.html#Circle","title":"TransitionEasing.Circle","content":"TransitionEasing.Circle \nCircle \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-transitioneasing.html#Elastic","title":"TransitionEasing.Elastic","content":"TransitionEasing.Elastic \nElastic \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-transitioneasing.html#Back","title":"TransitionEasing.Back","content":"TransitionEasing.Back \nBack \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-transitioneasing.html#Bounce","title":"TransitionEasing.Bounce","content":"TransitionEasing.Bounce \nBounce \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-transitioneasing.html#LinearIn","title":"TransitionEasing.LinearIn","content":"TransitionEasing.LinearIn \nLinearIn \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-transitioneasing.html#QuadIn","title":"TransitionEasing.QuadIn","content":"TransitionEasing.QuadIn \nQuadIn \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-transitioneasing.html#CubicIn","title":"TransitionEasing.CubicIn","content":"TransitionEasing.CubicIn \nCubicIn \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-transitioneasing.html#SinIn","title":"TransitionEasing.SinIn","content":"TransitionEasing.SinIn \nSinIn \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-transitioneasing.html#ExpIn","title":"TransitionEasing.ExpIn","content":"TransitionEasing.ExpIn \nExpIn \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-transitioneasing.html#CircleIn","title":"TransitionEasing.CircleIn","content":"TransitionEasing.CircleIn \nCircleIn \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-transitioneasing.html#ElasticIn","title":"TransitionEasing.ElasticIn","content":"TransitionEasing.ElasticIn \nElasticIn \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-transitioneasing.html#BackIn","title":"TransitionEasing.BackIn","content":"TransitionEasing.BackIn \nBackIn \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-transitioneasing.html#BounceIn","title":"TransitionEasing.BounceIn","content":"TransitionEasing.BounceIn \nBounceIn \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-transitioneasing.html#LinearOut","title":"TransitionEasing.LinearOut","content":"TransitionEasing.LinearOut \nLinearOut \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-transitioneasing.html#QuadOut","title":"TransitionEasing.QuadOut","content":"TransitionEasing.QuadOut \nQuadOut \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-transitioneasing.html#CubicOut","title":"TransitionEasing.CubicOut","content":"TransitionEasing.CubicOut \nCubicOut \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-transitioneasing.html#SinOut","title":"TransitionEasing.SinOut","content":"TransitionEasing.SinOut \nSinOut \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-transitioneasing.html#ExpOut","title":"TransitionEasing.ExpOut","content":"TransitionEasing.ExpOut \nExpOut \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-transitioneasing.html#CircleOut","title":"TransitionEasing.CircleOut","content":"TransitionEasing.CircleOut \nCircleOut \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-transitioneasing.html#ElasticOut","title":"TransitionEasing.ElasticOut","content":"TransitionEasing.ElasticOut \nElasticOut \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-transitioneasing.html#BackOut","title":"TransitionEasing.BackOut","content":"TransitionEasing.BackOut \nBackOut \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-transitioneasing.html#BounceOut","title":"TransitionEasing.BounceOut","content":"TransitionEasing.BounceOut \nBounceOut \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-transitioneasing.html#LinearInOut","title":"TransitionEasing.LinearInOut","content":"TransitionEasing.LinearInOut \nLinearInOut \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-transitioneasing.html#QuadInOut","title":"TransitionEasing.QuadInOut","content":"TransitionEasing.QuadInOut \nQuadInOut \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-transitioneasing.html#CubicInOut","title":"TransitionEasing.CubicInOut","content":"TransitionEasing.CubicInOut \nCubicInOut \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-transitioneasing.html#SinInOut","title":"TransitionEasing.SinInOut","content":"TransitionEasing.SinInOut \nSinInOut \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-transitioneasing.html#ExpInOut","title":"TransitionEasing.ExpInOut","content":"TransitionEasing.ExpInOut \nExpInOut \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-transitioneasing.html#CircleInOut","title":"TransitionEasing.CircleInOut","content":"TransitionEasing.CircleInOut \nCircleInOut \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-transitioneasing.html#ElasticInOut","title":"TransitionEasing.ElasticInOut","content":"TransitionEasing.ElasticInOut \nElasticInOut \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-transitioneasing.html#BackInOut","title":"TransitionEasing.BackInOut","content":"TransitionEasing.BackInOut \nBackInOut \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-transitioneasing.html#BounceInOut","title":"TransitionEasing.BounceInOut","content":"TransitionEasing.BounceInOut \nBounceInOut \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-transitionordering.html","title":"TransitionOrdering","content":"TransitionOrdering \n \nTransitionOrdering.Convert \nConvert \nTransitionOrdering.toString \ntoString \nTransitionOrdering.convert \nconvert \nTransitionOrdering.LayoutFirst \nLayoutFirst \nTransitionOrdering.TracesFirst \nTracesFirst"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-transitionordering.html#Convert","title":"TransitionOrdering.Convert","content":"TransitionOrdering.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-transitionordering.html#toString","title":"TransitionOrdering.toString","content":"TransitionOrdering.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-transitionordering.html#convert","title":"TransitionOrdering.convert","content":"TransitionOrdering.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-transitionordering.html#LayoutFirst","title":"TransitionOrdering.LayoutFirst","content":"TransitionOrdering.LayoutFirst \nLayoutFirst \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-transitionordering.html#TracesFirst","title":"TransitionOrdering.TracesFirst","content":"TransitionOrdering.TracesFirst \nTracesFirst \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-treemaptilingpacking.html","title":"TreemapTilingPacking","content":"TreemapTilingPacking \n \nTreemapTilingPacking.Convert \nConvert \nTreemapTilingPacking.toString \ntoString \nTreemapTilingPacking.convert \nconvert \nTreemapTilingPacking.Squarify \nSquarify \nTreemapTilingPacking.Binary \nBinary \nTreemapTilingPacking.Dice \nDice \nTreemapTilingPacking.Slice \nSlice \nTreemapTilingPacking.SliceDice \nSliceDice"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-treemaptilingpacking.html#Convert","title":"TreemapTilingPacking.Convert","content":"TreemapTilingPacking.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-treemaptilingpacking.html#toString","title":"TreemapTilingPacking.toString","content":"TreemapTilingPacking.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-treemaptilingpacking.html#convert","title":"TreemapTilingPacking.convert","content":"TreemapTilingPacking.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-treemaptilingpacking.html#Squarify","title":"TreemapTilingPacking.Squarify","content":"TreemapTilingPacking.Squarify \nSquarify \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-treemaptilingpacking.html#Binary","title":"TreemapTilingPacking.Binary","content":"TreemapTilingPacking.Binary \nBinary \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-treemaptilingpacking.html#Dice","title":"TreemapTilingPacking.Dice","content":"TreemapTilingPacking.Dice \nDice \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-treemaptilingpacking.html#Slice","title":"TreemapTilingPacking.Slice","content":"TreemapTilingPacking.Slice \nSlice \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-treemaptilingpacking.html#SliceDice","title":"TreemapTilingPacking.SliceDice","content":"TreemapTilingPacking.SliceDice \nSliceDice \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-uniformtextmode.html","title":"UniformTextMode","content":"UniformTextMode \n \nUniformTextMode.Convert \nConvert \nUniformTextMode.toString \ntoString \nUniformTextMode.convert \nconvert \nUniformTextMode.Hide \nHide \nUniformTextMode.False \nFalse \nUniformTextMode.Show \nShow"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-uniformtextmode.html#Convert","title":"UniformTextMode.Convert","content":"UniformTextMode.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-uniformtextmode.html#toString","title":"UniformTextMode.toString","content":"UniformTextMode.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-uniformtextmode.html#convert","title":"UniformTextMode.convert","content":"UniformTextMode.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-uniformtextmode.html#Hide","title":"UniformTextMode.Hide","content":"UniformTextMode.Hide \nHide \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-uniformtextmode.html#False","title":"UniformTextMode.False","content":"UniformTextMode.False \nFalse \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-uniformtextmode.html#Show","title":"UniformTextMode.Show","content":"UniformTextMode.Show \nShow \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-unitmode.html","title":"UnitMode","content":"UnitMode \n \nUnitMode.Convert \nConvert \nUnitMode.toString \ntoString \nUnitMode.convert \nconvert \nUnitMode.Fraction \nFraction \nUnitMode.Pixels \nPixels"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-unitmode.html#Convert","title":"UnitMode.Convert","content":"UnitMode.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-unitmode.html#toString","title":"UnitMode.toString","content":"UnitMode.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-unitmode.html#convert","title":"UnitMode.convert","content":"UnitMode.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-unitmode.html#Fraction","title":"UnitMode.Fraction","content":"UnitMode.Fraction \nFraction \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-unitmode.html#Pixels","title":"UnitMode.Pixels","content":"UnitMode.Pixels \nPixels \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-verticalalign.html","title":"VerticalAlign","content":"VerticalAlign \n \nVerticalAlign.Convert \nConvert \nVerticalAlign.toString \ntoString \nVerticalAlign.convert \nconvert \nVerticalAlign.Top \nTop \nVerticalAlign.Middle \nMiddle \nVerticalAlign.Bottom \nBottom"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-verticalalign.html#Convert","title":"VerticalAlign.Convert","content":"VerticalAlign.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-verticalalign.html#toString","title":"VerticalAlign.toString","content":"VerticalAlign.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-verticalalign.html#convert","title":"VerticalAlign.convert","content":"VerticalAlign.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-verticalalign.html#Top","title":"VerticalAlign.Top","content":"VerticalAlign.Top \nTop \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-verticalalign.html#Middle","title":"VerticalAlign.Middle","content":"VerticalAlign.Middle \nMiddle \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-verticalalign.html#Bottom","title":"VerticalAlign.Bottom","content":"VerticalAlign.Bottom \nBottom \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-violinmode.html","title":"ViolinMode","content":"ViolinMode \n \nViolinMode.Convert \nConvert \nViolinMode.toString \ntoString \nViolinMode.convert \nconvert \nViolinMode.Group \nGroup \nViolinMode.Overlay \nOverlay"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-violinmode.html#Convert","title":"ViolinMode.Convert","content":"ViolinMode.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-violinmode.html#toString","title":"ViolinMode.toString","content":"ViolinMode.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-violinmode.html#convert","title":"ViolinMode.convert","content":"ViolinMode.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-violinmode.html#Group","title":"ViolinMode.Group","content":"ViolinMode.Group \nGroup \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-violinmode.html#Overlay","title":"ViolinMode.Overlay","content":"ViolinMode.Overlay \nOverlay \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-violinside.html","title":"ViolinSide","content":"ViolinSide \n \nViolinSide.Convert \nConvert \nViolinSide.toString \ntoString \nViolinSide.convert \nconvert \nViolinSide.Both \nBoth \nViolinSide.Positive \nPositive \nViolinSide.Negative \nNegative"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-violinside.html#Convert","title":"ViolinSide.Convert","content":"ViolinSide.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-violinside.html#toString","title":"ViolinSide.toString","content":"ViolinSide.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-violinside.html#convert","title":"ViolinSide.convert","content":"ViolinSide.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-violinside.html#Both","title":"ViolinSide.Both","content":"ViolinSide.Both \nBoth \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-violinside.html#Positive","title":"ViolinSide.Positive","content":"ViolinSide.Positive \nPositive \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-violinside.html#Negative","title":"ViolinSide.Negative","content":"ViolinSide.Negative \nNegative \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-visible.html","title":"Visible","content":"Visible \n\n Determines whether or not this trace is visible. If \u0022legendonly\u0022, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).\n \nVisible.Convert \nConvert \nVisible.toString \ntoString \nVisible.convert \nconvert \nVisible.True \nTrue \nVisible.False \nFalse \nVisible.LegendOnly \nLegendOnly"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-visible.html#Convert","title":"Visible.Convert","content":"Visible.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-visible.html#toString","title":"Visible.toString","content":"Visible.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-visible.html#convert","title":"Visible.convert","content":"Visible.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-visible.html#True","title":"Visible.True","content":"Visible.True \nTrue \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-visible.html#False","title":"Visible.False","content":"Visible.False \nFalse \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-visible.html#LegendOnly","title":"Visible.LegendOnly","content":"Visible.LegendOnly \nLegendOnly \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-waterfallmeasure.html","title":"WaterfallMeasure","content":"WaterfallMeasure \n\nHow to compute differences between bars in Waterfall Charts\n \nWaterfallMeasure.Convert \nConvert \nWaterfallMeasure.toString \ntoString \nWaterfallMeasure.convert \nconvert \nWaterfallMeasure.Relative \nRelative \nWaterfallMeasure.Total \nTotal"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-waterfallmeasure.html#Convert","title":"WaterfallMeasure.Convert","content":"WaterfallMeasure.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-waterfallmeasure.html#toString","title":"WaterfallMeasure.toString","content":"WaterfallMeasure.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-waterfallmeasure.html#convert","title":"WaterfallMeasure.convert","content":"WaterfallMeasure.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-waterfallmeasure.html#Relative","title":"WaterfallMeasure.Relative","content":"WaterfallMeasure.Relative \nRelative \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-waterfallmeasure.html#Total","title":"WaterfallMeasure.Total","content":"WaterfallMeasure.Total \nTotal \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-waterfallmode.html","title":"WaterfallMode","content":"WaterfallMode \n \nWaterfallMode.Convert \nConvert \nWaterfallMode.toString \ntoString \nWaterfallMode.convert \nconvert \nWaterfallMode.Group \nGroup \nWaterfallMode.Overlay \nOverlay"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-waterfallmode.html#Convert","title":"WaterfallMode.Convert","content":"WaterfallMode.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-waterfallmode.html#toString","title":"WaterfallMode.toString","content":"WaterfallMode.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-waterfallmode.html#convert","title":"WaterfallMode.convert","content":"WaterfallMode.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-waterfallmode.html#Group","title":"WaterfallMode.Group","content":"WaterfallMode.Group \nGroup \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-waterfallmode.html#Overlay","title":"WaterfallMode.Overlay","content":"WaterfallMode.Overlay \nOverlay \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-xanchorposition.html","title":"XAnchorPosition","content":"XAnchorPosition \n \nXAnchorPosition.Convert \nConvert \nXAnchorPosition.toString \ntoString \nXAnchorPosition.convert \nconvert \nXAnchorPosition.Auto \nAuto \nXAnchorPosition.Left \nLeft \nXAnchorPosition.Center \nCenter \nXAnchorPosition.Right \nRight"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-xanchorposition.html#Convert","title":"XAnchorPosition.Convert","content":"XAnchorPosition.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-xanchorposition.html#toString","title":"XAnchorPosition.toString","content":"XAnchorPosition.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-xanchorposition.html#convert","title":"XAnchorPosition.convert","content":"XAnchorPosition.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-xanchorposition.html#Auto","title":"XAnchorPosition.Auto","content":"XAnchorPosition.Auto \nAuto \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-xanchorposition.html#Left","title":"XAnchorPosition.Left","content":"XAnchorPosition.Left \nLeft \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-xanchorposition.html#Center","title":"XAnchorPosition.Center","content":"XAnchorPosition.Center \nCenter \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-xanchorposition.html#Right","title":"XAnchorPosition.Right","content":"XAnchorPosition.Right \nRight \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-yanchorposition.html","title":"YAnchorPosition","content":"YAnchorPosition \n \nYAnchorPosition.Convert \nConvert \nYAnchorPosition.toString \ntoString \nYAnchorPosition.convert \nconvert \nYAnchorPosition.Auto \nAuto \nYAnchorPosition.Top \nTop \nYAnchorPosition.Middle \nMiddle \nYAnchorPosition.Bottom \nBottom"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-yanchorposition.html#Convert","title":"YAnchorPosition.Convert","content":"YAnchorPosition.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-yanchorposition.html#toString","title":"YAnchorPosition.toString","content":"YAnchorPosition.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-yanchorposition.html#convert","title":"YAnchorPosition.convert","content":"YAnchorPosition.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-yanchorposition.html#Auto","title":"YAnchorPosition.Auto","content":"YAnchorPosition.Auto \nAuto \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-yanchorposition.html#Top","title":"YAnchorPosition.Top","content":"YAnchorPosition.Top \nTop \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-yanchorposition.html#Middle","title":"YAnchorPosition.Middle","content":"YAnchorPosition.Middle \nMiddle \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-yanchorposition.html#Bottom","title":"YAnchorPosition.Bottom","content":"YAnchorPosition.Bottom \nBottom \n"},{"uri":"https://plotly.net/reference/plotly-net-argb.html","title":"ARGB","content":"ARGB \n\n Represents an ARGB (alpha, red, green, blue) color\n \nARGB.create \ncreate \nARGB.fromHex \nfromHex \nARGB.fromKeyword \nfromKeyword \nARGB.fromRGB \nfromRGB \nARGB.fromWebHex \nfromWebHex \nARGB.toHex \ntoHex \nARGB.toString \ntoString \nARGB.toWebHex \ntoWebHex \nARGB.A \nA \nARGB.R \nR \nARGB.G \nG \nARGB.B \nB"},{"uri":"https://plotly.net/reference/plotly-net-argb.html#create","title":"ARGB.create","content":"ARGB.create \ncreate \n\n Creates a Argb Color from the four ARGB component (alpha, red, green, and blue) values.\n"},{"uri":"https://plotly.net/reference/plotly-net-argb.html#fromHex","title":"ARGB.fromHex","content":"ARGB.fromHex \nfromHex \n\n Gets color from hex representataion (FFFFFF) or (0xFFFFFF)\n"},{"uri":"https://plotly.net/reference/plotly-net-argb.html#fromKeyword","title":"ARGB.fromKeyword","content":"ARGB.fromKeyword \nfromKeyword \n"},{"uri":"https://plotly.net/reference/plotly-net-argb.html#fromRGB","title":"ARGB.fromRGB","content":"ARGB.fromRGB \nfromRGB \n\n Creates a Argb color from the specified color values (red, green, and blue).\n The alpha value is implicitly 255 (fully opaque). \n"},{"uri":"https://plotly.net/reference/plotly-net-argb.html#fromWebHex","title":"ARGB.fromWebHex","content":"ARGB.fromWebHex \nfromWebHex \n\n Gets color from web color (#FFFFFF)\n"},{"uri":"https://plotly.net/reference/plotly-net-argb.html#toHex","title":"ARGB.toHex","content":"ARGB.toHex \ntoHex \n\n Gets the hex representataion (FFFFFF) of a color (with valid prefix \u00220xFFFFFF\u0022)\n"},{"uri":"https://plotly.net/reference/plotly-net-argb.html#toString","title":"ARGB.toString","content":"ARGB.toString \ntoString \n\n Converts this Color structure to a human-readable string.\n"},{"uri":"https://plotly.net/reference/plotly-net-argb.html#toWebHex","title":"ARGB.toWebHex","content":"ARGB.toWebHex \ntoWebHex \n\n Gets the web color representataion (#FFFFFF)\n"},{"uri":"https://plotly.net/reference/plotly-net-argb.html#A","title":"ARGB.A","content":"ARGB.A \nA \n\n The alpha component value of this Color structure.\n"},{"uri":"https://plotly.net/reference/plotly-net-argb.html#R","title":"ARGB.R","content":"ARGB.R \nR \n\n The red component value of this Color structure.\n"},{"uri":"https://plotly.net/reference/plotly-net-argb.html#G","title":"ARGB.G","content":"ARGB.G \nG \n\n The green component value of this Color structure.\n"},{"uri":"https://plotly.net/reference/plotly-net-argb.html#B","title":"ARGB.B","content":"ARGB.B \nB \n\n The blue component value of this Color structure.\n"},{"uri":"https://plotly.net/reference/plotly-net-argbconverter.html","title":"ARGBConverter","content":"ARGBConverter \n \nARGBConverter.( .ctor ) \n( .ctor )"},{"uri":"https://plotly.net/reference/plotly-net-argbconverter.html#( .ctor )","title":"ARGBConverter.( .ctor )","content":"ARGBConverter.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html","title":"Chart","content":"Chart \n\n Provides a set of static methods for creating charts.\n \nChart.Grid \nGrid \nChart.Grid \nGrid \nChart.Invisible \nInvisible \nChart.SingleStack \nSingleStack \nChart.Stack \nStack \nChart.combine \ncombine \nChart.saveHtmlAs \nsaveHtmlAs \nChart.show \nshow \nChart.showAsImage \nshowAsImage \nChart.withAAxis \nwithAAxis \nChart.withAdditionalHeadTags \nwithAdditionalHeadTags \nChart.withAngularAxis \nwithAngularAxis \nChart.withAnnotation \nwithAnnotation \nChart.withAnnotations \nwithAnnotations \nChart.withAxisAnchor \nwithAxisAnchor \nChart.withAxisAnchor \nwithAxisAnchor \nChart.withBAxis \nwithBAxis \nChart.withCAxis \nwithCAxis \nChart.withColorAxis \nwithColorAxis \nChart.withColorAxisAnchor \nwithColorAxisAnchor \nChart.withColorBar \nwithColorBar \nChart.withColorBarStyle \nwithColorBarStyle \nChart.withConfig \nwithConfig \nChart.withDescription \nwithDescription \nChart.withGeo \nwithGeo \nChart.withGeoProjection \nwithGeoProjection \nChart.withGeoStyle \nwithGeoStyle \nChart.withHeadTags \nwithHeadTags \nChart.withLayout \nwithLayout \nChart.withLayoutGrid \nwithLayoutGrid \nChart.withLayoutGridStyle \nwithLayoutGridStyle \nChart.withLayoutImage \nwithLayoutImage \nChart.withLayoutImages \nwithLayoutImages \nChart.withLegend \nwithLegend \nChart.withLegend \nwithLegend \nChart.withLine \nwithLine \nChart.withLineStyle \nwithLineStyle \nChart.withMapbox \nwithMapbox \nChart.withMargin \nwithMargin \nChart.withMarginSize \nwithMarginSize \nChart.withMarker \nwithMarker \nChart.withMarkerStyle \nwithMarkerStyle \nChart.withMathTex \nwithMathTex \nChart.withPolar \nwithPolar \nChart.withRadialAxis \nwithRadialAxis \nChart.withScene \nwithScene \nChart.withShape \nwithShape \nChart.withShapes \nwithShapes \nChart.withSize \nwithSize \nChart.withSize \nwithSize \nChart.withTemplate \nwithTemplate \nChart.withTernary \nwithTernary \nChart.withTitle \nwithTitle \nChart.withTraceName \nwithTraceName \nChart.withXAxis \nwithXAxis \nChart.withXAxisRangeSlider \nwithXAxisRangeSlider \nChart.withXAxisStyle \nwithXAxisStyle \nChart.withXError \nwithXError \nChart.withXErrorStyle \nwithXErrorStyle \nChart.withX_Axis \nwithX_Axis \nChart.withX_AxisRangeSlider \nwithX_AxisRangeSlider \nChart.withX_AxisStyle \nwithX_AxisStyle \nChart.withYAxis \nwithYAxis \nChart.withYAxisStyle \nwithYAxisStyle \nChart.withYError \nwithYError \nChart.withYErrorStyle \nwithYErrorStyle \nChart.withY_Axis \nwithY_Axis \nChart.withY_AxisStyle \nwithY_AxisStyle \nChart.withZAxis \nwithZAxis \nChart.withZAxisStyle \nwithZAxisStyle \nChart.withZError \nwithZError \nChart.withZErrorStyle \nwithZErrorStyle \nChart.withZ_Axis \nwithZ_Axis \nChart.withZ_AxisStyle \nwithZ_AxisStyle"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#Grid","title":"Chart.Grid","content":"Chart.Grid \nGrid \n\n Creates a subplot grid with the the dimensions of the input 2D sequence containing the charts to render in the respective cells.\n\n ATTENTION: when the individual rows do not have the same amount of charts, they will be filled with dummy charts TO THE RIGHT.\n\n prevent this behaviour by using Chart.Invisible at the cells that should be empty.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart.html#Grid","title":"Chart.Grid","content":"Chart.Grid \nGrid \n\n Creates a subplot grid with the given dimensions (nRows x nCols) for the input charts.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart.html#Invisible","title":"Chart.Invisible","content":"Chart.Invisible \nInvisible \nCreates a chart that is completely invisible when rendered. The Chart object however is NOT empty! Combining this chart with other charts will have unforseen consequences (it has for example invisible axes that can override other axes if used in Chart.Combine)"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#SingleStack","title":"Chart.SingleStack","content":"Chart.SingleStack \nSingleStack \n\n Creates a chart stack (a subplot grid with one column) from the input charts.\n \u003C/summary\u003E\n \u003Cparam name =\u0022SubPlots\u0022\u003EUsed for freeform grids, where some axes may be shared across subplots but others are not. Each entry should be a cartesian subplot id, like \u0022xy\u0022 or \u0022x3y2\u0022, or \u0022\u0022 to leave that cell empty. You may reuse x axes within the same column, and y axes within the same row. Non-cartesian subplots and traces that support \u0060domain\u0060 can place themselves in this grid separately using the \u0060gridcell\u0060 attribute.\u003C/param\u003E\n \u003Cparam name =\u0022XAxes\u0022\u003EUsed with \u0060yaxes\u0060 when the x and y axes are shared across columns and rows. Each entry should be an y axis id like \u0022y\u0022, \u0022y2\u0022, etc., or \u0022\u0022 to not put a y axis in that row. Entries other than \u0022\u0022 must be unique. Ignored if \u0060subplots\u0060 is present. If missing but \u0060xaxes\u0060 is present, will generate consecutive IDs.\u003C/param\u003E\n \u003Cparam name =\u0022YAxes\u0022\u003EUsed with \u0060yaxes\u0060 when the x and y axes are shared across columns and rows. Each entry should be an x axis id like \u0022x\u0022, \u0022x2\u0022, etc., or \u0022\u0022 to not put an x axis in that column. Entries other than \u0022\u0022 must be unique. Ignored if \u0060subplots\u0060 is present. If missing but \u0060yaxes\u0060 is present, will generate consecutive IDs.\u003C/param\u003E\n \u003Cparam name =\u0022RowOrder\u0022\u003EIs the first row the top or the bottom? Note that columns are always enumerated from left to right.\u003C/param\u003E\n \u003Cparam name =\u0022Pattern\u0022\u003EIf no \u0060subplots\u0060, \u0060xaxes\u0060, or \u0060yaxes\u0060 are given but we do have \u0060rows\u0060 and \u0060columns\u0060, we can generate defaults using consecutive axis IDs, in two ways: \u0022coupled\u0022 gives one x axis per column and one y axis per row. \u0022independent\u0022 uses a new xy pair for each cell, left-to-right across each row then iterating rows according to \u0060roworder\u0060.\u003C/param\u003E\n \u003Cparam name =\u0022XGap\u0022\u003EHorizontal space between grid cells, expressed as a fraction of the total width available to one cell. Defaults to 0.1 for coupled-axes grids and 0.2 for independent grids.\u003C/param\u003E\n \u003Cparam name =\u0022YGap\u0022\u003EVertical space between grid cells, expressed as a fraction of the total height available to one cell. Defaults to 0.1 for coupled-axes grids and 0.3 for independent grids.\u003C/param\u003E\n \u003Cparam name =\u0022Domain\u0022\u003ESets the domains of this grid subplot (in plot fraction). The first and last cells end exactly at the domain edges, with no grout around the edges.\u003C/param\u003E\n \u003Cparam name =\u0022XSide\u0022\u003ESets where the x axis labels and titles go. \u0022bottom\u0022 means the very bottom of the grid. \u0022bottom plot\u0022 is the lowest plot that each x axis is used in. \u0022top\u0022 and \u0022top plot\u0022 are similar.\u003C/param\u003E\n \u003Cparam name =\u0022YSide\u0022\u003ESets where the y axis labels and titles go. \u0022left\u0022 means the very left edge of the grid. \u0022left plot\u0022 is the leftmost plot that each y axis is used in. \u0022right\u0022 and \u0022right plot\u0022 are similar.\u003C/param\u003E\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#Stack","title":"Chart.Stack","content":"Chart.Stack \nStack \n\n Create a combined chart with the given charts merged\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#combine","title":"Chart.combine","content":"Chart.combine \ncombine \n\n Create a combined chart with the given charts merged\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#saveHtmlAs","title":"Chart.saveHtmlAs","content":"Chart.saveHtmlAs \nsaveHtmlAs \n\n Save chart as html single page\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#show","title":"Chart.show","content":"Chart.show \nshow \n\n Show chart in browser\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#showAsImage","title":"Chart.showAsImage","content":"Chart.showAsImage \nshowAsImage \n\n Show chart in browser\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withAAxis","title":"Chart.withAAxis","content":"Chart.withAAxis \nwithAAxis \n\n Sets the A-Axis of the ternary coordinate system with the given id on the chart layout\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withAdditionalHeadTags","title":"Chart.withAdditionalHeadTags","content":"Chart.withAdditionalHeadTags \nwithAdditionalHeadTags \n\n Adds the given additional html tags on the chart\u0027s DisplayOptions. They will be included in the document\u0027s \u003Chead\u003E\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withAngularAxis","title":"Chart.withAngularAxis","content":"Chart.withAngularAxis \nwithAngularAxis \n\n Sets the angular axis of the polar object with the given id on the chart layout\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withAnnotation","title":"Chart.withAnnotation","content":"Chart.withAnnotation \nwithAnnotation \n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withAnnotations","title":"Chart.withAnnotations","content":"Chart.withAnnotations \nwithAnnotations \n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withAxisAnchor","title":"Chart.withAxisAnchor","content":"Chart.withAxisAnchor \nwithAxisAnchor \n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withAxisAnchor","title":"Chart.withAxisAnchor","content":"Chart.withAxisAnchor \nwithAxisAnchor \n\n Set the axis anchor id the trace is belonging to\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withBAxis","title":"Chart.withBAxis","content":"Chart.withBAxis \nwithBAxis \n\n Sets the A-Axis of the ternary coordinate system with the given id on the chart layout\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withCAxis","title":"Chart.withCAxis","content":"Chart.withCAxis \nwithCAxis \n\n Sets the A-Axis of the ternary coordinate system with the given id on the chart layout\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withColorAxis","title":"Chart.withColorAxis","content":"Chart.withColorAxis \nwithColorAxis \n\n Sets the color axis with the given id on the chart layout\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withColorAxisAnchor","title":"Chart.withColorAxisAnchor","content":"Chart.withColorAxisAnchor \nwithColorAxisAnchor \n\n Set the axis anchor id the trace is belonging to\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withColorBar","title":"Chart.withColorBar","content":"Chart.withColorBar \nwithColorBar \n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withColorBarStyle","title":"Chart.withColorBarStyle","content":"Chart.withColorBarStyle \nwithColorBarStyle \n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withConfig","title":"Chart.withConfig","content":"Chart.withConfig \nwithConfig \n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withDescription","title":"Chart.withDescription","content":"Chart.withDescription \nwithDescription \n\n Show chart in browser\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withGeo","title":"Chart.withGeo","content":"Chart.withGeo \nwithGeo \n\n Sets a map for the given chart (will only work with traces supporting geo, e.g. choropleth, scattergeo)\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withGeoProjection","title":"Chart.withGeoProjection","content":"Chart.withGeoProjection \nwithGeoProjection \n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withGeoStyle","title":"Chart.withGeoStyle","content":"Chart.withGeoStyle \nwithGeoStyle \n\n Sets the map style for the given chart (will only work with traces supporting geo, e.g. choropleth, scattergeo)\n\n Parameters      :\n\n FitBounds       : Determines if and how this subplot\u0027s view settings are auto-computed to fit trace data\n\n Resolution      : Sets the resolution of the base layers\n\n Scope           : Set the scope of the map.\n\n Projection      : Determines the type of projection used to display the map\n\n Center          : Sets the (lon,lat) coordinates of the map\u0027s center. By default, the map\u0027s longitude center lies at the middle of the longitude range for scoped projection and above \u0060projection.rotation.lon\u0060 otherwise. For all projection types, the map\u0027s latitude center lies at the middle of the latitude range by default.\n\n Visible         : Wether or not the base layers are visible\n\n Domain          : The domain of this geo subplot\n\n ShowCoastLine   : Sets whether or not the coastlines are drawn.\n\n CoastLineColor  : Sets the coastline color.\n\n CoastLineWidth  : Sets the coastline stroke width (in px).\n\n ShowLand        : Sets whether or not land masses are filled in color.\n\n LandColor       : Sets the land mass color.\n\n ShowOcean       : Sets whether or not oceans are filled in color.\n\n OceanColor      : Sets the ocean color\n\n ShowLakes       : Sets whether or not lakes are drawn.\n\n LakeColor       : Sets the color of the lakes.\n\n ShowRivers      : Sets whether or not rivers are drawn.\n\n RiverColor      : Sets color of the rivers.\n\n RiverWidth      : Sets the stroke width (in px) of the rivers.\n\n ShowCountries   : Sets whether or not country boundaries are drawn.\n\n CountryColor    : Sets line color of the country boundaries.\n\n CountryWidth    : Sets line width (in px) of the country boundaries.\n\n ShowSubunits    : Sets whether or not boundaries of subunits within countries (e.g. states, provinces) are drawn.\n\n SubunitColor    : Sets the color of the subunits boundaries.\n\n SubunitWidth    : Sets the stroke width (in px) of the subunits boundaries.\n\n ShowFrame       : Sets whether or not a frame is drawn around the map.\n\n FrameColor      : Sets the color the frame.\n\n FrameWidth      : Sets the stroke width (in px) of the frame.\n\n BgColor         : Set the background color of the map\n\n LatAxis         : Sets the latitudinal axis for this geo trace\n\n LonAxis         : Sets the longitudinal axis for this geo trace\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withHeadTags","title":"Chart.withHeadTags","content":"Chart.withHeadTags \nwithHeadTags \n\n Sets the given additional head tags on the chart\u0027s DisplayOptions. They will be included in the document\u0027s \u003Chead\u003E\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withLayout","title":"Chart.withLayout","content":"Chart.withLayout \nwithLayout \n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withLayoutGrid","title":"Chart.withLayoutGrid","content":"Chart.withLayoutGrid \nwithLayoutGrid \n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withLayoutGridStyle","title":"Chart.withLayoutGridStyle","content":"Chart.withLayoutGridStyle \nwithLayoutGridStyle \nSet the LayoutGrid options of a Chart"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withLayoutImage","title":"Chart.withLayoutImage","content":"Chart.withLayoutImage \nwithLayoutImage \n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withLayoutImages","title":"Chart.withLayoutImages","content":"Chart.withLayoutImages \nwithLayoutImages \n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withLegend","title":"Chart.withLegend","content":"Chart.withLegend \nwithLegend \n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withLegend","title":"Chart.withLegend","content":"Chart.withLegend \nwithLegend \n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withLine","title":"Chart.withLine","content":"Chart.withLine \nwithLine \n\n Apply styling to the Line(s) of the chart as Object.\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withLineStyle","title":"Chart.withLineStyle","content":"Chart.withLineStyle \nwithLineStyle \n\n Apply styling to the Line(s) of the chart.\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withMapbox","title":"Chart.withMapbox","content":"Chart.withMapbox \nwithMapbox \n\n Sets a mapbox for the given chart (will only work with traces supporting mapboxes, e.g. choroplethmapbox, scattermapbox)\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withMargin","title":"Chart.withMargin","content":"Chart.withMargin \nwithMargin \n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withMarginSize","title":"Chart.withMarginSize","content":"Chart.withMarginSize \nwithMarginSize \n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withMarker","title":"Chart.withMarker","content":"Chart.withMarker \nwithMarker \n\n Apply styling to the Marker(s) of the chart as Object.\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withMarkerStyle","title":"Chart.withMarkerStyle","content":"Chart.withMarkerStyle \nwithMarkerStyle \n\n Apply styling to the Marker(s) of the chart.\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withMathTex","title":"Chart.withMathTex","content":"Chart.withMathTex \nwithMathTex \n\n Adds the necessary script tags to render tex strings to the chart\u0027s DisplayOptions\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withPolar","title":"Chart.withPolar","content":"Chart.withPolar \nwithPolar \n\n Sets the polar object with the given id on the chart layout\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withRadialAxis","title":"Chart.withRadialAxis","content":"Chart.withRadialAxis \nwithRadialAxis \n\n Sets the radial axis of the polar object with the given id on the chart layout\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withScene","title":"Chart.withScene","content":"Chart.withScene \nwithScene \n\n Sets the scene with the given id on the chart layout\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withShape","title":"Chart.withShape","content":"Chart.withShape \nwithShape \n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withShapes","title":"Chart.withShapes","content":"Chart.withShapes \nwithShapes \n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withSize","title":"Chart.withSize","content":"Chart.withSize \nwithSize \n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withSize","title":"Chart.withSize","content":"Chart.withSize \nwithSize \n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withTemplate","title":"Chart.withTemplate","content":"Chart.withTemplate \nwithTemplate \n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withTernary","title":"Chart.withTernary","content":"Chart.withTernary \nwithTernary \n\n Sets the scene with the given id on the chart layout\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withTitle","title":"Chart.withTitle","content":"Chart.withTitle \nwithTitle \n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withTraceName","title":"Chart.withTraceName","content":"Chart.withTraceName \nwithTraceName \n\n Set the name related properties of a trace\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withXAxis","title":"Chart.withXAxis","content":"Chart.withXAxis \nwithXAxis \n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withXAxisRangeSlider","title":"Chart.withXAxisRangeSlider","content":"Chart.withXAxisRangeSlider \nwithXAxisRangeSlider \n\n Sets the range slider for the xAxis\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withXAxisStyle","title":"Chart.withXAxisStyle","content":"Chart.withXAxisStyle \nwithXAxisStyle \n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withXError","title":"Chart.withXError","content":"Chart.withXError \nwithXError \n\n Apply styling to the xError(s) of the chart as Object\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withXErrorStyle","title":"Chart.withXErrorStyle","content":"Chart.withXErrorStyle \nwithXErrorStyle \n\n Apply styling to the xError(s) of the chart as Object\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withX_Axis","title":"Chart.withX_Axis","content":"Chart.withX_Axis \nwithX_Axis \n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withX_AxisRangeSlider","title":"Chart.withX_AxisRangeSlider","content":"Chart.withX_AxisRangeSlider \nwithX_AxisRangeSlider \n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withX_AxisStyle","title":"Chart.withX_AxisStyle","content":"Chart.withX_AxisStyle \nwithX_AxisStyle \n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withYAxis","title":"Chart.withYAxis","content":"Chart.withYAxis \nwithYAxis \n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withYAxisStyle","title":"Chart.withYAxisStyle","content":"Chart.withYAxisStyle \nwithYAxisStyle \n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withYError","title":"Chart.withYError","content":"Chart.withYError \nwithYError \n\n Apply styling to the yError(s) of the chart as Object\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withYErrorStyle","title":"Chart.withYErrorStyle","content":"Chart.withYErrorStyle \nwithYErrorStyle \n\n Apply styling to the yError(s) of the chart as Object\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withY_Axis","title":"Chart.withY_Axis","content":"Chart.withY_Axis \nwithY_Axis \n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withY_AxisStyle","title":"Chart.withY_AxisStyle","content":"Chart.withY_AxisStyle \nwithY_AxisStyle \n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withZAxis","title":"Chart.withZAxis","content":"Chart.withZAxis \nwithZAxis \n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withZAxisStyle","title":"Chart.withZAxisStyle","content":"Chart.withZAxisStyle \nwithZAxisStyle \n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withZError","title":"Chart.withZError","content":"Chart.withZError \nwithZError \n\n Apply styling to the zError(s) of the chart as Object\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withZErrorStyle","title":"Chart.withZErrorStyle","content":"Chart.withZErrorStyle \nwithZErrorStyle \n\n Apply styling to the zError(s) of the chart as Object\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withZ_Axis","title":"Chart.withZ_Axis","content":"Chart.withZ_Axis \nwithZ_Axis \n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withZ_AxisStyle","title":"Chart.withZ_AxisStyle","content":"Chart.withZ_AxisStyle \nwithZ_AxisStyle \n"},{"uri":"https://plotly.net/reference/plotly-net-chartdescription.html","title":"ChartDescription","content":"ChartDescription \n \nChartDescription.create \ncreate \nChartDescription.toHtml \ntoHtml \nChartDescription.Heading \nHeading \nChartDescription.Text \nText"},{"uri":"https://plotly.net/reference/plotly-net-chartdescription.html#create","title":"ChartDescription.create","content":"ChartDescription.create \ncreate \n"},{"uri":"https://plotly.net/reference/plotly-net-chartdescription.html#toHtml","title":"ChartDescription.toHtml","content":"ChartDescription.toHtml \ntoHtml \n"},{"uri":"https://plotly.net/reference/plotly-net-chartdescription.html#Heading","title":"ChartDescription.Heading","content":"ChartDescription.Heading \nHeading \n"},{"uri":"https://plotly.net/reference/plotly-net-chartdescription.html#Text","title":"ChartDescription.Text","content":"ChartDescription.Text \nText \n"},{"uri":"https://plotly.net/reference/plotly-net-color.html","title":"Color","content":"Color \n\n Plotly color can be a single color, a sequence of colors, or a sequence of numeric values referencing the color of the colorscale obj\n \nColor.Value \nValue \nColor.fromARGB \nfromARGB \nColor.fromColorScaleValues \nfromColorScaleValues \nColor.fromColors \nfromColors \nColor.fromHex \nfromHex \nColor.fromKeyword \nfromKeyword \nColor.fromRGB \nfromRGB \nColor.fromString \nfromString"},{"uri":"https://plotly.net/reference/plotly-net-color.html#Value","title":"Color.Value","content":"Color.Value \nValue \n\n extractor\n"},{"uri":"https://plotly.net/reference/plotly-net-color.html#fromARGB","title":"Color.fromARGB","content":"Color.fromARGB \nfromARGB \n\n Creates a Color from the four ARGB component (alpha, red, green, and blue) values.\n"},{"uri":"https://plotly.net/reference/plotly-net-color.html#fromColorScaleValues","title":"Color.fromColorScaleValues","content":"Color.fromColorScaleValues \nfromColorScaleValues \n\n Values are interpreted relative to color scale\n"},{"uri":"https://plotly.net/reference/plotly-net-color.html#fromColors","title":"Color.fromColors","content":"Color.fromColors \nfromColors \n\n Color \n"},{"uri":"https://plotly.net/reference/plotly-net-color.html#fromHex","title":"Color.fromHex","content":"Color.fromHex \nfromHex \n\n Color from web color (#FFFFFF) or hex representataion (FFFFFF) / (0xFFFFFF)\n"},{"uri":"https://plotly.net/reference/plotly-net-color.html#fromKeyword","title":"Color.fromKeyword","content":"Color.fromKeyword \nfromKeyword \n\n Color from a standard web color keyword, e.g. White -\u003E \u0022white\u0022 (see //https://www.w3.org/TR/2011/REC-SVG11-20110816/types.html#ColorKeywords)\n"},{"uri":"https://plotly.net/reference/plotly-net-color.html#fromRGB","title":"Color.fromRGB","content":"Color.fromRGB \nfromRGB \n\n Creates a Color from the specified color values (red, green, and blue).\n The alpha value is implicitly 1. (fully opaque). \n"},{"uri":"https://plotly.net/reference/plotly-net-color.html#fromString","title":"Color.fromString","content":"Color.fromString \nfromString \n\n Color from a raw string input, no check for correctness performed\n"},{"uri":"https://plotly.net/reference/plotly-net-colorconverter.html","title":"ColorConverter","content":"ColorConverter \n \nColorConverter.( .ctor ) \n( .ctor )"},{"uri":"https://plotly.net/reference/plotly-net-colorconverter.html#( .ctor )","title":"ColorConverter.( .ctor )","content":"ColorConverter.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html","title":"ColorKeyword","content":"ColorKeyword \n\nhttps://www.w3.org/TR/2011/REC-SVG11-20110816/types.html#ColorKeywords\n\nW3C Recognized color keyword names\n \nColorKeyword.ofKeyWord \nofKeyWord \nColorKeyword.toRGB \ntoRGB \nColorKeyword.AliceBlue \nAliceBlue \nColorKeyword.AntiqueWhite \nAntiqueWhite \nColorKeyword.Aqua \nAqua \nColorKeyword.Aquamarine \nAquamarine \nColorKeyword.Azure \nAzure \nColorKeyword.Beige \nBeige \nColorKeyword.Bisque \nBisque \nColorKeyword.Black \nBlack \nColorKeyword.BlanchedAlmond \nBlanchedAlmond \nColorKeyword.Blue \nBlue \nColorKeyword.Blueviolet \nBlueviolet \nColorKeyword.Brown \nBrown \nColorKeyword.BurlyWood \nBurlyWood \nColorKeyword.CadetBlue \nCadetBlue \nColorKeyword.Chartreuse \nChartreuse \nColorKeyword.Chocolate \nChocolate \nColorKeyword.Coral \nCoral \nColorKeyword.CornflowerBlue \nCornflowerBlue \nColorKeyword.CornSilk \nCornSilk \nColorKeyword.Crimson \nCrimson \nColorKeyword.Cyan \nCyan \nColorKeyword.DarkBlue \nDarkBlue \nColorKeyword.DarkCyan \nDarkCyan \nColorKeyword.DarkGoldenRod \nDarkGoldenRod \nColorKeyword.DarkGray \nDarkGray \nColorKeyword.DarkGreen \nDarkGreen \nColorKeyword.DarkGrey \nDarkGrey \nColorKeyword.DarkKhaki \nDarkKhaki \nColorKeyword.DarkMagenta \nDarkMagenta \nColorKeyword.Darkolivegreen \nDarkolivegreen \nColorKeyword.DarkOrange \nDarkOrange \nColorKeyword.DarkOrchid \nDarkOrchid \nColorKeyword.DarkRed \nDarkRed \nColorKeyword.DarkSalmon \nDarkSalmon \nColorKeyword.DarkSeaGreen \nDarkSeaGreen \nColorKeyword.DarkSlateBlue \nDarkSlateBlue \nColorKeyword.DarkSlateGray \nDarkSlateGray \nColorKeyword.DarkSlateGrey \nDarkSlateGrey \nColorKeyword.DarkTurquoise \nDarkTurquoise \nColorKeyword.DarkViolet \nDarkViolet \nColorKeyword.DeepPink \nDeepPink \nColorKeyword.DeepSkyBlue \nDeepSkyBlue \nColorKeyword.DimGray \nDimGray \nColorKeyword.DimGrey \nDimGrey \nColorKeyword.DodgerBlue \nDodgerBlue \nColorKeyword.FireBrick \nFireBrick \nColorKeyword.FloralWhite \nFloralWhite \nColorKeyword.ForestGreen \nForestGreen \nColorKeyword.Fuchsia \nFuchsia \nColorKeyword.Gainsboro \nGainsboro \nColorKeyword.GhostWhite \nGhostWhite \nColorKeyword.Gold \nGold \nColorKeyword.GoldenRod \nGoldenRod \nColorKeyword.Gray \nGray \nColorKeyword.Grey \nGrey \nColorKeyword.Green \nGreen \nColorKeyword.GreenYellow \nGreenYellow \nColorKeyword.Honeydew \nHoneydew \nColorKeyword.Hotpink \nHotpink \nColorKeyword.IndianRed \nIndianRed \nColorKeyword.Indigo \nIndigo \nColorKeyword.Ivory \nIvory \nColorKeyword.Khaki \nKhaki \nColorKeyword.Lavender \nLavender \nColorKeyword.LavenderBlush \nLavenderBlush \nColorKeyword.LawnGreen \nLawnGreen \nColorKeyword.LemonChiffon \nLemonChiffon \nColorKeyword.LightBlue \nLightBlue \nColorKeyword.LightCoral \nLightCoral \nColorKeyword.LightCyan \nLightCyan \nColorKeyword.LightGoldenRodYellow \nLightGoldenRodYellow \nColorKeyword.LightGray \nLightGray \nColorKeyword.LightGreen \nLightGreen \nColorKeyword.LightGrey \nLightGrey \nColorKeyword.LightPink \nLightPink \nColorKeyword.LightAalmon \nLightAalmon \nColorKeyword.LightAeaGreen \nLightAeaGreen \nColorKeyword.LightAkyBlue \nLightAkyBlue \nColorKeyword.LightAlateGray \nLightAlateGray \nColorKeyword.LightslateGrey \nLightslateGrey \nColorKeyword.LightSteelBlue \nLightSteelBlue \nColorKeyword.LightYellow \nLightYellow \nColorKeyword.Lime \nLime \nColorKeyword.Limegreen \nLimegreen \nColorKeyword.Linen \nLinen \nColorKeyword.Magenta \nMagenta \nColorKeyword.Maroon \nMaroon \nColorKeyword.MediumAquamarine \nMediumAquamarine \nColorKeyword.MediumBlue \nMediumBlue \nColorKeyword.MediumOrchid \nMediumOrchid \nColorKeyword.MediumPurple \nMediumPurple \nColorKeyword.MediumSeaGreen \nMediumSeaGreen \nColorKeyword.MediumSlateBlue \nMediumSlateBlue \nColorKeyword.MediumSpringGreen \nMediumSpringGreen \nColorKeyword.MediumTurquoise \nMediumTurquoise \nColorKeyword.MediumVioletRed \nMediumVioletRed \nColorKeyword.MidnightBlue \nMidnightBlue \nColorKeyword.MintCream \nMintCream \nColorKeyword.MistyRose \nMistyRose \nColorKeyword.Moccasin \nMoccasin \nColorKeyword.NavajoWhite \nNavajoWhite \nColorKeyword.Navy \nNavy \nColorKeyword.OldLace \nOldLace \nColorKeyword.Olive \nOlive \nColorKeyword.OliveDrab \nOliveDrab \nColorKeyword.Orange \nOrange \nColorKeyword.OrangeRed \nOrangeRed \nColorKeyword.Orchid \nOrchid \nColorKeyword.PaleGoldenRod \nPaleGoldenRod \nColorKeyword.PaleGreen \nPaleGreen \nColorKeyword.PaleTurquoise \nPaleTurquoise \nColorKeyword.PaleVioletRed \nPaleVioletRed \nColorKeyword.PapayaWhip \nPapayaWhip \nColorKeyword.PeachPuff \nPeachPuff \nColorKeyword.Peru \nPeru \nColorKeyword.Pink \nPink \nColorKeyword.Plum \nPlum \nColorKeyword.PowderBlue \nPowderBlue \nColorKeyword.Purple \nPurple \nColorKeyword.Red \nRed \nColorKeyword.RosyBrown \nRosyBrown \nColorKeyword.RoyalBlue \nRoyalBlue \nColorKeyword.SaddleBrown \nSaddleBrown \nColorKeyword.Salmon \nSalmon \nColorKeyword.SandyBrown \nSandyBrown \nColorKeyword.SeaGreen \nSeaGreen \nColorKeyword.SeaShell \nSeaShell \nColorKeyword.Sienna \nSienna \nColorKeyword.Silver \nSilver \nColorKeyword.Skyblue \nSkyblue \nColorKeyword.SlateBlue \nSlateBlue \nColorKeyword.SlateGray \nSlateGray \nColorKeyword.SlateGrey \nSlateGrey \nColorKeyword.Snow \nSnow \nColorKeyword.SpringGreen \nSpringGreen \nColorKeyword.SteelBlue \nSteelBlue \nColorKeyword.Tan \nTan \nColorKeyword.Teal \nTeal \nColorKeyword.Thistle \nThistle \nColorKeyword.Tomato \nTomato \nColorKeyword.Turquoise \nTurquoise \nColorKeyword.Violet \nViolet \nColorKeyword.Wheat \nWheat \nColorKeyword.White \nWhite \nColorKeyword.WhiteSmoke \nWhiteSmoke \nColorKeyword.Yellow \nYellow \nColorKeyword.YellowGreen \nYellowGreen"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#ofKeyWord","title":"ColorKeyword.ofKeyWord","content":"ColorKeyword.ofKeyWord \nofKeyWord \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#toRGB","title":"ColorKeyword.toRGB","content":"ColorKeyword.toRGB \ntoRGB \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#AliceBlue","title":"ColorKeyword.AliceBlue","content":"ColorKeyword.AliceBlue \nAliceBlue \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#AntiqueWhite","title":"ColorKeyword.AntiqueWhite","content":"ColorKeyword.AntiqueWhite \nAntiqueWhite \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Aqua","title":"ColorKeyword.Aqua","content":"ColorKeyword.Aqua \nAqua \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Aquamarine","title":"ColorKeyword.Aquamarine","content":"ColorKeyword.Aquamarine \nAquamarine \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Azure","title":"ColorKeyword.Azure","content":"ColorKeyword.Azure \nAzure \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Beige","title":"ColorKeyword.Beige","content":"ColorKeyword.Beige \nBeige \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Bisque","title":"ColorKeyword.Bisque","content":"ColorKeyword.Bisque \nBisque \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Black","title":"ColorKeyword.Black","content":"ColorKeyword.Black \nBlack \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#BlanchedAlmond","title":"ColorKeyword.BlanchedAlmond","content":"ColorKeyword.BlanchedAlmond \nBlanchedAlmond \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Blue","title":"ColorKeyword.Blue","content":"ColorKeyword.Blue \nBlue \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Blueviolet","title":"ColorKeyword.Blueviolet","content":"ColorKeyword.Blueviolet \nBlueviolet \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Brown","title":"ColorKeyword.Brown","content":"ColorKeyword.Brown \nBrown \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#BurlyWood","title":"ColorKeyword.BurlyWood","content":"ColorKeyword.BurlyWood \nBurlyWood \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#CadetBlue","title":"ColorKeyword.CadetBlue","content":"ColorKeyword.CadetBlue \nCadetBlue \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Chartreuse","title":"ColorKeyword.Chartreuse","content":"ColorKeyword.Chartreuse \nChartreuse \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Chocolate","title":"ColorKeyword.Chocolate","content":"ColorKeyword.Chocolate \nChocolate \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Coral","title":"ColorKeyword.Coral","content":"ColorKeyword.Coral \nCoral \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#CornflowerBlue","title":"ColorKeyword.CornflowerBlue","content":"ColorKeyword.CornflowerBlue \nCornflowerBlue \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#CornSilk","title":"ColorKeyword.CornSilk","content":"ColorKeyword.CornSilk \nCornSilk \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Crimson","title":"ColorKeyword.Crimson","content":"ColorKeyword.Crimson \nCrimson \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Cyan","title":"ColorKeyword.Cyan","content":"ColorKeyword.Cyan \nCyan \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#DarkBlue","title":"ColorKeyword.DarkBlue","content":"ColorKeyword.DarkBlue \nDarkBlue \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#DarkCyan","title":"ColorKeyword.DarkCyan","content":"ColorKeyword.DarkCyan \nDarkCyan \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#DarkGoldenRod","title":"ColorKeyword.DarkGoldenRod","content":"ColorKeyword.DarkGoldenRod \nDarkGoldenRod \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#DarkGray","title":"ColorKeyword.DarkGray","content":"ColorKeyword.DarkGray \nDarkGray \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#DarkGreen","title":"ColorKeyword.DarkGreen","content":"ColorKeyword.DarkGreen \nDarkGreen \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#DarkGrey","title":"ColorKeyword.DarkGrey","content":"ColorKeyword.DarkGrey \nDarkGrey \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#DarkKhaki","title":"ColorKeyword.DarkKhaki","content":"ColorKeyword.DarkKhaki \nDarkKhaki \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#DarkMagenta","title":"ColorKeyword.DarkMagenta","content":"ColorKeyword.DarkMagenta \nDarkMagenta \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Darkolivegreen","title":"ColorKeyword.Darkolivegreen","content":"ColorKeyword.Darkolivegreen \nDarkolivegreen \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#DarkOrange","title":"ColorKeyword.DarkOrange","content":"ColorKeyword.DarkOrange \nDarkOrange \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#DarkOrchid","title":"ColorKeyword.DarkOrchid","content":"ColorKeyword.DarkOrchid \nDarkOrchid \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#DarkRed","title":"ColorKeyword.DarkRed","content":"ColorKeyword.DarkRed \nDarkRed \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#DarkSalmon","title":"ColorKeyword.DarkSalmon","content":"ColorKeyword.DarkSalmon \nDarkSalmon \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#DarkSeaGreen","title":"ColorKeyword.DarkSeaGreen","content":"ColorKeyword.DarkSeaGreen \nDarkSeaGreen \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#DarkSlateBlue","title":"ColorKeyword.DarkSlateBlue","content":"ColorKeyword.DarkSlateBlue \nDarkSlateBlue \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#DarkSlateGray","title":"ColorKeyword.DarkSlateGray","content":"ColorKeyword.DarkSlateGray \nDarkSlateGray \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#DarkSlateGrey","title":"ColorKeyword.DarkSlateGrey","content":"ColorKeyword.DarkSlateGrey \nDarkSlateGrey \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#DarkTurquoise","title":"ColorKeyword.DarkTurquoise","content":"ColorKeyword.DarkTurquoise \nDarkTurquoise \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#DarkViolet","title":"ColorKeyword.DarkViolet","content":"ColorKeyword.DarkViolet \nDarkViolet \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#DeepPink","title":"ColorKeyword.DeepPink","content":"ColorKeyword.DeepPink \nDeepPink \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#DeepSkyBlue","title":"ColorKeyword.DeepSkyBlue","content":"ColorKeyword.DeepSkyBlue \nDeepSkyBlue \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#DimGray","title":"ColorKeyword.DimGray","content":"ColorKeyword.DimGray \nDimGray \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#DimGrey","title":"ColorKeyword.DimGrey","content":"ColorKeyword.DimGrey \nDimGrey \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#DodgerBlue","title":"ColorKeyword.DodgerBlue","content":"ColorKeyword.DodgerBlue \nDodgerBlue \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#FireBrick","title":"ColorKeyword.FireBrick","content":"ColorKeyword.FireBrick \nFireBrick \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#FloralWhite","title":"ColorKeyword.FloralWhite","content":"ColorKeyword.FloralWhite \nFloralWhite \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#ForestGreen","title":"ColorKeyword.ForestGreen","content":"ColorKeyword.ForestGreen \nForestGreen \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Fuchsia","title":"ColorKeyword.Fuchsia","content":"ColorKeyword.Fuchsia \nFuchsia \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Gainsboro","title":"ColorKeyword.Gainsboro","content":"ColorKeyword.Gainsboro \nGainsboro \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#GhostWhite","title":"ColorKeyword.GhostWhite","content":"ColorKeyword.GhostWhite \nGhostWhite \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Gold","title":"ColorKeyword.Gold","content":"ColorKeyword.Gold \nGold \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#GoldenRod","title":"ColorKeyword.GoldenRod","content":"ColorKeyword.GoldenRod \nGoldenRod \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Gray","title":"ColorKeyword.Gray","content":"ColorKeyword.Gray \nGray \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Grey","title":"ColorKeyword.Grey","content":"ColorKeyword.Grey \nGrey \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Green","title":"ColorKeyword.Green","content":"ColorKeyword.Green \nGreen \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#GreenYellow","title":"ColorKeyword.GreenYellow","content":"ColorKeyword.GreenYellow \nGreenYellow \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Honeydew","title":"ColorKeyword.Honeydew","content":"ColorKeyword.Honeydew \nHoneydew \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Hotpink","title":"ColorKeyword.Hotpink","content":"ColorKeyword.Hotpink \nHotpink \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#IndianRed","title":"ColorKeyword.IndianRed","content":"ColorKeyword.IndianRed \nIndianRed \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Indigo","title":"ColorKeyword.Indigo","content":"ColorKeyword.Indigo \nIndigo \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Ivory","title":"ColorKeyword.Ivory","content":"ColorKeyword.Ivory \nIvory \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Khaki","title":"ColorKeyword.Khaki","content":"ColorKeyword.Khaki \nKhaki \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Lavender","title":"ColorKeyword.Lavender","content":"ColorKeyword.Lavender \nLavender \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#LavenderBlush","title":"ColorKeyword.LavenderBlush","content":"ColorKeyword.LavenderBlush \nLavenderBlush \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#LawnGreen","title":"ColorKeyword.LawnGreen","content":"ColorKeyword.LawnGreen \nLawnGreen \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#LemonChiffon","title":"ColorKeyword.LemonChiffon","content":"ColorKeyword.LemonChiffon \nLemonChiffon \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#LightBlue","title":"ColorKeyword.LightBlue","content":"ColorKeyword.LightBlue \nLightBlue \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#LightCoral","title":"ColorKeyword.LightCoral","content":"ColorKeyword.LightCoral \nLightCoral \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#LightCyan","title":"ColorKeyword.LightCyan","content":"ColorKeyword.LightCyan \nLightCyan \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#LightGoldenRodYellow","title":"ColorKeyword.LightGoldenRodYellow","content":"ColorKeyword.LightGoldenRodYellow \nLightGoldenRodYellow \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#LightGray","title":"ColorKeyword.LightGray","content":"ColorKeyword.LightGray \nLightGray \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#LightGreen","title":"ColorKeyword.LightGreen","content":"ColorKeyword.LightGreen \nLightGreen \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#LightGrey","title":"ColorKeyword.LightGrey","content":"ColorKeyword.LightGrey \nLightGrey \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#LightPink","title":"ColorKeyword.LightPink","content":"ColorKeyword.LightPink \nLightPink \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#LightAalmon","title":"ColorKeyword.LightAalmon","content":"ColorKeyword.LightAalmon \nLightAalmon \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#LightAeaGreen","title":"ColorKeyword.LightAeaGreen","content":"ColorKeyword.LightAeaGreen \nLightAeaGreen \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#LightAkyBlue","title":"ColorKeyword.LightAkyBlue","content":"ColorKeyword.LightAkyBlue \nLightAkyBlue \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#LightAlateGray","title":"ColorKeyword.LightAlateGray","content":"ColorKeyword.LightAlateGray \nLightAlateGray \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#LightslateGrey","title":"ColorKeyword.LightslateGrey","content":"ColorKeyword.LightslateGrey \nLightslateGrey \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#LightSteelBlue","title":"ColorKeyword.LightSteelBlue","content":"ColorKeyword.LightSteelBlue \nLightSteelBlue \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#LightYellow","title":"ColorKeyword.LightYellow","content":"ColorKeyword.LightYellow \nLightYellow \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Lime","title":"ColorKeyword.Lime","content":"ColorKeyword.Lime \nLime \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Limegreen","title":"ColorKeyword.Limegreen","content":"ColorKeyword.Limegreen \nLimegreen \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Linen","title":"ColorKeyword.Linen","content":"ColorKeyword.Linen \nLinen \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Magenta","title":"ColorKeyword.Magenta","content":"ColorKeyword.Magenta \nMagenta \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Maroon","title":"ColorKeyword.Maroon","content":"ColorKeyword.Maroon \nMaroon \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#MediumAquamarine","title":"ColorKeyword.MediumAquamarine","content":"ColorKeyword.MediumAquamarine \nMediumAquamarine \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#MediumBlue","title":"ColorKeyword.MediumBlue","content":"ColorKeyword.MediumBlue \nMediumBlue \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#MediumOrchid","title":"ColorKeyword.MediumOrchid","content":"ColorKeyword.MediumOrchid \nMediumOrchid \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#MediumPurple","title":"ColorKeyword.MediumPurple","content":"ColorKeyword.MediumPurple \nMediumPurple \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#MediumSeaGreen","title":"ColorKeyword.MediumSeaGreen","content":"ColorKeyword.MediumSeaGreen \nMediumSeaGreen \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#MediumSlateBlue","title":"ColorKeyword.MediumSlateBlue","content":"ColorKeyword.MediumSlateBlue \nMediumSlateBlue \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#MediumSpringGreen","title":"ColorKeyword.MediumSpringGreen","content":"ColorKeyword.MediumSpringGreen \nMediumSpringGreen \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#MediumTurquoise","title":"ColorKeyword.MediumTurquoise","content":"ColorKeyword.MediumTurquoise \nMediumTurquoise \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#MediumVioletRed","title":"ColorKeyword.MediumVioletRed","content":"ColorKeyword.MediumVioletRed \nMediumVioletRed \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#MidnightBlue","title":"ColorKeyword.MidnightBlue","content":"ColorKeyword.MidnightBlue \nMidnightBlue \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#MintCream","title":"ColorKeyword.MintCream","content":"ColorKeyword.MintCream \nMintCream \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#MistyRose","title":"ColorKeyword.MistyRose","content":"ColorKeyword.MistyRose \nMistyRose \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Moccasin","title":"ColorKeyword.Moccasin","content":"ColorKeyword.Moccasin \nMoccasin \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#NavajoWhite","title":"ColorKeyword.NavajoWhite","content":"ColorKeyword.NavajoWhite \nNavajoWhite \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Navy","title":"ColorKeyword.Navy","content":"ColorKeyword.Navy \nNavy \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#OldLace","title":"ColorKeyword.OldLace","content":"ColorKeyword.OldLace \nOldLace \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Olive","title":"ColorKeyword.Olive","content":"ColorKeyword.Olive \nOlive \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#OliveDrab","title":"ColorKeyword.OliveDrab","content":"ColorKeyword.OliveDrab \nOliveDrab \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Orange","title":"ColorKeyword.Orange","content":"ColorKeyword.Orange \nOrange \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#OrangeRed","title":"ColorKeyword.OrangeRed","content":"ColorKeyword.OrangeRed \nOrangeRed \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Orchid","title":"ColorKeyword.Orchid","content":"ColorKeyword.Orchid \nOrchid \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#PaleGoldenRod","title":"ColorKeyword.PaleGoldenRod","content":"ColorKeyword.PaleGoldenRod \nPaleGoldenRod \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#PaleGreen","title":"ColorKeyword.PaleGreen","content":"ColorKeyword.PaleGreen \nPaleGreen \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#PaleTurquoise","title":"ColorKeyword.PaleTurquoise","content":"ColorKeyword.PaleTurquoise \nPaleTurquoise \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#PaleVioletRed","title":"ColorKeyword.PaleVioletRed","content":"ColorKeyword.PaleVioletRed \nPaleVioletRed \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#PapayaWhip","title":"ColorKeyword.PapayaWhip","content":"ColorKeyword.PapayaWhip \nPapayaWhip \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#PeachPuff","title":"ColorKeyword.PeachPuff","content":"ColorKeyword.PeachPuff \nPeachPuff \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Peru","title":"ColorKeyword.Peru","content":"ColorKeyword.Peru \nPeru \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Pink","title":"ColorKeyword.Pink","content":"ColorKeyword.Pink \nPink \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Plum","title":"ColorKeyword.Plum","content":"ColorKeyword.Plum \nPlum \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#PowderBlue","title":"ColorKeyword.PowderBlue","content":"ColorKeyword.PowderBlue \nPowderBlue \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Purple","title":"ColorKeyword.Purple","content":"ColorKeyword.Purple \nPurple \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Red","title":"ColorKeyword.Red","content":"ColorKeyword.Red \nRed \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#RosyBrown","title":"ColorKeyword.RosyBrown","content":"ColorKeyword.RosyBrown \nRosyBrown \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#RoyalBlue","title":"ColorKeyword.RoyalBlue","content":"ColorKeyword.RoyalBlue \nRoyalBlue \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#SaddleBrown","title":"ColorKeyword.SaddleBrown","content":"ColorKeyword.SaddleBrown \nSaddleBrown \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Salmon","title":"ColorKeyword.Salmon","content":"ColorKeyword.Salmon \nSalmon \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#SandyBrown","title":"ColorKeyword.SandyBrown","content":"ColorKeyword.SandyBrown \nSandyBrown \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#SeaGreen","title":"ColorKeyword.SeaGreen","content":"ColorKeyword.SeaGreen \nSeaGreen \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#SeaShell","title":"ColorKeyword.SeaShell","content":"ColorKeyword.SeaShell \nSeaShell \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Sienna","title":"ColorKeyword.Sienna","content":"ColorKeyword.Sienna \nSienna \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Silver","title":"ColorKeyword.Silver","content":"ColorKeyword.Silver \nSilver \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Skyblue","title":"ColorKeyword.Skyblue","content":"ColorKeyword.Skyblue \nSkyblue \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#SlateBlue","title":"ColorKeyword.SlateBlue","content":"ColorKeyword.SlateBlue \nSlateBlue \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#SlateGray","title":"ColorKeyword.SlateGray","content":"ColorKeyword.SlateGray \nSlateGray \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#SlateGrey","title":"ColorKeyword.SlateGrey","content":"ColorKeyword.SlateGrey \nSlateGrey \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Snow","title":"ColorKeyword.Snow","content":"ColorKeyword.Snow \nSnow \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#SpringGreen","title":"ColorKeyword.SpringGreen","content":"ColorKeyword.SpringGreen \nSpringGreen \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#SteelBlue","title":"ColorKeyword.SteelBlue","content":"ColorKeyword.SteelBlue \nSteelBlue \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Tan","title":"ColorKeyword.Tan","content":"ColorKeyword.Tan \nTan \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Teal","title":"ColorKeyword.Teal","content":"ColorKeyword.Teal \nTeal \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Thistle","title":"ColorKeyword.Thistle","content":"ColorKeyword.Thistle \nThistle \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Tomato","title":"ColorKeyword.Tomato","content":"ColorKeyword.Tomato \nTomato \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Turquoise","title":"ColorKeyword.Turquoise","content":"ColorKeyword.Turquoise \nTurquoise \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Violet","title":"ColorKeyword.Violet","content":"ColorKeyword.Violet \nViolet \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Wheat","title":"ColorKeyword.Wheat","content":"ColorKeyword.Wheat \nWheat \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#White","title":"ColorKeyword.White","content":"ColorKeyword.White \nWhite \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#WhiteSmoke","title":"ColorKeyword.WhiteSmoke","content":"ColorKeyword.WhiteSmoke \nWhiteSmoke \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Yellow","title":"ColorKeyword.Yellow","content":"ColorKeyword.Yellow \nYellow \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#YellowGreen","title":"ColorKeyword.YellowGreen","content":"ColorKeyword.YellowGreen \nYellowGreen \n"},{"uri":"https://plotly.net/reference/plotly-net-config.html","title":"Config","content":"Config \n\n Config \n \nConfig.( .ctor ) \n( .ctor ) \nConfig.init \ninit \nConfig.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-config.html#( .ctor )","title":"Config.( .ctor )","content":"Config.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-config.html#init","title":"Config.init","content":"Config.init \ninit \n\n Init Legend type\n"},{"uri":"https://plotly.net/reference/plotly-net-config.html#style","title":"Config.style","content":"Config.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-displayoptions.html","title":"DisplayOptions","content":"DisplayOptions \n \nDisplayOptions.( .ctor ) \n( .ctor ) \nDisplayOptions.getReplacements \ngetReplacements \nDisplayOptions.init \ninit \nDisplayOptions.replaceHtmlPlaceholders \nreplaceHtmlPlaceholders \nDisplayOptions.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-displayoptions.html#( .ctor )","title":"DisplayOptions.( .ctor )","content":"DisplayOptions.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-displayoptions.html#getReplacements","title":"DisplayOptions.getReplacements","content":"DisplayOptions.getReplacements \ngetReplacements \n"},{"uri":"https://plotly.net/reference/plotly-net-displayoptions.html#init","title":"DisplayOptions.init","content":"DisplayOptions.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-displayoptions.html#replaceHtmlPlaceholders","title":"DisplayOptions.replaceHtmlPlaceholders","content":"DisplayOptions.replaceHtmlPlaceholders \nreplaceHtmlPlaceholders \n"},{"uri":"https://plotly.net/reference/plotly-net-displayoptions.html#style","title":"DisplayOptions.style","content":"DisplayOptions.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-font.html","title":"Font","content":"Font \n\n Font type inherits from dynamic object\n \nFont.( .ctor ) \n( .ctor ) \nFont.init \ninit \nFont.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-font.html#( .ctor )","title":"Font.( .ctor )","content":"Font.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-font.html#init","title":"Font.init","content":"Font.init \ninit \n\n Init Font()\n"},{"uri":"https://plotly.net/reference/plotly-net-font.html#style","title":"Font.style","content":"Font.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-frame.html","title":"Frame","content":"Frame \n \nFrame.( .ctor ) \n( .ctor )"},{"uri":"https://plotly.net/reference/plotly-net-frame.html#( .ctor )","title":"Frame.( .ctor )","content":"Frame.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-layout.html","title":"Layout","content":"Layout \n\n Layout \n \nLayout.( .ctor ) \n( .ctor ) \nLayout.AddGeo \nAddGeo \nLayout.AddLinearAxis \nAddLinearAxis \nLayout.AddMapbox \nAddMapbox \nLayout.GetLayoutGrid \nGetLayoutGrid \nLayout.SetLayoutGrid \nSetLayoutGrid \nLayout.UpdateGeoById \nUpdateGeoById \nLayout.UpdateLinearAxisById \nUpdateLinearAxisById \nLayout.UpdateMapboxById \nUpdateMapboxById \nLayout.addScene \naddScene \nLayout.init \ninit \nLayout.setLegend \nsetLegend \nLayout.style \nstyle \nLayout.tryGetColorAxisById \ntryGetColorAxisById \nLayout.tryGetPolarById \ntryGetPolarById \nLayout.tryGetSceneById \ntryGetSceneById \nLayout.tryGetTernaryById \ntryGetTernaryById \nLayout.updateColorAxisById \nupdateColorAxisById \nLayout.updatePolarById \nupdatePolarById \nLayout.updateSceneById \nupdateSceneById \nLayout.updateTernaryById \nupdateTernaryById"},{"uri":"https://plotly.net/reference/plotly-net-layout.html#( .ctor )","title":"Layout.( .ctor )","content":"Layout.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-layout.html#AddGeo","title":"Layout.AddGeo","content":"Layout.AddGeo \nAddGeo \n"},{"uri":"https://plotly.net/reference/plotly-net-layout.html#AddLinearAxis","title":"Layout.AddLinearAxis","content":"Layout.AddLinearAxis \nAddLinearAxis \n"},{"uri":"https://plotly.net/reference/plotly-net-layout.html#AddMapbox","title":"Layout.AddMapbox","content":"Layout.AddMapbox \nAddMapbox \n"},{"uri":"https://plotly.net/reference/plotly-net-layout.html#GetLayoutGrid","title":"Layout.GetLayoutGrid","content":"Layout.GetLayoutGrid \nGetLayoutGrid \n"},{"uri":"https://plotly.net/reference/plotly-net-layout.html#SetLayoutGrid","title":"Layout.SetLayoutGrid","content":"Layout.SetLayoutGrid \nSetLayoutGrid \n"},{"uri":"https://plotly.net/reference/plotly-net-layout.html#UpdateGeoById","title":"Layout.UpdateGeoById","content":"Layout.UpdateGeoById \nUpdateGeoById \n"},{"uri":"https://plotly.net/reference/plotly-net-layout.html#UpdateLinearAxisById","title":"Layout.UpdateLinearAxisById","content":"Layout.UpdateLinearAxisById \nUpdateLinearAxisById \n"},{"uri":"https://plotly.net/reference/plotly-net-layout.html#UpdateMapboxById","title":"Layout.UpdateMapboxById","content":"Layout.UpdateMapboxById \nUpdateMapboxById \n"},{"uri":"https://plotly.net/reference/plotly-net-layout.html#addScene","title":"Layout.addScene","content":"Layout.addScene \naddScene \n"},{"uri":"https://plotly.net/reference/plotly-net-layout.html#init","title":"Layout.init","content":"Layout.init \ninit \n\n Init Layout type\n"},{"uri":"https://plotly.net/reference/plotly-net-layout.html#setLegend","title":"Layout.setLegend","content":"Layout.setLegend \nsetLegend \n"},{"uri":"https://plotly.net/reference/plotly-net-layout.html#style","title":"Layout.style","content":"Layout.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-layout.html#tryGetColorAxisById","title":"Layout.tryGetColorAxisById","content":"Layout.tryGetColorAxisById \ntryGetColorAxisById \n"},{"uri":"https://plotly.net/reference/plotly-net-layout.html#tryGetPolarById","title":"Layout.tryGetPolarById","content":"Layout.tryGetPolarById \ntryGetPolarById \n"},{"uri":"https://plotly.net/reference/plotly-net-layout.html#tryGetSceneById","title":"Layout.tryGetSceneById","content":"Layout.tryGetSceneById \ntryGetSceneById \n"},{"uri":"https://plotly.net/reference/plotly-net-layout.html#tryGetTernaryById","title":"Layout.tryGetTernaryById","content":"Layout.tryGetTernaryById \ntryGetTernaryById \n"},{"uri":"https://plotly.net/reference/plotly-net-layout.html#updateColorAxisById","title":"Layout.updateColorAxisById","content":"Layout.updateColorAxisById \nupdateColorAxisById \n\n Updates the style of current ColorAxis object with given Id. \n If there does not exist a ColorAxis object with the given id, sets it with the given ColorAxis object\n"},{"uri":"https://plotly.net/reference/plotly-net-layout.html#updatePolarById","title":"Layout.updatePolarById","content":"Layout.updatePolarById \nupdatePolarById \n\n Updates the style of current polar object with given Id. \n If there does not exist a polar object with the given id, sets it with the given polar object\n"},{"uri":"https://plotly.net/reference/plotly-net-layout.html#updateSceneById","title":"Layout.updateSceneById","content":"Layout.updateSceneById \nupdateSceneById \n"},{"uri":"https://plotly.net/reference/plotly-net-layout.html#updateTernaryById","title":"Layout.updateTernaryById","content":"Layout.updateTernaryById \nupdateTernaryById \n\n Updates the style of current polar object with given Id. \n If there does not exist a polar object with the given id, sets it with the given polar object\n"},{"uri":"https://plotly.net/reference/plotly-net-line.html","title":"Line","content":"Line \n\n Line type inherits from dynamic object\n \nLine.( .ctor ) \n( .ctor ) \nLine.init \ninit \nLine.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-line.html#( .ctor )","title":"Line.( .ctor )","content":"Line.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-line.html#init","title":"Line.init","content":"Line.init \ninit \n\n Initialized Line object\n"},{"uri":"https://plotly.net/reference/plotly-net-line.html#style","title":"Line.style","content":"Line.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-link.html","title":"Link","content":"Link \n \nLink.Create \nCreate \nLink.Source \nSource \nLink.Target \nTarget \nLink.Value \nValue \nLink.Label \nLabel \nLink.Color \nColor \nLink.LineColor \nLineColor \nLink.LineWidth \nLineWidth"},{"uri":"https://plotly.net/reference/plotly-net-link.html#Create","title":"Link.Create","content":"Link.Create \nCreate \n"},{"uri":"https://plotly.net/reference/plotly-net-link.html#Source","title":"Link.Source","content":"Link.Source \nSource \n"},{"uri":"https://plotly.net/reference/plotly-net-link.html#Target","title":"Link.Target","content":"Link.Target \nTarget \n"},{"uri":"https://plotly.net/reference/plotly-net-link.html#Value","title":"Link.Value","content":"Link.Value \nValue \n"},{"uri":"https://plotly.net/reference/plotly-net-link.html#Label","title":"Link.Label","content":"Link.Label \nLabel \n"},{"uri":"https://plotly.net/reference/plotly-net-link.html#Color","title":"Link.Color","content":"Link.Color \nColor \n"},{"uri":"https://plotly.net/reference/plotly-net-link.html#LineColor","title":"Link.LineColor","content":"Link.LineColor \nLineColor \n"},{"uri":"https://plotly.net/reference/plotly-net-link.html#LineWidth","title":"Link.LineWidth","content":"Link.LineWidth \nLineWidth \n"},{"uri":"https://plotly.net/reference/plotly-net-node.html","title":"Node","content":"Node \n \nNode.Create \nCreate \nNode.Label \nLabel \nNode.Groups \nGroups \nNode.XRank \nXRank \nNode.YRank \nYRank \nNode.Color \nColor \nNode.LineColor \nLineColor \nNode.LineWidth \nLineWidth"},{"uri":"https://plotly.net/reference/plotly-net-node.html#Create","title":"Node.Create","content":"Node.Create \nCreate \n"},{"uri":"https://plotly.net/reference/plotly-net-node.html#Label","title":"Node.Label","content":"Node.Label \nLabel \n"},{"uri":"https://plotly.net/reference/plotly-net-node.html#Groups","title":"Node.Groups","content":"Node.Groups \nGroups \n"},{"uri":"https://plotly.net/reference/plotly-net-node.html#XRank","title":"Node.XRank","content":"Node.XRank \nXRank \n"},{"uri":"https://plotly.net/reference/plotly-net-node.html#YRank","title":"Node.YRank","content":"Node.YRank \nYRank \n"},{"uri":"https://plotly.net/reference/plotly-net-node.html#Color","title":"Node.Color","content":"Node.Color \nColor \n"},{"uri":"https://plotly.net/reference/plotly-net-node.html#LineColor","title":"Node.LineColor","content":"Node.LineColor \nLineColor \n"},{"uri":"https://plotly.net/reference/plotly-net-node.html#LineWidth","title":"Node.LineWidth","content":"Node.LineWidth \nLineWidth \n"},{"uri":"https://plotly.net/reference/plotly-net-template.html","title":"Template","content":"Template \n \nTemplate.( .ctor ) \n( .ctor ) \nTemplate.init \ninit \nTemplate.mapLayoutTemplate \nmapLayoutTemplate \nTemplate.mapTraceTemplates \nmapTraceTemplates \nTemplate.style \nstyle \nTemplate.withColorWay \nwithColorWay"},{"uri":"https://plotly.net/reference/plotly-net-template.html#( .ctor )","title":"Template.( .ctor )","content":"Template.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-template.html#init","title":"Template.init","content":"Template.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-template.html#mapLayoutTemplate","title":"Template.mapLayoutTemplate","content":"Template.mapLayoutTemplate \nmapLayoutTemplate \n"},{"uri":"https://plotly.net/reference/plotly-net-template.html#mapTraceTemplates","title":"Template.mapTraceTemplates","content":"Template.mapTraceTemplates \nmapTraceTemplates \n"},{"uri":"https://plotly.net/reference/plotly-net-template.html#style","title":"Template.style","content":"Template.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-template.html#withColorWay","title":"Template.withColorWay","content":"Template.withColorWay \nwithColorWay \n"},{"uri":"https://plotly.net/reference/plotly-net-title.html","title":"Title","content":"Title \n \nTitle.( .ctor ) \n( .ctor ) \nTitle.init \ninit \nTitle.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-title.html#( .ctor )","title":"Title.( .ctor )","content":"Title.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-title.html#init","title":"Title.init","content":"Title.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-title.html#style","title":"Title.style","content":"Title.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-trace.html","title":"Trace","content":"Trace \n\n Trace type inherits from dynamic object\n \nTrace.( .ctor ) \n( .ctor ) \nTrace.type \ntype \nTrace.tryGetTypedMember \ntryGetTypedMember"},{"uri":"https://plotly.net/reference/plotly-net-trace.html#( .ctor )","title":"Trace.( .ctor )","content":"Trace.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-trace.html#type","title":"Trace.type","content":"Trace.type \ntype \n"},{"uri":"https://plotly.net/reference/plotly-net-trace.html#tryGetTypedMember","title":"Trace.tryGetTypedMember","content":"Trace.tryGetTypedMember \ntryGetTypedMember \n"},{"uri":"https://plotly.net/reference/plotly-net-trace2d.html","title":"Trace2D","content":"Trace2D \n\n The most commonly-used kind of subplot is a two-dimensional Cartesian subplot. Traces compatible with these subplots \n support xaxis and yaxis attributes whose values must refer to corresponding objects in the layout portion of the figure. \n For example, if xaxis=\u0022x\u0022, and yaxis=\u0022y\u0022 (which is the default) then this trace is drawn on the subplot at the intersection \n of the axes configured under layout.xaxis and layout.yaxis, but if xaxis=\u0022x2\u0022 and yaxis=\u0022y3\u0022 then the trace is drawn at the \n intersection of the axes configured under layout.xaxis2 and layout.yaxis3. Note that attributes such as layout.xaxis and \n layout.xaxis2 etc do not have to be explicitly defined, in which case default values will be inferred. Multiple traces of \n different types can be drawn on the same subplot.\n\n X- and Y-axes support the type attribute, which enables them to represent continuous values (type=\u0022linear\u0022, type=\u0022log\u0022), \n temporal values (type=\u0022date\u0022) or categorical values (type=\u0022category\u0022, type=\u0022multicategory). Axes can also be overlaid on \n top of one another to create dual-axis or multiple-axis charts. 2-d cartesian subplots lend themselves very well to creating \n \u0022small multiples\u0022 figures, also known as facet or trellis plots.\n\n The following trace types are compatible with 2D-cartesian subplots via the xaxis and yaxis attributes:\n\n - scatter-like trace types: scatter and scattergl can be used to draw scatter plots, line plots and curves, time-series plots, \n bubble charts, dot plots and filled areas and also support error bars\n\n - bar, funnel, waterfall: bar-like trace types which can also be used to draw timelines and Gantt charts\n\n - histogram: an aggregating bar-like trace type\n\n - box and violin: 1-dimensional distribution-like trace types\n\n - histogram2D and histogram2Dcontour: 2-dimensional distribution-like density trace types\n\n - image, heatmap and contour: matrix trace types\n\n - ohlc and candlestick: stock-like trace types\n\n - splom: multi-dimensional scatter plots which implicitly refer to many 2-d cartesian subplots at once.\n \nTrace2D.( .ctor ) \n( .ctor ) \nTrace2D.initBar \ninitBar \nTrace2D.initBoxPlot \ninitBoxPlot \nTrace2D.initCandlestick \ninitCandlestick \nTrace2D.initContour \ninitContour \nTrace2D.initFunnel \ninitFunnel \nTrace2D.initHeatmap \ninitHeatmap \nTrace2D.initHeatmapGL \ninitHeatmapGL \nTrace2D.initHistogram \ninitHistogram \nTrace2D.initHistogram2D \ninitHistogram2D \nTrace2D.initHistogram2DContour \ninitHistogram2DContour \nTrace2D.initImage \ninitImage \nTrace2D.initOHLC \ninitOHLC \nTrace2D.initScatter \ninitScatter \nTrace2D.initScatterGL \ninitScatterGL \nTrace2D.initSplom \ninitSplom \nTrace2D.initViolin \ninitViolin \nTrace2D.initWaterfall \ninitWaterfall"},{"uri":"https://plotly.net/reference/plotly-net-trace2d.html#( .ctor )","title":"Trace2D.( .ctor )","content":"Trace2D.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-trace2d.html#initBar","title":"Trace2D.initBar","content":"Trace2D.initBar \ninitBar \n\ninitializes a trace of type \u0022bar\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-trace2d.html#initBoxPlot","title":"Trace2D.initBoxPlot","content":"Trace2D.initBoxPlot \ninitBoxPlot \n\ninitializes a trace of type \u0022box\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-trace2d.html#initCandlestick","title":"Trace2D.initCandlestick","content":"Trace2D.initCandlestick \ninitCandlestick \n\ninitializes a trace of type \u0022candlestick\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-trace2d.html#initContour","title":"Trace2D.initContour","content":"Trace2D.initContour \ninitContour \n\ninitializes a trace of type \u0022contour\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-trace2d.html#initFunnel","title":"Trace2D.initFunnel","content":"Trace2D.initFunnel \ninitFunnel \n\ninitializes a trace of type \u0022funnel\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-trace2d.html#initHeatmap","title":"Trace2D.initHeatmap","content":"Trace2D.initHeatmap \ninitHeatmap \n\ninitializes a trace of type \u0022heatmap\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-trace2d.html#initHeatmapGL","title":"Trace2D.initHeatmapGL","content":"Trace2D.initHeatmapGL \ninitHeatmapGL \n\ninitializes a trace of type \u0022heatmapgl\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-trace2d.html#initHistogram","title":"Trace2D.initHistogram","content":"Trace2D.initHistogram \ninitHistogram \n\ninitializes a trace of type \u0022histogram\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-trace2d.html#initHistogram2D","title":"Trace2D.initHistogram2D","content":"Trace2D.initHistogram2D \ninitHistogram2D \n\ninitializes a trace of type \u0022histogram2D\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-trace2d.html#initHistogram2DContour","title":"Trace2D.initHistogram2DContour","content":"Trace2D.initHistogram2DContour \ninitHistogram2DContour \n\ninitializes a trace of type \u0022histogram2Dcontour\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-trace2d.html#initImage","title":"Trace2D.initImage","content":"Trace2D.initImage \ninitImage \n\ninitializes a trace of type \u0022image\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-trace2d.html#initOHLC","title":"Trace2D.initOHLC","content":"Trace2D.initOHLC \ninitOHLC \n\ninitializes a trace of type \u0022ohlc\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-trace2d.html#initScatter","title":"Trace2D.initScatter","content":"Trace2D.initScatter \ninitScatter \n\ninitializes a trace of type \u0022scatter\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-trace2d.html#initScatterGL","title":"Trace2D.initScatterGL","content":"Trace2D.initScatterGL \ninitScatterGL \n\ninitializes a trace of type \u0022scattergl\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-trace2d.html#initSplom","title":"Trace2D.initSplom","content":"Trace2D.initSplom \ninitSplom \n\ninitializes a trace of type \u0022SPLOM\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-trace2d.html#initViolin","title":"Trace2D.initViolin","content":"Trace2D.initViolin \ninitViolin \n\ninitializes a trace of type \u0022violin\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-trace2d.html#initWaterfall","title":"Trace2D.initWaterfall","content":"Trace2D.initWaterfall \ninitWaterfall \n\ninitializes a trace of type \u0022waterfall\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-trace2dstyle.html","title":"Trace2DStyle","content":"Trace2DStyle \n \nTrace2DStyle.( .ctor ) \n( .ctor ) \nTrace2DStyle.Bar \nBar \nTrace2DStyle.BoxPlot \nBoxPlot \nTrace2DStyle.Candlestick \nCandlestick \nTrace2DStyle.Contour \nContour \nTrace2DStyle.Funnel \nFunnel \nTrace2DStyle.Heatmap \nHeatmap \nTrace2DStyle.Histogram \nHistogram \nTrace2DStyle.Histogram2D \nHistogram2D \nTrace2DStyle.Histogram2DContour \nHistogram2DContour \nTrace2DStyle.Image \nImage \nTrace2DStyle.OHLC \nOHLC \nTrace2DStyle.Scatter \nScatter \nTrace2DStyle.SetAxisAnchor \nSetAxisAnchor \nTrace2DStyle.Splom \nSplom \nTrace2DStyle.Violin \nViolin \nTrace2DStyle.Waterfall \nWaterfall"},{"uri":"https://plotly.net/reference/plotly-net-trace2dstyle.html#( .ctor )","title":"Trace2DStyle.( .ctor )","content":"Trace2DStyle.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-trace2dstyle.html#Bar","title":"Trace2DStyle.Bar","content":"Trace2DStyle.Bar \nBar \nCreate a function that applies the styles of a bar plot to a Trace object"},{"uri":"https://plotly.net/reference/plotly-net-trace2dstyle.html#BoxPlot","title":"Trace2DStyle.BoxPlot","content":"Trace2DStyle.BoxPlot \nBoxPlot \n"},{"uri":"https://plotly.net/reference/plotly-net-trace2dstyle.html#Candlestick","title":"Trace2DStyle.Candlestick","content":"Trace2DStyle.Candlestick \nCandlestick \n\n Applies the styles of candlestick plot to TraceObjects \n\n \u0060\u0060open\u0060\u0060        : Sets the open values.\n\n high            : Sets the high values.\n\n low             : Sets the low values.\n\n close           : Sets the close values.\n\n x               : Sets the x coordinates. If absent, linear coordinate will be generated.\n\n ?Increasing     : Sets the Line style of the Increasing part of the chart\n\n ?Decreasing     : Sets the Line style of the Decreasing part of the chart\n\n ?Line           : Sets the Line style of both the Decreasing and Increasing part of the chart\n\n ?WhiskerWidth   : Sets the width of the whiskers relative to the box\u0027 width. For example, with 1, the whiskers are as wide as the box(es).\n\n ?XCalendar      : Sets the calendar system to use with \u0060x\u0060 date data.\n"},{"uri":"https://plotly.net/reference/plotly-net-trace2dstyle.html#Contour","title":"Trace2DStyle.Contour","content":"Trace2DStyle.Contour \nContour \n"},{"uri":"https://plotly.net/reference/plotly-net-trace2dstyle.html#Funnel","title":"Trace2DStyle.Funnel","content":"Trace2DStyle.Funnel \nFunnel \n"},{"uri":"https://plotly.net/reference/plotly-net-trace2dstyle.html#Heatmap","title":"Trace2DStyle.Heatmap","content":"Trace2DStyle.Heatmap \nHeatmap \n"},{"uri":"https://plotly.net/reference/plotly-net-trace2dstyle.html#Histogram","title":"Trace2DStyle.Histogram","content":"Trace2DStyle.Histogram \nHistogram \n"},{"uri":"https://plotly.net/reference/plotly-net-trace2dstyle.html#Histogram2D","title":"Trace2DStyle.Histogram2D","content":"Trace2DStyle.Histogram2D \nHistogram2D \n"},{"uri":"https://plotly.net/reference/plotly-net-trace2dstyle.html#Histogram2DContour","title":"Trace2DStyle.Histogram2DContour","content":"Trace2DStyle.Histogram2DContour \nHistogram2DContour \n"},{"uri":"https://plotly.net/reference/plotly-net-trace2dstyle.html#Image","title":"Trace2DStyle.Image","content":"Trace2DStyle.Image \nImage \n"},{"uri":"https://plotly.net/reference/plotly-net-trace2dstyle.html#OHLC","title":"Trace2DStyle.OHLC","content":"Trace2DStyle.OHLC \nOHLC \n\n Applies the styles of ohlc plot to TraceObjects \n\n \u0060\u0060open\u0060\u0060    : Sets the open values.\n\n high        : Sets the high values.\n\n low         : Sets the low values.\n\n close       : Sets the close values.\n\n x           : Sets the x coordinates. If absent, linear coordinate will be generated.\n\n ?Increasing : Sets the Line style of the Increasing part of the chart\n\n ?Decreasing : Sets the Line style of the Decreasing part of the chart\n\n ?Line       : Sets the Line style of both the Decreasing and Increasing part of the chart\n\n ?Tickwidth  : Sets the width of the open/close tick marks relative to the \u0022x\u0022 minimal interval.\n\n ?XCalendar  : Sets the calendar system to use with \u0060x\u0060 date data.\n"},{"uri":"https://plotly.net/reference/plotly-net-trace2dstyle.html#Scatter","title":"Trace2DStyle.Scatter","content":"Trace2DStyle.Scatter \nScatter \n\n Create a function that applies the styles of a scatter plot to a Trace object\n "},{"uri":"https://plotly.net/reference/plotly-net-trace2dstyle.html#SetAxisAnchor","title":"Trace2DStyle.SetAxisAnchor","content":"Trace2DStyle.SetAxisAnchor \nSetAxisAnchor \n\n Sets the given axis anchor id(s) on a Trace object.\n"},{"uri":"https://plotly.net/reference/plotly-net-trace2dstyle.html#Splom","title":"Trace2DStyle.Splom","content":"Trace2DStyle.Splom \nSplom \n"},{"uri":"https://plotly.net/reference/plotly-net-trace2dstyle.html#Violin","title":"Trace2DStyle.Violin","content":"Trace2DStyle.Violin \nViolin \n"},{"uri":"https://plotly.net/reference/plotly-net-trace2dstyle.html#Waterfall","title":"Trace2DStyle.Waterfall","content":"Trace2DStyle.Waterfall \nWaterfall \n\n Applies the styles of candlestick plot to TraceObjects \n\n Parameters:\n\n x               : Sets the x coordinates.\n\n y               : Sets the y coordinates.\n\n Base            : Sets where the bar base is drawn (in position axis units).\n\n Width           : Sets the bar width (in position axis units).\n\n Measure         : An array containing types of values. By default the values are considered as \u0027relative\u0027. However; it is possible to use \u0027total\u0027 to compute the sums. Also \u0027absolute\u0027 could be applied to reset the computed total or to declare an initial value where needed.\n\n Orientation     : Sets the orientation of the bars. With \u0022v\u0022 (\u0022h\u0022), the value of the each bar spans along the vertical (horizontal).\n\n Connector       : Sets the styling of the connector lines\n\n AlignmentGroup  : Set several traces linked to the same position axis or matching axes to the same alignmentgroup. This controls whether bars compute their positional range dependently or independently.\n\n OffsetGroup     : Set several traces linked to the same position axis or matching axes to the same offsetgroup where bars of the same position coordinate will line up.\n\n Offset          : Shifts the position where the bar is drawn (in position axis units). In \u0022group\u0022 barmode, traces that set \u0022offset\u0022 will be excluded and drawn in \u0022overlay\u0022 mode instead.\n"},{"uri":"https://plotly.net/reference/plotly-net-trace3d.html","title":"Trace3D","content":"Trace3D \n\n Traces for 3D subplots, using layout.scene as anchors.\n\n These trace types are compatible with 3D subplots via the scene attribute, which contains special camera controls:\n\n- scatter3d, which can be used to draw individual markers, 3d bubble charts and lines and curves\n\n- surface and mesh: 3d surface trace types\n\n- cone and streamtube: 3d vector field trace types\n\n- volume and isosurface: 3d volume trace types\n \nTrace3D.( .ctor ) \n( .ctor ) \nTrace3D.initCone \ninitCone \nTrace3D.initIsoSurface \ninitIsoSurface \nTrace3D.initMesh3d \ninitMesh3d \nTrace3D.initScatter3d \ninitScatter3d \nTrace3D.initStreamTube \ninitStreamTube \nTrace3D.initSurface \ninitSurface \nTrace3D.initVolume \ninitVolume"},{"uri":"https://plotly.net/reference/plotly-net-trace3d.html#( .ctor )","title":"Trace3D.( .ctor )","content":"Trace3D.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-trace3d.html#initCone","title":"Trace3D.initCone","content":"Trace3D.initCone \ninitCone \n\ninitializes a trace of type \u0022cone\u0022 applying the givin trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-trace3d.html#initIsoSurface","title":"Trace3D.initIsoSurface","content":"Trace3D.initIsoSurface \ninitIsoSurface \n\ninitializes a trace of type \u0022isosurface\u0022 applying the givin trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-trace3d.html#initMesh3d","title":"Trace3D.initMesh3d","content":"Trace3D.initMesh3d \ninitMesh3d \n\ninitializes a trace of type \u0022mesh3d\u0022 applying the givin trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-trace3d.html#initScatter3d","title":"Trace3D.initScatter3d","content":"Trace3D.initScatter3d \ninitScatter3d \n\ninitializes a trace of type \u0022scatter3d\u0022 applying the givin trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-trace3d.html#initStreamTube","title":"Trace3D.initStreamTube","content":"Trace3D.initStreamTube \ninitStreamTube \n\ninitializes a trace of type \u0022streamtube\u0022 applying the givin trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-trace3d.html#initSurface","title":"Trace3D.initSurface","content":"Trace3D.initSurface \ninitSurface \n\ninitializes a trace of type \u0022surface\u0022 applying the givin trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-trace3d.html#initVolume","title":"Trace3D.initVolume","content":"Trace3D.initVolume \ninitVolume \n\ninitializes a trace of type \u0022volume\u0022 applying the givin trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-trace3dstyle.html","title":"Trace3DStyle","content":"Trace3DStyle \n\n Functions provide the styling of the Chart objects\n \nTrace3DStyle.( .ctor ) \n( .ctor ) \nTrace3DStyle.Cone \nCone \nTrace3DStyle.IsoSurface \nIsoSurface \nTrace3DStyle.Mesh3d \nMesh3d \nTrace3DStyle.Scatter3d \nScatter3d \nTrace3DStyle.SetScene \nSetScene \nTrace3DStyle.StreamTube \nStreamTube \nTrace3DStyle.Surface \nSurface \nTrace3DStyle.Volume \nVolume"},{"uri":"https://plotly.net/reference/plotly-net-trace3dstyle.html#( .ctor )","title":"Trace3DStyle.( .ctor )","content":"Trace3DStyle.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-trace3dstyle.html#Cone","title":"Trace3DStyle.Cone","content":"Trace3DStyle.Cone \nCone \n\n Applies the style parameters of the cone chart to the given trace\n "},{"uri":"https://plotly.net/reference/plotly-net-trace3dstyle.html#IsoSurface","title":"Trace3DStyle.IsoSurface","content":"Trace3DStyle.IsoSurface \nIsoSurface \n\n Applies the style parameters of the isosurface chart to the given trace\n "},{"uri":"https://plotly.net/reference/plotly-net-trace3dstyle.html#Mesh3d","title":"Trace3DStyle.Mesh3d","content":"Trace3DStyle.Mesh3d \nMesh3d \n\n Applies the style parameters of the mesh3d chart to the given trace\n "},{"uri":"https://plotly.net/reference/plotly-net-trace3dstyle.html#Scatter3d","title":"Trace3DStyle.Scatter3d","content":"Trace3DStyle.Scatter3d \nScatter3d \n\n Applies the style parameters of the Scatter3d chart to the given trace\n "},{"uri":"https://plotly.net/reference/plotly-net-trace3dstyle.html#SetScene","title":"Trace3DStyle.SetScene","content":"Trace3DStyle.SetScene \nSetScene \n"},{"uri":"https://plotly.net/reference/plotly-net-trace3dstyle.html#StreamTube","title":"Trace3DStyle.StreamTube","content":"Trace3DStyle.StreamTube \nStreamTube \n\n Applies the style parameters of the streamtube chart to the given trace\n "},{"uri":"https://plotly.net/reference/plotly-net-trace3dstyle.html#Surface","title":"Trace3DStyle.Surface","content":"Trace3DStyle.Surface \nSurface \n\n Applies the style parameters of the surface chart to the given trace\n "},{"uri":"https://plotly.net/reference/plotly-net-trace3dstyle.html#Volume","title":"Trace3DStyle.Volume","content":"Trace3DStyle.Volume \nVolume \n\n Applies the style parameters of the volume chart to the given trace\n "},{"uri":"https://plotly.net/reference/plotly-net-tracecarpet.html","title":"TraceCarpet","content":"TraceCarpet \n \nTraceCarpet.( .ctor ) \n( .ctor ) \nTraceCarpet.initCarpet \ninitCarpet \nTraceCarpet.initContourCarpet \ninitContourCarpet \nTraceCarpet.initScatterCarpet \ninitScatterCarpet"},{"uri":"https://plotly.net/reference/plotly-net-tracecarpet.html#( .ctor )","title":"TraceCarpet.( .ctor )","content":"TraceCarpet.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-tracecarpet.html#initCarpet","title":"TraceCarpet.initCarpet","content":"TraceCarpet.initCarpet \ninitCarpet \n\ninitializes a trace of type \u0022carpet\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-tracecarpet.html#initContourCarpet","title":"TraceCarpet.initContourCarpet","content":"TraceCarpet.initContourCarpet \ninitContourCarpet \n\ninitializes a trace of type \u0022contourcarpet\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-tracecarpet.html#initScatterCarpet","title":"TraceCarpet.initScatterCarpet","content":"TraceCarpet.initScatterCarpet \ninitScatterCarpet \n\ninitializes a trace of type \u0022scattercarpet\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-tracecarpetstyle.html","title":"TraceCarpetStyle","content":"TraceCarpetStyle \n \nTraceCarpetStyle.( .ctor ) \n( .ctor ) \nTraceCarpetStyle.Carpet \nCarpet \nTraceCarpetStyle.ContourCarpet \nContourCarpet \nTraceCarpetStyle.ScatterCarpet \nScatterCarpet \nTraceCarpetStyle.SetAxisAnchor \nSetAxisAnchor \nTraceCarpetStyle.SetCarpet \nSetCarpet"},{"uri":"https://plotly.net/reference/plotly-net-tracecarpetstyle.html#( .ctor )","title":"TraceCarpetStyle.( .ctor )","content":"TraceCarpetStyle.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-tracecarpetstyle.html#Carpet","title":"TraceCarpetStyle.Carpet","content":"TraceCarpetStyle.Carpet \nCarpet \n"},{"uri":"https://plotly.net/reference/plotly-net-tracecarpetstyle.html#ContourCarpet","title":"TraceCarpetStyle.ContourCarpet","content":"TraceCarpetStyle.ContourCarpet \nContourCarpet \n"},{"uri":"https://plotly.net/reference/plotly-net-tracecarpetstyle.html#ScatterCarpet","title":"TraceCarpetStyle.ScatterCarpet","content":"TraceCarpetStyle.ScatterCarpet \nScatterCarpet \n"},{"uri":"https://plotly.net/reference/plotly-net-tracecarpetstyle.html#SetAxisAnchor","title":"TraceCarpetStyle.SetAxisAnchor","content":"TraceCarpetStyle.SetAxisAnchor \nSetAxisAnchor \n\n Sets the given axis anchor id(s) on a Trace object.\n"},{"uri":"https://plotly.net/reference/plotly-net-tracecarpetstyle.html#SetCarpet","title":"TraceCarpetStyle.SetCarpet","content":"TraceCarpetStyle.SetCarpet \nSetCarpet \n"},{"uri":"https://plotly.net/reference/plotly-net-tracedomain.html","title":"TraceDomain","content":"TraceDomain \n \nTraceDomain.( .ctor ) \n( .ctor ) \nTraceDomain.initFunnelArea \ninitFunnelArea \nTraceDomain.initIcicle \ninitIcicle \nTraceDomain.initIndicator \ninitIndicator \nTraceDomain.initParallelCategories \ninitParallelCategories \nTraceDomain.initParallelCoord \ninitParallelCoord \nTraceDomain.initPie \ninitPie \nTraceDomain.initSankey \ninitSankey \nTraceDomain.initSunburst \ninitSunburst \nTraceDomain.initTable \ninitTable \nTraceDomain.initTreemap \ninitTreemap"},{"uri":"https://plotly.net/reference/plotly-net-tracedomain.html#( .ctor )","title":"TraceDomain.( .ctor )","content":"TraceDomain.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-tracedomain.html#initFunnelArea","title":"TraceDomain.initFunnelArea","content":"TraceDomain.initFunnelArea \ninitFunnelArea \n\ninitializes a trace of type \u0022funnelarea\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-tracedomain.html#initIcicle","title":"TraceDomain.initIcicle","content":"TraceDomain.initIcicle \ninitIcicle \n\ninitializes a trace of type \u0022icicle\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-tracedomain.html#initIndicator","title":"TraceDomain.initIndicator","content":"TraceDomain.initIndicator \ninitIndicator \n\ninitializes a trace of type \u0022indicator\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-tracedomain.html#initParallelCategories","title":"TraceDomain.initParallelCategories","content":"TraceDomain.initParallelCategories \ninitParallelCategories \n\ninitializes a trace of type \u0022parcats\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-tracedomain.html#initParallelCoord","title":"TraceDomain.initParallelCoord","content":"TraceDomain.initParallelCoord \ninitParallelCoord \n\ninitializes a trace of type \u0022parcoords\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-tracedomain.html#initPie","title":"TraceDomain.initPie","content":"TraceDomain.initPie \ninitPie \n\ninitializes a trace of type \u0022pie\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-tracedomain.html#initSankey","title":"TraceDomain.initSankey","content":"TraceDomain.initSankey \ninitSankey \n\ninitializes a trace of type \u0022sankey\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-tracedomain.html#initSunburst","title":"TraceDomain.initSunburst","content":"TraceDomain.initSunburst \ninitSunburst \n\ninitializes a trace of type \u0022sunburst\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-tracedomain.html#initTable","title":"TraceDomain.initTable","content":"TraceDomain.initTable \ninitTable \n\ninitializes a trace of type \u0022Table\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-tracedomain.html#initTreemap","title":"TraceDomain.initTreemap","content":"TraceDomain.initTreemap \ninitTreemap \n\ninitializes a trace of type \u0022treemap\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-tracedomainstyle.html","title":"TraceDomainStyle","content":"TraceDomainStyle \n \nTraceDomainStyle.( .ctor ) \n( .ctor ) \nTraceDomainStyle.FunnelArea \nFunnelArea \nTraceDomainStyle.Icicle \nIcicle \nTraceDomainStyle.Indicator \nIndicator \nTraceDomainStyle.ParallelCategories \nParallelCategories \nTraceDomainStyle.ParallelCoord \nParallelCoord \nTraceDomainStyle.Pie \nPie \nTraceDomainStyle.SetDomain \nSetDomain \nTraceDomainStyle.Sunburst \nSunburst \nTraceDomainStyle.Table \nTable \nTraceDomainStyle.Treemap \nTreemap"},{"uri":"https://plotly.net/reference/plotly-net-tracedomainstyle.html#( .ctor )","title":"TraceDomainStyle.( .ctor )","content":"TraceDomainStyle.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-tracedomainstyle.html#FunnelArea","title":"TraceDomainStyle.FunnelArea","content":"TraceDomainStyle.FunnelArea \nFunnelArea \n"},{"uri":"https://plotly.net/reference/plotly-net-tracedomainstyle.html#Icicle","title":"TraceDomainStyle.Icicle","content":"TraceDomainStyle.Icicle \nIcicle \n"},{"uri":"https://plotly.net/reference/plotly-net-tracedomainstyle.html#Indicator","title":"TraceDomainStyle.Indicator","content":"TraceDomainStyle.Indicator \nIndicator \n"},{"uri":"https://plotly.net/reference/plotly-net-tracedomainstyle.html#ParallelCategories","title":"TraceDomainStyle.ParallelCategories","content":"TraceDomainStyle.ParallelCategories \nParallelCategories \n"},{"uri":"https://plotly.net/reference/plotly-net-tracedomainstyle.html#ParallelCoord","title":"TraceDomainStyle.ParallelCoord","content":"TraceDomainStyle.ParallelCoord \nParallelCoord \n"},{"uri":"https://plotly.net/reference/plotly-net-tracedomainstyle.html#Pie","title":"TraceDomainStyle.Pie","content":"TraceDomainStyle.Pie \nPie \n"},{"uri":"https://plotly.net/reference/plotly-net-tracedomainstyle.html#SetDomain","title":"TraceDomainStyle.SetDomain","content":"TraceDomainStyle.SetDomain \nSetDomain \n"},{"uri":"https://plotly.net/reference/plotly-net-tracedomainstyle.html#Sunburst","title":"TraceDomainStyle.Sunburst","content":"TraceDomainStyle.Sunburst \nSunburst \n\n Applies the styles of sundburst plot to TraceObjects \n\n Parameters:\n\n labels: Sets the labels of each of the sectors.\n\n parents: Sets the parent sectors for each of the sectors. Empty string items \u0027\u0027 are understood to reference the root node in the hierarchy. If \u0060ids\u0060 is filled, \u0060parents\u0060 items are understood to be \u0022ids\u0022 themselves. When \u0060ids\u0060 is not set, plotly attempts to find matching items in \u0060labels\u0060, but beware they must be unique.\n\n Ids: Assigns id labels to each datum. These ids for object constancy of data points during animation.\n\n Values: Sets the values associated with each of the sectors. Use with \u0060branchvalues\u0060 to determine how the values are summed.\n\n Text: Sets text elements associated with each sector. If trace \u0060textinfo\u0060 contains a \u0022text\u0022 flag, these elements will be seen on the chart. If trace \u0060hoverinfo\u0060 contains a \u0022text\u0022 flag and \u0022hovertext\u0022 is not set, these elements will be seen in the hover labels.\n\n Branchvalues: Determines how the items in \u0060values\u0060 are summed. When set to \u0022total\u0022, items in \u0060values\u0060 are taken to be value of all its descendants. When set to \u0022remainder\u0022, items in \u0060values\u0060 corresponding to the root and the branches sectors are taken to be the extra part not part of the sum of the values at their leaves.\n\n Level: Sets the level from which this trace hierarchy is rendered. Set \u0060level\u0060 to \u0060\u0027\u0027\u0060 to start from the root node in the hierarchy. Must be an \u0022id\u0022 if \u0060ids\u0060 is filled in, otherwise plotly attempts to find a matching item in \u0060labels\u0060.\n\n Maxdepth: Sets the number of rendered sectors from any given \u0060level\u0060. Set \u0060maxdepth\u0060 to \u0022-1\u0022 to render all the levels in the hierarchy.\n"},{"uri":"https://plotly.net/reference/plotly-net-tracedomainstyle.html#Table","title":"TraceDomainStyle.Table","content":"TraceDomainStyle.Table \nTable \n"},{"uri":"https://plotly.net/reference/plotly-net-tracedomainstyle.html#Treemap","title":"TraceDomainStyle.Treemap","content":"TraceDomainStyle.Treemap \nTreemap \n\n Applies the styles of treemap plot to TraceObjects \n\n Parameters:\n\n labels      : Sets the labels of each of the sectors.\n\n parents     : Sets the parent sectors for each of the sectors. Empty string items \u0027\u0027 are understood to reference the root node in the hierarchy. If \u0060ids\u0060 is filled, \u0060parents\u0060 items are understood to be \u0022ids\u0022 themselves. When \u0060ids\u0060 is not set, plotly attempts to find matching items in \u0060labels\u0060, but beware they must be unique.\n\n Ids         : Assigns id labels to each datum. These ids for object constancy of data points during animation.\n\n Values      : Sets the values associated with each of the sectors. Use with \u0060branchvalues\u0060 to determine how the values are summed.\n\n Text        : Sets text elements associated with each sector. If trace \u0060textinfo\u0060 contains a \u0022text\u0022 flag, these elements will be seen on the chart. If trace \u0060hoverinfo\u0060 contains a \u0022text\u0022 flag and \u0022hovertext\u0022 is not set, these elements will be seen in the hover labels.\n\n Branchvalues: Determines how the items in \u0060values\u0060 are summed. When set to \u0022total\u0022, items in \u0060values\u0060 are taken to be value of all its descendants. When set to \u0022remainder\u0022, items in \u0060values\u0060 corresponding to the root and the branches sectors are taken to be the extra part not part of the sum of the values at their leaves.\n\n Tiling      : Sets Tiling algorithm options\n\n PathBar     : Sets the Pathbar used to navigate zooming\n\n Level       : Sets the level from which this trace hierarchy is rendered. Set \u0060level\u0060 to \u0060\u0027\u0027\u0060 to start from the root node in the hierarchy. Must be an \u0022id\u0022 if \u0060ids\u0060 is filled in, otherwise plotly attempts to find a matching item in \u0060labels\u0060.\n\n Maxdepth    : Sets the number of rendered sectors from any given \u0060level\u0060. Set \u0060maxdepth\u0060 to \u0022-1\u0022 to render all the levels in the hierarchy.\n"},{"uri":"https://plotly.net/reference/plotly-net-tracegeo.html","title":"TraceGeo","content":"TraceGeo \n\nThe following trace types support attributes named geo or mapbox, whose values must refer to corresponding objects in the layout \ni.e. geo=\u0022geo2\u0022 etc. Note that attributes such as layout.geo2 and layout.mapbox etc do not have to be explicitly defined, in which \ncase default values will be inferred. Multiple traces of a compatible type can be placed on the same subplot.\n\n The following trace types are compatible with geo subplots via the geo attribute:\n \n - scattergeo, which can be used to draw individual markers, line and curves and filled areas on outline maps\n \n - choropleth: colored polygons on outline maps\n \n The following trace types are compatible with mapbox subplots via the mapbox attribute:\n \n - scattermapbox, which can be used to draw individual markers, lines and curves and filled areas on tile maps\n \n - choroplethmapbox: colored polygons on tile maps\n \n - densitymapbox: density heatmaps on tile maps\n \nTraceGeo.( .ctor ) \n( .ctor ) \nTraceGeo.initChoroplethMap \ninitChoroplethMap \nTraceGeo.initScatterGeo \ninitScatterGeo"},{"uri":"https://plotly.net/reference/plotly-net-tracegeo.html#( .ctor )","title":"TraceGeo.( .ctor )","content":"TraceGeo.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-tracegeo.html#initChoroplethMap","title":"TraceGeo.initChoroplethMap","content":"TraceGeo.initChoroplethMap \ninitChoroplethMap \n\ninitializes a trace of type \u0022choropleth\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-tracegeo.html#initScatterGeo","title":"TraceGeo.initScatterGeo","content":"TraceGeo.initScatterGeo \ninitScatterGeo \n\ninitializes a trace of type \u0022scattergeo\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-tracegeostyle.html","title":"TraceGeoStyle","content":"TraceGeoStyle \n \nTraceGeoStyle.( .ctor ) \n( .ctor ) \nTraceGeoStyle.ChoroplethMap \nChoroplethMap \nTraceGeoStyle.ScatterGeo \nScatterGeo \nTraceGeoStyle.SetGeo \nSetGeo"},{"uri":"https://plotly.net/reference/plotly-net-tracegeostyle.html#( .ctor )","title":"TraceGeoStyle.( .ctor )","content":"TraceGeoStyle.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-tracegeostyle.html#ChoroplethMap","title":"TraceGeoStyle.ChoroplethMap","content":"TraceGeoStyle.ChoroplethMap \nChoroplethMap \n"},{"uri":"https://plotly.net/reference/plotly-net-tracegeostyle.html#ScatterGeo","title":"TraceGeoStyle.ScatterGeo","content":"TraceGeoStyle.ScatterGeo \nScatterGeo \n"},{"uri":"https://plotly.net/reference/plotly-net-tracegeostyle.html#SetGeo","title":"TraceGeoStyle.SetGeo","content":"TraceGeoStyle.SetGeo \nSetGeo \n"},{"uri":"https://plotly.net/reference/plotly-net-traceid.html","title":"TraceID","content":"TraceID \n \nTraceID.ofTrace \nofTrace \nTraceID.ofTraces \nofTraces \nTraceID.Cartesian2D \nCartesian2D \nTraceID.Cartesian3D \nCartesian3D \nTraceID.Polar \nPolar \nTraceID.Geo \nGeo \nTraceID.Mapbox \nMapbox \nTraceID.Ternary \nTernary \nTraceID.Carpet \nCarpet \nTraceID.Domain \nDomain \nTraceID.Multi \nMulti"},{"uri":"https://plotly.net/reference/plotly-net-traceid.html#ofTrace","title":"TraceID.ofTrace","content":"TraceID.ofTrace \nofTrace \n"},{"uri":"https://plotly.net/reference/plotly-net-traceid.html#ofTraces","title":"TraceID.ofTraces","content":"TraceID.ofTraces \nofTraces \n"},{"uri":"https://plotly.net/reference/plotly-net-traceid.html#Cartesian2D","title":"TraceID.Cartesian2D","content":"TraceID.Cartesian2D \nCartesian2D \n"},{"uri":"https://plotly.net/reference/plotly-net-traceid.html#Cartesian3D","title":"TraceID.Cartesian3D","content":"TraceID.Cartesian3D \nCartesian3D \n"},{"uri":"https://plotly.net/reference/plotly-net-traceid.html#Polar","title":"TraceID.Polar","content":"TraceID.Polar \nPolar \n"},{"uri":"https://plotly.net/reference/plotly-net-traceid.html#Geo","title":"TraceID.Geo","content":"TraceID.Geo \nGeo \n"},{"uri":"https://plotly.net/reference/plotly-net-traceid.html#Mapbox","title":"TraceID.Mapbox","content":"TraceID.Mapbox \nMapbox \n"},{"uri":"https://plotly.net/reference/plotly-net-traceid.html#Ternary","title":"TraceID.Ternary","content":"TraceID.Ternary \nTernary \n"},{"uri":"https://plotly.net/reference/plotly-net-traceid.html#Carpet","title":"TraceID.Carpet","content":"TraceID.Carpet \nCarpet \n"},{"uri":"https://plotly.net/reference/plotly-net-traceid.html#Domain","title":"TraceID.Domain","content":"TraceID.Domain \nDomain \n"},{"uri":"https://plotly.net/reference/plotly-net-traceid.html#Multi","title":"TraceID.Multi","content":"TraceID.Multi \nMulti \n"},{"uri":"https://plotly.net/reference/plotly-net-tracemapbox.html","title":"TraceMapbox","content":"TraceMapbox \n\nThe following trace types support attributes named geo or mapbox, whose values must refer to corresponding objects in the layout \ni.e. geo=\u0022geo2\u0022 etc. Note that attributes such as layout.geo2 and layout.mapbox etc do not have to be explicitly defined, in which \ncase default values will be inferred. Multiple traces of a compatible type can be placed on the same subplot.\n\n The following trace types are compatible with geo subplots via the geo attribute:\n \n - scattergeo, which can be used to draw individual markers, line and curves and filled areas on outline maps\n \n - choropleth: colored polygons on outline maps\n \n The following trace types are compatible with mapbox subplots via the mapbox attribute:\n \n - scattermapbox, which can be used to draw individual markers, lines and curves and filled areas on tile maps\n \n - choroplethmapbox: colored polygons on tile maps\n \n - densitymapbox: density heatmaps on tile maps\n \nTraceMapbox.( .ctor ) \n( .ctor ) \nTraceMapbox.initChoroplethMapbox \ninitChoroplethMapbox \nTraceMapbox.initDensityMapbox \ninitDensityMapbox \nTraceMapbox.initScatterMapbox \ninitScatterMapbox"},{"uri":"https://plotly.net/reference/plotly-net-tracemapbox.html#( .ctor )","title":"TraceMapbox.( .ctor )","content":"TraceMapbox.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-tracemapbox.html#initChoroplethMapbox","title":"TraceMapbox.initChoroplethMapbox","content":"TraceMapbox.initChoroplethMapbox \ninitChoroplethMapbox \n\ninitializes a trace of type \u0022choroplethmapbox\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-tracemapbox.html#initDensityMapbox","title":"TraceMapbox.initDensityMapbox","content":"TraceMapbox.initDensityMapbox \ninitDensityMapbox \n\ninitializes a trace of type \u0022densitymapbox\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-tracemapbox.html#initScatterMapbox","title":"TraceMapbox.initScatterMapbox","content":"TraceMapbox.initScatterMapbox \ninitScatterMapbox \n\ninitializes a trace of type \u0022scattermapbox\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-tracemapboxstyle.html","title":"TraceMapboxStyle","content":"TraceMapboxStyle \n \nTraceMapboxStyle.( .ctor ) \n( .ctor ) \nTraceMapboxStyle.ChoroplethMap \nChoroplethMap \nTraceMapboxStyle.ChoroplethMapbox \nChoroplethMapbox \nTraceMapboxStyle.DensityMapbox \nDensityMapbox \nTraceMapboxStyle.ScatterGeo \nScatterGeo \nTraceMapboxStyle.ScatterMapbox \nScatterMapbox \nTraceMapboxStyle.SetMapbox \nSetMapbox"},{"uri":"https://plotly.net/reference/plotly-net-tracemapboxstyle.html#( .ctor )","title":"TraceMapboxStyle.( .ctor )","content":"TraceMapboxStyle.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-tracemapboxstyle.html#ChoroplethMap","title":"TraceMapboxStyle.ChoroplethMap","content":"TraceMapboxStyle.ChoroplethMap \nChoroplethMap \n"},{"uri":"https://plotly.net/reference/plotly-net-tracemapboxstyle.html#ChoroplethMapbox","title":"TraceMapboxStyle.ChoroplethMapbox","content":"TraceMapboxStyle.ChoroplethMapbox \nChoroplethMapbox \n"},{"uri":"https://plotly.net/reference/plotly-net-tracemapboxstyle.html#DensityMapbox","title":"TraceMapboxStyle.DensityMapbox","content":"TraceMapboxStyle.DensityMapbox \nDensityMapbox \n"},{"uri":"https://plotly.net/reference/plotly-net-tracemapboxstyle.html#ScatterGeo","title":"TraceMapboxStyle.ScatterGeo","content":"TraceMapboxStyle.ScatterGeo \nScatterGeo \n"},{"uri":"https://plotly.net/reference/plotly-net-tracemapboxstyle.html#ScatterMapbox","title":"TraceMapboxStyle.ScatterMapbox","content":"TraceMapboxStyle.ScatterMapbox \nScatterMapbox \n"},{"uri":"https://plotly.net/reference/plotly-net-tracemapboxstyle.html#SetMapbox","title":"TraceMapboxStyle.SetMapbox","content":"TraceMapboxStyle.SetMapbox \nSetMapbox \n"},{"uri":"https://plotly.net/reference/plotly-net-tracepolar.html","title":"TracePolar","content":"TracePolar \n\n Traces for polar subplots, using layout.polar as anchors.\n\n The following trace types are compatible with polar subplots via the polar attribute:\n \n - scatter-like trace types: scatterpolar and scatterpolargl, which can be used to draw individual markers, curves and filled areas (i.e. radar or spider charts)\n \n - barpolar: useful for wind roses and other polar bar charts\n \nTracePolar.( .ctor ) \n( .ctor ) \nTracePolar.initBarPolar \ninitBarPolar \nTracePolar.initScatterPolar \ninitScatterPolar \nTracePolar.initScatterPolarGL \ninitScatterPolarGL"},{"uri":"https://plotly.net/reference/plotly-net-tracepolar.html#( .ctor )","title":"TracePolar.( .ctor )","content":"TracePolar.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-tracepolar.html#initBarPolar","title":"TracePolar.initBarPolar","content":"TracePolar.initBarPolar \ninitBarPolar \n\ninitializes a trace of type \u0022barpolar\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-tracepolar.html#initScatterPolar","title":"TracePolar.initScatterPolar","content":"TracePolar.initScatterPolar \ninitScatterPolar \n\ninitializes a trace of type \u0022scatterpolar\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-tracepolar.html#initScatterPolarGL","title":"TracePolar.initScatterPolarGL","content":"TracePolar.initScatterPolarGL \ninitScatterPolarGL \n\ninitializes a trace of type \u0022scatterpolargl\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-tracepolarstyle.html","title":"TracePolarStyle","content":"TracePolarStyle \n \nTracePolarStyle.( .ctor ) \n( .ctor ) \nTracePolarStyle.BarPolar \nBarPolar \nTracePolarStyle.ScatterPolar \nScatterPolar \nTracePolarStyle.SetPolar \nSetPolar"},{"uri":"https://plotly.net/reference/plotly-net-tracepolarstyle.html#( .ctor )","title":"TracePolarStyle.( .ctor )","content":"TracePolarStyle.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-tracepolarstyle.html#BarPolar","title":"TracePolarStyle.BarPolar","content":"TracePolarStyle.BarPolar \nBarPolar \n"},{"uri":"https://plotly.net/reference/plotly-net-tracepolarstyle.html#ScatterPolar","title":"TracePolarStyle.ScatterPolar","content":"TracePolarStyle.ScatterPolar \nScatterPolar \n"},{"uri":"https://plotly.net/reference/plotly-net-tracepolarstyle.html#SetPolar","title":"TracePolarStyle.SetPolar","content":"TracePolarStyle.SetPolar \nSetPolar \n"},{"uri":"https://plotly.net/reference/plotly-net-tracestyle.html","title":"TraceStyle","content":"TraceStyle \n\n Functions provide the styling of the Chart objects\n These functions are used internally to style traces of Chart objects. Users are usually pointed\n to the API layer provided by the \u0060Chart\u0060 module/object\n \nTraceStyle.( .ctor ) \n( .ctor ) \nTraceStyle.Domain \nDomain \nTraceStyle.Line \nLine \nTraceStyle.Marker \nMarker \nTraceStyle.SetDomain \nSetDomain \nTraceStyle.SetErrorX \nSetErrorX \nTraceStyle.SetErrorY \nSetErrorY \nTraceStyle.SetErrorZ \nSetErrorZ \nTraceStyle.SetLine \nSetLine \nTraceStyle.SetMarker \nSetMarker \nTraceStyle.SetSelection \nSetSelection \nTraceStyle.SetStackGroup \nSetStackGroup \nTraceStyle.TextLabel \nTextLabel \nTraceStyle.TraceInfo \nTraceInfo \nTraceStyle.setColorAxisAnchor \nsetColorAxisAnchor"},{"uri":"https://plotly.net/reference/plotly-net-tracestyle.html#( .ctor )","title":"TraceStyle.( .ctor )","content":"TraceStyle.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-tracestyle.html#Domain","title":"TraceStyle.Domain","content":"TraceStyle.Domain \nDomain \n\n Sets the given Domain styles on the domain property of a Trace object\n"},{"uri":"https://plotly.net/reference/plotly-net-tracestyle.html#Line","title":"TraceStyle.Line","content":"TraceStyle.Line \nLine \n\n Sets the given Line styles on the line property of a Trace object\n"},{"uri":"https://plotly.net/reference/plotly-net-tracestyle.html#Marker","title":"TraceStyle.Marker","content":"TraceStyle.Marker \nMarker \n\n Sets the given Marker styles on the marker property of a Trace object\n"},{"uri":"https://plotly.net/reference/plotly-net-tracestyle.html#SetDomain","title":"TraceStyle.SetDomain","content":"TraceStyle.SetDomain \nSetDomain \n\n Sets the given domain on a Trace object.\n"},{"uri":"https://plotly.net/reference/plotly-net-tracestyle.html#SetErrorX","title":"TraceStyle.SetErrorX","content":"TraceStyle.SetErrorX \nSetErrorX \n"},{"uri":"https://plotly.net/reference/plotly-net-tracestyle.html#SetErrorY","title":"TraceStyle.SetErrorY","content":"TraceStyle.SetErrorY \nSetErrorY \n"},{"uri":"https://plotly.net/reference/plotly-net-tracestyle.html#SetErrorZ","title":"TraceStyle.SetErrorZ","content":"TraceStyle.SetErrorZ \nSetErrorZ \n"},{"uri":"https://plotly.net/reference/plotly-net-tracestyle.html#SetLine","title":"TraceStyle.SetLine","content":"TraceStyle.SetLine \nSetLine \n\n Sets the given line on a Trace object.\n"},{"uri":"https://plotly.net/reference/plotly-net-tracestyle.html#SetMarker","title":"TraceStyle.SetMarker","content":"TraceStyle.SetMarker \nSetMarker \n\n Sets the given marker on a Trace object.\n"},{"uri":"https://plotly.net/reference/plotly-net-tracestyle.html#SetSelection","title":"TraceStyle.SetSelection","content":"TraceStyle.SetSelection \nSetSelection \n\n Sets selection of data points on a Trace object.\n"},{"uri":"https://plotly.net/reference/plotly-net-tracestyle.html#SetStackGroup","title":"TraceStyle.SetStackGroup","content":"TraceStyle.SetStackGroup \nSetStackGroup \n"},{"uri":"https://plotly.net/reference/plotly-net-tracestyle.html#TextLabel","title":"TraceStyle.TextLabel","content":"TraceStyle.TextLabel \nTextLabel \n\n Sets the given text label styles on a Trace object.\n"},{"uri":"https://plotly.net/reference/plotly-net-tracestyle.html#TraceInfo","title":"TraceStyle.TraceInfo","content":"TraceStyle.TraceInfo \nTraceInfo \n\n Applies the given TraceInfo style parameters to a Trace object.\n"},{"uri":"https://plotly.net/reference/plotly-net-tracestyle.html#setColorAxisAnchor","title":"TraceStyle.setColorAxisAnchor","content":"TraceStyle.setColorAxisAnchor \nsetColorAxisAnchor \n\n Sets the given color axis anchor on a Trace object. (determines which colorscale it uses)\n"},{"uri":"https://plotly.net/reference/plotly-net-traceternary.html","title":"TraceTernary","content":"TraceTernary \n \nTraceTernary.( .ctor ) \n( .ctor ) \nTraceTernary.initScatterTernary \ninitScatterTernary"},{"uri":"https://plotly.net/reference/plotly-net-traceternary.html#( .ctor )","title":"TraceTernary.( .ctor )","content":"TraceTernary.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-traceternary.html#initScatterTernary","title":"TraceTernary.initScatterTernary","content":"TraceTernary.initScatterTernary \ninitScatterTernary \n\ninitializes a trace of type \u0022scatterternary\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-traceternarystyle.html","title":"TraceTernaryStyle","content":"TraceTernaryStyle \n \nTraceTernaryStyle.( .ctor ) \n( .ctor ) \nTraceTernaryStyle.ScatterTernary \nScatterTernary \nTraceTernaryStyle.SetTernary \nSetTernary"},{"uri":"https://plotly.net/reference/plotly-net-traceternarystyle.html#( .ctor )","title":"TraceTernaryStyle.( .ctor )","content":"TraceTernaryStyle.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-traceternarystyle.html#ScatterTernary","title":"TraceTernaryStyle.ScatterTernary","content":"TraceTernaryStyle.ScatterTernary \nScatterTernary \n"},{"uri":"https://plotly.net/reference/plotly-net-traceternarystyle.html#SetTernary","title":"TraceTernaryStyle.SetTernary","content":"TraceTernaryStyle.SetTernary \nSetTernary \n"},{"uri":"https://plotly.net/reference/plotly-net-configobjects-toimagebuttonoptions.html","title":"ToImageButtonOptions","content":"ToImageButtonOptions \n \nToImageButtonOptions.( .ctor ) \n( .ctor ) \nToImageButtonOptions.init \ninit \nToImageButtonOptions.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-configobjects-toimagebuttonoptions.html#( .ctor )","title":"ToImageButtonOptions.( .ctor )","content":"ToImageButtonOptions.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-configobjects-toimagebuttonoptions.html#init","title":"ToImageButtonOptions.init","content":"ToImageButtonOptions.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-configobjects-toimagebuttonoptions.html#style","title":"ToImageButtonOptions.style","content":"ToImageButtonOptions.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-imageexport-chartextensions.html","title":"ChartExtensions","content":"ChartExtensions \n\n Extensions methods from Plotly.NET.ImageExport for the Chart module, supporting the fluent pipeline style\n \nChartExtensions.toBase64JPGStringAsync \ntoBase64JPGStringAsync \nChartExtensions.toBase64JPGString \ntoBase64JPGString \nChartExtensions.saveJPGAsync \nsaveJPGAsync \nChartExtensions.saveJPG \nsaveJPG \nChartExtensions.toBase64PNGStringAsync \ntoBase64PNGStringAsync \nChartExtensions.toBase64PNGString \ntoBase64PNGString \nChartExtensions.savePNGAsync \nsavePNGAsync \nChartExtensions.savePNG \nsavePNG \nChartExtensions.toSVGStringAsync \ntoSVGStringAsync \nChartExtensions.toSVGString \ntoSVGString \nChartExtensions.saveSVGAsync \nsaveSVGAsync \nChartExtensions.saveSVG \nsaveSVG"},{"uri":"https://plotly.net/reference/plotly-net-imageexport-chartextensions.html#toBase64JPGStringAsync","title":"ChartExtensions.toBase64JPGStringAsync","content":"ChartExtensions.toBase64JPGStringAsync \ntoBase64JPGStringAsync \n\n Returns an async function that converts a GenericChart to a base64 encoded JPG string\n "},{"uri":"https://plotly.net/reference/plotly-net-imageexport-chartextensions.html#toBase64JPGString","title":"ChartExtensions.toBase64JPGString","content":"ChartExtensions.toBase64JPGString \ntoBase64JPGString \n\n Returns a function that converts a GenericChart to a base64 encoded JPG string\n "},{"uri":"https://plotly.net/reference/plotly-net-imageexport-chartextensions.html#saveJPGAsync","title":"ChartExtensions.saveJPGAsync","content":"ChartExtensions.saveJPGAsync \nsaveJPGAsync \n\n Returns an async function that saves a GenericChart as JPG image\n "},{"uri":"https://plotly.net/reference/plotly-net-imageexport-chartextensions.html#saveJPG","title":"ChartExtensions.saveJPG","content":"ChartExtensions.saveJPG \nsaveJPG \n\n Returns a function that saves a GenericChart as JPG image\n "},{"uri":"https://plotly.net/reference/plotly-net-imageexport-chartextensions.html#toBase64PNGStringAsync","title":"ChartExtensions.toBase64PNGStringAsync","content":"ChartExtensions.toBase64PNGStringAsync \ntoBase64PNGStringAsync \n\n Returns an async function that converts a GenericChart to a base64 encoded PNG string\n "},{"uri":"https://plotly.net/reference/plotly-net-imageexport-chartextensions.html#toBase64PNGString","title":"ChartExtensions.toBase64PNGString","content":"ChartExtensions.toBase64PNGString \ntoBase64PNGString \n\n Returns a function that converts a GenericChart to a base64 encoded PNG string\n "},{"uri":"https://plotly.net/reference/plotly-net-imageexport-chartextensions.html#savePNGAsync","title":"ChartExtensions.savePNGAsync","content":"ChartExtensions.savePNGAsync \nsavePNGAsync \n\n Returns an async function that saves a GenericChart as PNG image\n "},{"uri":"https://plotly.net/reference/plotly-net-imageexport-chartextensions.html#savePNG","title":"ChartExtensions.savePNG","content":"ChartExtensions.savePNG \nsavePNG \n\n Returns a function that saves a GenericChart as PNG image\n "},{"uri":"https://plotly.net/reference/plotly-net-imageexport-chartextensions.html#toSVGStringAsync","title":"ChartExtensions.toSVGStringAsync","content":"ChartExtensions.toSVGStringAsync \ntoSVGStringAsync \n\n Returns an async function that converts a GenericChart to a SVG string\n "},{"uri":"https://plotly.net/reference/plotly-net-imageexport-chartextensions.html#toSVGString","title":"ChartExtensions.toSVGString","content":"ChartExtensions.toSVGString \ntoSVGString \n\n Returns a function that converts a GenericChart to a SVG string\n "},{"uri":"https://plotly.net/reference/plotly-net-imageexport-chartextensions.html#saveSVGAsync","title":"ChartExtensions.saveSVGAsync","content":"ChartExtensions.saveSVGAsync \nsaveSVGAsync \n\n Returns an async function that saves a GenericChart as SVG image\n "},{"uri":"https://plotly.net/reference/plotly-net-imageexport-chartextensions.html#saveSVG","title":"ChartExtensions.saveSVG","content":"ChartExtensions.saveSVG \nsaveSVG \n\n Returns a function that saves a GenericChart as SVG image\n "},{"uri":"https://plotly.net/reference/plotly-net-imageexport-genericchartextensions.html","title":"GenericChartExtensions","content":"GenericChartExtensions \nExtension methods for providing a Plotly.NET.ImageExport fluent interface pattern for C# \nGenericChartExtensions.ToBase64JPGStringAsync \nToBase64JPGStringAsync \nGenericChartExtensions.ToBase64JPGString \nToBase64JPGString \nGenericChartExtensions.SaveJPGAsync \nSaveJPGAsync \nGenericChartExtensions.SaveJPG \nSaveJPG \nGenericChartExtensions.ToBase64PNGStringAsync \nToBase64PNGStringAsync \nGenericChartExtensions.ToBase64PNGString \nToBase64PNGString \nGenericChartExtensions.SavePNGAsync \nSavePNGAsync \nGenericChartExtensions.SavePNG \nSavePNG \nGenericChartExtensions.ToSVGStringAsync \nToSVGStringAsync \nGenericChartExtensions.ToSVGString \nToSVGString \nGenericChartExtensions.SaveSVGAsync \nSaveSVGAsync \nGenericChartExtensions.SaveSVG \nSaveSVG"},{"uri":"https://plotly.net/reference/plotly-net-imageexport-genericchartextensions.html#ToBase64JPGStringAsync","title":"GenericChartExtensions.ToBase64JPGStringAsync","content":"GenericChartExtensions.ToBase64JPGStringAsync \nToBase64JPGStringAsync \n\n Converts the GenericChart to a base64 encoded JPG string (async)\n "},{"uri":"https://plotly.net/reference/plotly-net-imageexport-genericchartextensions.html#ToBase64JPGString","title":"GenericChartExtensions.ToBase64JPGString","content":"GenericChartExtensions.ToBase64JPGString \nToBase64JPGString \n\n Converts the GenericChart to a base64 encoded JPG string (async)\n "},{"uri":"https://plotly.net/reference/plotly-net-imageexport-genericchartextensions.html#SaveJPGAsync","title":"GenericChartExtensions.SaveJPGAsync","content":"GenericChartExtensions.SaveJPGAsync \nSaveJPGAsync \n\n Saves the GenericChart as JPG image (async)\n "},{"uri":"https://plotly.net/reference/plotly-net-imageexport-genericchartextensions.html#SaveJPG","title":"GenericChartExtensions.SaveJPG","content":"GenericChartExtensions.SaveJPG \nSaveJPG \n\n Saves the GenericChart as JPG image\n "},{"uri":"https://plotly.net/reference/plotly-net-imageexport-genericchartextensions.html#ToBase64PNGStringAsync","title":"GenericChartExtensions.ToBase64PNGStringAsync","content":"GenericChartExtensions.ToBase64PNGStringAsync \nToBase64PNGStringAsync \n\n Converts the GenericChart to a base64 encoded PNG string (async)\n "},{"uri":"https://plotly.net/reference/plotly-net-imageexport-genericchartextensions.html#ToBase64PNGString","title":"GenericChartExtensions.ToBase64PNGString","content":"GenericChartExtensions.ToBase64PNGString \nToBase64PNGString \n\n Converts the GenericChart to a base64 encoded PNG string\n "},{"uri":"https://plotly.net/reference/plotly-net-imageexport-genericchartextensions.html#SavePNGAsync","title":"GenericChartExtensions.SavePNGAsync","content":"GenericChartExtensions.SavePNGAsync \nSavePNGAsync \n\n Saves the GenericChart as PNG image (async)\n "},{"uri":"https://plotly.net/reference/plotly-net-imageexport-genericchartextensions.html#SavePNG","title":"GenericChartExtensions.SavePNG","content":"GenericChartExtensions.SavePNG \nSavePNG \n\n Saves the GenericChart as PNG image\n "},{"uri":"https://plotly.net/reference/plotly-net-imageexport-genericchartextensions.html#ToSVGStringAsync","title":"GenericChartExtensions.ToSVGStringAsync","content":"GenericChartExtensions.ToSVGStringAsync \nToSVGStringAsync \n\n Converts the GenericChart to a SVG string (async)\n "},{"uri":"https://plotly.net/reference/plotly-net-imageexport-genericchartextensions.html#ToSVGString","title":"GenericChartExtensions.ToSVGString","content":"GenericChartExtensions.ToSVGString \nToSVGString \n\n Converts the GenericChart to a SVG string\n "},{"uri":"https://plotly.net/reference/plotly-net-imageexport-genericchartextensions.html#SaveSVGAsync","title":"GenericChartExtensions.SaveSVGAsync","content":"GenericChartExtensions.SaveSVGAsync \nSaveSVGAsync \n\n Saves the GenericChart as SVG image (async)\n "},{"uri":"https://plotly.net/reference/plotly-net-imageexport-genericchartextensions.html#SaveSVG","title":"GenericChartExtensions.SaveSVG","content":"GenericChartExtensions.SaveSVG \nSaveSVG \n\n Saves the GenericChart as SVG image\n "},{"uri":"https://plotly.net/reference/plotly-net-imageexport-exportengine.html","title":"ExportEngine","content":"ExportEngine \nDU containing the available static image export engines for Plotly.NET \nExportEngine.getEngine \ngetEngine \nExportEngine.PuppeteerSharp \nPuppeteerSharp"},{"uri":"https://plotly.net/reference/plotly-net-imageexport-exportengine.html#getEngine","title":"ExportEngine.getEngine","content":"ExportEngine.getEngine \ngetEngine \n"},{"uri":"https://plotly.net/reference/plotly-net-imageexport-exportengine.html#PuppeteerSharp","title":"ExportEngine.PuppeteerSharp","content":"ExportEngine.PuppeteerSharp \nPuppeteerSharp \nUsing this engine will use PuppeteerSharp with a Chromium headless browser to render GenericCharts from Plotly.NET."},{"uri":"https://plotly.net/reference/plotly-net-imageexport-igenericchartrenderer.html","title":"IGenericChartRenderer","content":"IGenericChartRenderer \n\n Interface for Engines that render Plotly.NET\u0027s GenericChart to static images.\n  \nIGenericChartRenderer.RenderJPG \nRenderJPG \nIGenericChartRenderer.RenderJPGAsync \nRenderJPGAsync \nIGenericChartRenderer.RenderPNG \nRenderPNG \nIGenericChartRenderer.RenderPNGAsync \nRenderPNGAsync \nIGenericChartRenderer.RenderSVG \nRenderSVG \nIGenericChartRenderer.RenderSVGAsync \nRenderSVGAsync \nIGenericChartRenderer.SaveJPG \nSaveJPG \nIGenericChartRenderer.SaveJPGAsync \nSaveJPGAsync \nIGenericChartRenderer.SavePNG \nSavePNG \nIGenericChartRenderer.SavePNGAsync \nSavePNGAsync \nIGenericChartRenderer.SaveSVG \nSaveSVG \nIGenericChartRenderer.SaveSVGAsync \nSaveSVGAsync"},{"uri":"https://plotly.net/reference/plotly-net-imageexport-igenericchartrenderer.html#RenderJPG","title":"IGenericChartRenderer.RenderJPG","content":"IGenericChartRenderer.RenderJPG \nRenderJPG \nFunction that returns a base64 encoded string representing the input chart as JPG file with the given width and height"},{"uri":"https://plotly.net/reference/plotly-net-imageexport-igenericchartrenderer.html#RenderJPGAsync","title":"IGenericChartRenderer.RenderJPGAsync","content":"IGenericChartRenderer.RenderJPGAsync \nRenderJPGAsync \nAsync function that returns a base64 encoded string representing the input chart as JPG file with the given width and height"},{"uri":"https://plotly.net/reference/plotly-net-imageexport-igenericchartrenderer.html#RenderPNG","title":"IGenericChartRenderer.RenderPNG","content":"IGenericChartRenderer.RenderPNG \nRenderPNG \nFunction that returns a base64 encoded string representing the input chart as PNG file with the given width and height"},{"uri":"https://plotly.net/reference/plotly-net-imageexport-igenericchartrenderer.html#RenderPNGAsync","title":"IGenericChartRenderer.RenderPNGAsync","content":"IGenericChartRenderer.RenderPNGAsync \nRenderPNGAsync \nAsync function that returns a base64 encoded string representing the input chart as PNG file with the given width and height"},{"uri":"https://plotly.net/reference/plotly-net-imageexport-igenericchartrenderer.html#RenderSVG","title":"IGenericChartRenderer.RenderSVG","content":"IGenericChartRenderer.RenderSVG \nRenderSVG \nFunction that returns string representing the input chart as SVG file with the given width and height"},{"uri":"https://plotly.net/reference/plotly-net-imageexport-igenericchartrenderer.html#RenderSVGAsync","title":"IGenericChartRenderer.RenderSVGAsync","content":"IGenericChartRenderer.RenderSVGAsync \nRenderSVGAsync \nAsync function that returns a string representing the input chart as SVG file with the given width and height"},{"uri":"https://plotly.net/reference/plotly-net-imageexport-igenericchartrenderer.html#SaveJPG","title":"IGenericChartRenderer.SaveJPG","content":"IGenericChartRenderer.SaveJPG \nSaveJPG \nFunction that saves the input chart as JPG file with the given width and height at the given path"},{"uri":"https://plotly.net/reference/plotly-net-imageexport-igenericchartrenderer.html#SaveJPGAsync","title":"IGenericChartRenderer.SaveJPGAsync","content":"IGenericChartRenderer.SaveJPGAsync \nSaveJPGAsync \nAsync function that saves the input chart as JPG file with the given width and height at the given path"},{"uri":"https://plotly.net/reference/plotly-net-imageexport-igenericchartrenderer.html#SavePNG","title":"IGenericChartRenderer.SavePNG","content":"IGenericChartRenderer.SavePNG \nSavePNG \nFunction that saves the input chart as PNG file with the given width and height at the given path"},{"uri":"https://plotly.net/reference/plotly-net-imageexport-igenericchartrenderer.html#SavePNGAsync","title":"IGenericChartRenderer.SavePNGAsync","content":"IGenericChartRenderer.SavePNGAsync \nSavePNGAsync \nAsync function that saves the input chart as PNG file with the given width and height at the given path"},{"uri":"https://plotly.net/reference/plotly-net-imageexport-igenericchartrenderer.html#SaveSVG","title":"IGenericChartRenderer.SaveSVG","content":"IGenericChartRenderer.SaveSVG \nSaveSVG \nFunction that saves the input chart as SVG file with the given width and height at the given path"},{"uri":"https://plotly.net/reference/plotly-net-imageexport-igenericchartrenderer.html#SaveSVGAsync","title":"IGenericChartRenderer.SaveSVGAsync","content":"IGenericChartRenderer.SaveSVGAsync \nSaveSVGAsync \nAsync function that saves the input chart as SVG file with the given width and height at the given path"},{"uri":"https://plotly.net/reference/plotly-net-imageexport-puppeteersharprenderer.html","title":"PuppeteerSharpRenderer","content":"PuppeteerSharpRenderer \n \nPuppeteerSharpRenderer.( .ctor ) \n( .ctor )"},{"uri":"https://plotly.net/reference/plotly-net-imageexport-puppeteersharprenderer.html#( .ctor )","title":"PuppeteerSharpRenderer.( .ctor )","content":"PuppeteerSharpRenderer.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-interactive-formatterkernelextension.html","title":"FormatterKernelExtension","content":"FormatterKernelExtension \n \nFormatterKernelExtension.( .ctor ) \n( .ctor )"},{"uri":"https://plotly.net/reference/plotly-net-interactive-formatterkernelextension.html#( .ctor )","title":"FormatterKernelExtension.( .ctor )","content":"FormatterKernelExtension.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-activeshape.html","title":"ActiveShape","content":"ActiveShape \n \nActiveShape.( .ctor ) \n( .ctor ) \nActiveShape.init \ninit \nActiveShape.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-activeshape.html#( .ctor )","title":"ActiveShape.( .ctor )","content":"ActiveShape.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-activeshape.html#init","title":"ActiveShape.init","content":"ActiveShape.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-activeshape.html#style","title":"ActiveShape.style","content":"ActiveShape.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-angularaxis.html","title":"AngularAxis","content":"AngularAxis \nAngular axes can be used as a scale for the angular coordinates in polar plots. \nAngularAxis.( .ctor ) \n( .ctor ) \nAngularAxis.init \ninit \nAngularAxis.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-angularaxis.html#( .ctor )","title":"AngularAxis.( .ctor )","content":"AngularAxis.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-angularaxis.html#init","title":"AngularAxis.init","content":"AngularAxis.init \ninit \n\n Initialize an AngularAxis object that can be used as a angular scale for polar coordinates.\n "},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-angularaxis.html#style","title":"AngularAxis.style","content":"AngularAxis.style \nstyle \n\n Creates a function that applies the given style parameters to a AngularAxis object\n "},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-annotation.html","title":"Annotation","content":"Annotation \n\n Text annotations inside a plot \n \nAnnotation.( .ctor ) \n( .ctor ) \nAnnotation.init \ninit \nAnnotation.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-annotation.html#( .ctor )","title":"Annotation.( .ctor )","content":"Annotation.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-annotation.html#init","title":"Annotation.init","content":"Annotation.init \ninit \n\n Init Annotation type\n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-annotation.html#style","title":"Annotation.style","content":"Annotation.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-aspectratio.html","title":"AspectRatio","content":"AspectRatio \n \nAspectRatio.( .ctor ) \n( .ctor )"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-aspectratio.html#( .ctor )","title":"AspectRatio.( .ctor )","content":"AspectRatio.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-button.html","title":"Button","content":"Button \n\n Dimensions type inherits from dynamic object\n \nButton.( .ctor ) \n( .ctor ) \nButton.init \ninit \nButton.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-button.html#( .ctor )","title":"Button.( .ctor )","content":"Button.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-button.html#init","title":"Button.init","content":"Button.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-button.html#style","title":"Button.style","content":"Button.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-camera.html","title":"Camera","content":"Camera \n \nCamera.( .ctor ) \n( .ctor )"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-camera.html#( .ctor )","title":"Camera.( .ctor )","content":"Camera.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-coloraxis.html","title":"ColorAxis","content":"ColorAxis \n \nColorAxis.( .ctor ) \n( .ctor ) \nColorAxis.init \ninit \nColorAxis.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-coloraxis.html#( .ctor )","title":"ColorAxis.( .ctor )","content":"ColorAxis.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-coloraxis.html#init","title":"ColorAxis.init","content":"ColorAxis.init \ninit \n\n Initializes a ColorAxis object\n "},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-coloraxis.html#style","title":"ColorAxis.style","content":"ColorAxis.style \nstyle \n\n Creates a function that applies the given style parameters to a ColorAxis object\n "},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-colorbar.html","title":"ColorBar","content":"ColorBar \n\n The ColorBar object to be used with ColorAxes.\n \nColorBar.( .ctor ) \n( .ctor ) \nColorBar.init \ninit \nColorBar.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-colorbar.html#( .ctor )","title":"ColorBar.( .ctor )","content":"ColorBar.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-colorbar.html#init","title":"ColorBar.init","content":"ColorBar.init \ninit \n\n Initializes a ColorBar object.\n "},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-colorbar.html#style","title":"ColorBar.style","content":"ColorBar.style \nstyle \n\n Create a function that applies the given style parameters to a ColorBar object\n "},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-defaultcolorscales.html","title":"DefaultColorScales","content":"DefaultColorScales \n \nDefaultColorScales.( .ctor ) \n( .ctor ) \nDefaultColorScales.init \ninit \nDefaultColorScales.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-defaultcolorscales.html#( .ctor )","title":"DefaultColorScales.( .ctor )","content":"DefaultColorScales.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-defaultcolorscales.html#init","title":"DefaultColorScales.init","content":"DefaultColorScales.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-defaultcolorscales.html#style","title":"DefaultColorScales.style","content":"DefaultColorScales.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-domain.html","title":"Domain","content":"Domain \n\n Dimensions type inherits from dynamic object\n \nDomain.( .ctor ) \n( .ctor ) \nDomain.init \ninit \nDomain.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-domain.html#( .ctor )","title":"Domain.( .ctor )","content":"Domain.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-domain.html#init","title":"Domain.init","content":"Domain.init \ninit \n\n Initialized Dimensions object\n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-domain.html#style","title":"Domain.style","content":"Domain.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-geo.html","title":"Geo","content":"Geo \nDetermines the style of the map shown in geo traces \nGeo.( .ctor ) \n( .ctor ) \nGeo.init \ninit \nGeo.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-geo.html#( .ctor )","title":"Geo.( .ctor )","content":"Geo.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-geo.html#init","title":"Geo.init","content":"Geo.init \ninit \nInitialize a Geo object that determines the style of the map shown in geo traces"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-geo.html#style","title":"Geo.style","content":"Geo.style \nstyle \nCreate a function that applies the given style parameters to a Geo object."},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-geoprojection.html","title":"GeoProjection","content":"GeoProjection \nDetermines the map projection in geo traces. \nGeoProjection.( .ctor ) \n( .ctor ) \nGeoProjection.init \ninit \nGeoProjection.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-geoprojection.html#( .ctor )","title":"GeoProjection.( .ctor )","content":"GeoProjection.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-geoprojection.html#init","title":"GeoProjection.init","content":"GeoProjection.init \ninit \nInitialize a GeoProjection object that determines the map projection in geo traces."},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-geoprojection.html#style","title":"GeoProjection.style","content":"GeoProjection.style \nstyle \nCreate a function that applies the given style parameters to a GeoProjection object."},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-geoprojectionrotation.html","title":"GeoProjectionRotation","content":"GeoProjectionRotation \nDetermines Map rotation in GeoProjections \nGeoProjectionRotation.( .ctor ) \n( .ctor ) \nGeoProjectionRotation.init \ninit \nGeoProjectionRotation.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-geoprojectionrotation.html#( .ctor )","title":"GeoProjectionRotation.( .ctor )","content":"GeoProjectionRotation.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-geoprojectionrotation.html#init","title":"GeoProjectionRotation.init","content":"GeoProjectionRotation.init \ninit \nInitialize a GeoProjectionRotation object that determines Map rotation in GeoProjections"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-geoprojectionrotation.html#style","title":"GeoProjectionRotation.style","content":"GeoProjectionRotation.style \nstyle \nCreate a function that applies the given style parameters to a GeoProjectionRotation object"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-hoverlabel.html","title":"Hoverlabel","content":"Hoverlabel \n\n Hoverlabel type inherits from dynamic object\n \nHoverlabel.( .ctor ) \n( .ctor ) \nHoverlabel.init \ninit \nHoverlabel.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-hoverlabel.html#( .ctor )","title":"Hoverlabel.( .ctor )","content":"Hoverlabel.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-hoverlabel.html#init","title":"Hoverlabel.init","content":"Hoverlabel.init \ninit \n\n Initialized Line object\n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-hoverlabel.html#style","title":"Hoverlabel.style","content":"Hoverlabel.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-layoutgrid.html","title":"LayoutGrid","content":"LayoutGrid \n\n A plot grid that can contain subplots with shared axes.\n \nLayoutGrid.( .ctor ) \n( .ctor ) \nLayoutGrid.init \ninit \nLayoutGrid.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-layoutgrid.html#( .ctor )","title":"LayoutGrid.( .ctor )","content":"LayoutGrid.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-layoutgrid.html#init","title":"LayoutGrid.init","content":"LayoutGrid.init \ninit \nInitializes a LayoutGrid object"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-layoutgrid.html#style","title":"LayoutGrid.style","content":"LayoutGrid.style \nstyle \nReturns a function that applies the given styles to a LayoutGrid."},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-layoutimage.html","title":"LayoutImage","content":"LayoutImage \n\n Dimensions type inherits from dynamic object\n \nLayoutImage.( .ctor ) \n( .ctor ) \nLayoutImage.init \ninit \nLayoutImage.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-layoutimage.html#( .ctor )","title":"LayoutImage.( .ctor )","content":"LayoutImage.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-layoutimage.html#init","title":"LayoutImage.init","content":"LayoutImage.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-layoutimage.html#style","title":"LayoutImage.style","content":"LayoutImage.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-legend.html","title":"Legend","content":"Legend \n\n Legend \n \nLegend.( .ctor ) \n( .ctor ) \nLegend.init \ninit \nLegend.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-legend.html#( .ctor )","title":"Legend.( .ctor )","content":"Legend.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-legend.html#init","title":"Legend.init","content":"Legend.init \ninit \n\n Init Legend type\n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-legend.html#style","title":"Legend.style","content":"Legend.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-linearaxis.html","title":"LinearAxis","content":"LinearAxis \nLinear axes can be used as x and y scales on 2D plots, and as x,y, and z scales on 3D plots. \nLinearAxis.( .ctor ) \n( .ctor ) \nLinearAxis.init \ninit \nLinearAxis.initCarpet \ninitCarpet \nLinearAxis.initCategorical \ninitCategorical \nLinearAxis.initIndicatorGauge \ninitIndicatorGauge \nLinearAxis.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-linearaxis.html#( .ctor )","title":"LinearAxis.( .ctor )","content":"LinearAxis.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-linearaxis.html#init","title":"LinearAxis.init","content":"LinearAxis.init \ninit \n\n Initialize a LinearAxis object that can be used as a positional scale for Y, X or Z coordinates.\n "},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-linearaxis.html#initCarpet","title":"LinearAxis.initCarpet","content":"LinearAxis.initCarpet \ninitCarpet \n\n Initialize a LinearAxis object that can be used as a positional scale for carpet plots.\n "},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-linearaxis.html#initCategorical","title":"LinearAxis.initCategorical","content":"LinearAxis.initCategorical \ninitCategorical \n\n Initialize a categorical LinearAxis object that can be used as a positional scale for Y, X or Z coordinates.\n "},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-linearaxis.html#initIndicatorGauge","title":"LinearAxis.initIndicatorGauge","content":"LinearAxis.initIndicatorGauge \ninitIndicatorGauge \n\n Initialize a LinearAxis object that can be used as a positional scale for indicator gauges.\n "},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-linearaxis.html#style","title":"LinearAxis.style","content":"LinearAxis.style \nstyle \n\n Create a function that applies the given style parameters to a LinearAxis object\n "},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-mapbox.html","title":"Mapbox","content":"Mapbox \nDetermines the style of the map shown in mapbox traces \nMapbox.( .ctor ) \n( .ctor ) \nMapbox.init \ninit \nMapbox.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-mapbox.html#( .ctor )","title":"Mapbox.( .ctor )","content":"Mapbox.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-mapbox.html#init","title":"Mapbox.init","content":"Mapbox.init \ninit \nInitialize a Mapbox object that determines the style of the map shown in geo mapbox"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-mapbox.html#style","title":"Mapbox.style","content":"Mapbox.style \nstyle \nCreate a function that applies the given style parameters to a Mapbox object."},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-mapboxlayer.html","title":"MapboxLayer","content":"MapboxLayer \n \nMapboxLayer.( .ctor ) \n( .ctor ) \nMapboxLayer.init \ninit \nMapboxLayer.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-mapboxlayer.html#( .ctor )","title":"MapboxLayer.( .ctor )","content":"MapboxLayer.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-mapboxlayer.html#init","title":"MapboxLayer.init","content":"MapboxLayer.init \ninit \nInitialize a MapboxLayer object"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-mapboxlayer.html#style","title":"MapboxLayer.style","content":"MapboxLayer.style \nstyle \nCreate a function that applies the given style parameters to a MapboxLayer object."},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-mapboxlayersymbol.html","title":"MapboxLayerSymbol","content":"MapboxLayerSymbol \n \nMapboxLayerSymbol.( .ctor ) \n( .ctor ) \nMapboxLayerSymbol.init \ninit \nMapboxLayerSymbol.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-mapboxlayersymbol.html#( .ctor )","title":"MapboxLayerSymbol.( .ctor )","content":"MapboxLayerSymbol.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-mapboxlayersymbol.html#init","title":"MapboxLayerSymbol.init","content":"MapboxLayerSymbol.init \ninit \nInitialize a MapboxLayer object"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-mapboxlayersymbol.html#style","title":"MapboxLayerSymbol.style","content":"MapboxLayerSymbol.style \nstyle \nCreate a function that applies the given style parameters to a MapboxLayer object."},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-margin.html","title":"Margin","content":"Margin \n\n Margin \n \nMargin.( .ctor ) \n( .ctor ) \nMargin.init \ninit \nMargin.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-margin.html#( .ctor )","title":"Margin.( .ctor )","content":"Margin.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-margin.html#init","title":"Margin.init","content":"Margin.init \ninit \n\n Init Margin type\n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-margin.html#style","title":"Margin.style","content":"Margin.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-modebar.html","title":"ModeBar","content":"ModeBar \n \nModeBar.( .ctor ) \n( .ctor ) \nModeBar.init \ninit \nModeBar.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-modebar.html#( .ctor )","title":"ModeBar.( .ctor )","content":"ModeBar.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-modebar.html#init","title":"ModeBar.init","content":"ModeBar.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-modebar.html#style","title":"ModeBar.style","content":"ModeBar.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-polar.html","title":"Polar","content":"Polar \n \nPolar.( .ctor ) \n( .ctor ) \nPolar.init \ninit \nPolar.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-polar.html#( .ctor )","title":"Polar.( .ctor )","content":"Polar.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-polar.html#init","title":"Polar.init","content":"Polar.init \ninit \n\n Initialize a Polar object that contains layout options concerned with polar plots.\n "},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-polar.html#style","title":"Polar.style","content":"Polar.style \nstyle \n\n Create a function that applies the given style parameters to a Polar object\n "},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-radialaxis.html","title":"RadialAxis","content":"RadialAxis \nRadial axes can be used as a scale for the radial coordinates in polar plots. \nRadialAxis.( .ctor ) \n( .ctor ) \nRadialAxis.init \ninit \nRadialAxis.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-radialaxis.html#( .ctor )","title":"RadialAxis.( .ctor )","content":"RadialAxis.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-radialaxis.html#init","title":"RadialAxis.init","content":"RadialAxis.init \ninit \n\n Initialize an AngularAxis object that can be used as a angular scale for polar coordinates.\n "},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-radialaxis.html#style","title":"RadialAxis.style","content":"RadialAxis.style \nstyle \n\n Creates a function that applies the given style parameters to a RadialAxis object\n "},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-rangeselector.html","title":"RangeSelector","content":"RangeSelector \n\n Dimensions type inherits from dynamic object\n \nRangeSelector.( .ctor ) \n( .ctor ) \nRangeSelector.init \ninit \nRangeSelector.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-rangeselector.html#( .ctor )","title":"RangeSelector.( .ctor )","content":"RangeSelector.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-rangeselector.html#init","title":"RangeSelector.init","content":"RangeSelector.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-rangeselector.html#style","title":"RangeSelector.style","content":"RangeSelector.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-rangeslider.html","title":"RangeSlider","content":"RangeSlider \n \nRangeSlider.( .ctor ) \n( .ctor ) \nRangeSlider.init \ninit \nRangeSlider.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-rangeslider.html#( .ctor )","title":"RangeSlider.( .ctor )","content":"RangeSlider.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-rangeslider.html#init","title":"RangeSlider.init","content":"RangeSlider.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-rangeslider.html#style","title":"RangeSlider.style","content":"RangeSlider.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-rangebreak.html","title":"Rangebreak","content":"Rangebreak \n \nRangebreak.( .ctor ) \n( .ctor ) \nRangebreak.init \ninit \nRangebreak.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-rangebreak.html#( .ctor )","title":"Rangebreak.( .ctor )","content":"Rangebreak.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-rangebreak.html#init","title":"Rangebreak.init","content":"Rangebreak.init \ninit \n\n Initialize a Rangebreak object.\n "},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-rangebreak.html#style","title":"Rangebreak.style","content":"Rangebreak.style \nstyle \n\n Creates a function that applies the given style parameters to a Rangebreak object\n "},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-scene.html","title":"Scene","content":"Scene \n\n Scene \n \nScene.( .ctor ) \n( .ctor ) \nScene.init \ninit \nScene.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-scene.html#( .ctor )","title":"Scene.( .ctor )","content":"Scene.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-scene.html#init","title":"Scene.init","content":"Scene.init \ninit \n\n Initialize a categorical Scene object that can be used as a laxout anchor for a 3D coordinate system.\n "},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-scene.html#style","title":"Scene.style","content":"Scene.style \nstyle \n\n Creates a function that applies the given style parameters to a Scene object\n "},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-shape.html","title":"Shape","content":"Shape \n\n Shape type inherits from dynamic object\n \nShape.( .ctor ) \n( .ctor ) \nShape.init \ninit \nShape.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-shape.html#( .ctor )","title":"Shape.( .ctor )","content":"Shape.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-shape.html#init","title":"Shape.init","content":"Shape.init \ninit \n\n Init Shape type\n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-shape.html#style","title":"Shape.style","content":"Shape.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-ternary.html","title":"Ternary","content":"Ternary \n \nTernary.( .ctor ) \n( .ctor ) \nTernary.init \ninit \nTernary.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-ternary.html#( .ctor )","title":"Ternary.( .ctor )","content":"Ternary.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-ternary.html#init","title":"Ternary.init","content":"Ternary.init \ninit \n\n Initializes a ternary object\n "},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-ternary.html#style","title":"Ternary.style","content":"Ternary.style \nstyle \n\n Creates a function that applies the given style parameters to a Ternary object.\n "},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-tickformatstop.html","title":"TickFormatStop","content":"TickFormatStop \n \nTickFormatStop.( .ctor ) \n( .ctor ) \nTickFormatStop.init \ninit \nTickFormatStop.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-tickformatstop.html#( .ctor )","title":"TickFormatStop.( .ctor )","content":"TickFormatStop.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-tickformatstop.html#init","title":"TickFormatStop.init","content":"TickFormatStop.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-tickformatstop.html#style","title":"TickFormatStop.style","content":"TickFormatStop.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-transition.html","title":"Transition","content":"Transition \n \nTransition.( .ctor ) \n( .ctor ) \nTransition.init \ninit \nTransition.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-transition.html#( .ctor )","title":"Transition.( .ctor )","content":"Transition.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-transition.html#init","title":"Transition.init","content":"Transition.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-transition.html#style","title":"Transition.style","content":"Transition.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-uniformtext.html","title":"UniformText","content":"UniformText \n \nUniformText.( .ctor ) \n( .ctor ) \nUniformText.init \ninit \nUniformText.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-uniformtext.html#( .ctor )","title":"UniformText.( .ctor )","content":"UniformText.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-uniformtext.html#init","title":"UniformText.init","content":"UniformText.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-uniformtext.html#style","title":"UniformText.style","content":"UniformText.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-bins.html","title":"Bins","content":"Bins \n\n Bin type inherits from dynamic object\n \nBins.( .ctor ) \n( .ctor ) \nBins.init \ninit \nBins.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-bins.html#( .ctor )","title":"Bins.( .ctor )","content":"Bins.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-bins.html#init","title":"Bins.init","content":"Bins.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-bins.html#style","title":"Bins.style","content":"Bins.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-box.html","title":"Box","content":"Box \n\n Box type inherits from dynamic object (parent violin)\n \nBox.( .ctor ) \n( .ctor ) \nBox.init \ninit \nBox.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-box.html#( .ctor )","title":"Box.( .ctor )","content":"Box.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-box.html#init","title":"Box.init","content":"Box.init \ninit \n\n Initialized Line object\n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-box.html#style","title":"Box.style","content":"Box.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-capfill.html","title":"CapFill","content":"CapFill \n \nCapFill.( .ctor ) \n( .ctor ) \nCapFill.init \ninit \nCapFill.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-capfill.html#( .ctor )","title":"CapFill.( .ctor )","content":"CapFill.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-capfill.html#init","title":"CapFill.init","content":"CapFill.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-capfill.html#style","title":"CapFill.style","content":"CapFill.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-caps.html","title":"Caps","content":"Caps \n \nCaps.( .ctor ) \n( .ctor ) \nCaps.init \ninit \nCaps.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-caps.html#( .ctor )","title":"Caps.( .ctor )","content":"Caps.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-caps.html#init","title":"Caps.init","content":"Caps.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-caps.html#style","title":"Caps.style","content":"Caps.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-cellcolor.html","title":"CellColor","content":"CellColor \n\n CellColor type inherits from dynamic object\n \nCellColor.( .ctor ) \n( .ctor ) \nCellColor.init \ninit \nCellColor.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-cellcolor.html#( .ctor )","title":"CellColor.( .ctor )","content":"CellColor.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-cellcolor.html#init","title":"CellColor.init","content":"CellColor.init \ninit \n\n Initialized Line object\n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-cellcolor.html#style","title":"CellColor.style","content":"CellColor.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-contour.html","title":"Contour","content":"Contour \n\n Contour object inherits from dynamic object\n \nContour.( .ctor ) \n( .ctor ) \nContour.init \ninit \nContour.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-contour.html#( .ctor )","title":"Contour.( .ctor )","content":"Contour.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-contour.html#init","title":"Contour.init","content":"Contour.init \ninit \n\n Initialized a Contour object\n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-contour.html#style","title":"Contour.style","content":"Contour.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-contourproject.html","title":"ContourProject","content":"ContourProject \n \nContourProject.( .ctor ) \n( .ctor ) \nContourProject.init \ninit \nContourProject.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-contourproject.html#( .ctor )","title":"ContourProject.( .ctor )","content":"ContourProject.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-contourproject.html#init","title":"ContourProject.init","content":"ContourProject.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-contourproject.html#style","title":"ContourProject.style","content":"ContourProject.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-contours.html","title":"Contours","content":"Contours \n\n Contours type inherits from dynamic object\n \nContours.( .ctor ) \n( .ctor ) \nContours.init \ninit \nContours.initXyz \ninitXyz \nContours.style \nstyle \nContours.styleXyz \nstyleXyz"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-contours.html#( .ctor )","title":"Contours.( .ctor )","content":"Contours.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-contours.html#init","title":"Contours.init","content":"Contours.init \ninit \n\n Initialized Contours object\n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-contours.html#initXyz","title":"Contours.initXyz","content":"Contours.initXyz \ninitXyz \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-contours.html#style","title":"Contours.style","content":"Contours.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-contours.html#styleXyz","title":"Contours.styleXyz","content":"Contours.styleXyz \nstyleXyz \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-cumulative.html","title":"Cumulative","content":"Cumulative \n\n Cumulative type inherits from dynamic object\n \nCumulative.( .ctor ) \n( .ctor ) \nCumulative.init \ninit \nCumulative.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-cumulative.html#( .ctor )","title":"Cumulative.( .ctor )","content":"Cumulative.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-cumulative.html#init","title":"Cumulative.init","content":"Cumulative.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-cumulative.html#style","title":"Cumulative.style","content":"Cumulative.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-dimensions.html","title":"Dimensions","content":"Dimensions \n\n Dimensions type inherits from dynamic object\n \nDimensions.( .ctor ) \n( .ctor ) \nDimensions.init \ninit \nDimensions.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-dimensions.html#( .ctor )","title":"Dimensions.( .ctor )","content":"Dimensions.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-dimensions.html#init","title":"Dimensions.init","content":"Dimensions.init \ninit \n\n Initialized Dimensions object\n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-dimensions.html#style","title":"Dimensions.style","content":"Dimensions.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-error.html","title":"Error","content":"Error \n\n Error type inherits from dynamic object\n \nError.( .ctor ) \n( .ctor ) \nError.init \ninit \nError.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-error.html#( .ctor )","title":"Error.( .ctor )","content":"Error.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-error.html#init","title":"Error.init","content":"Error.init \ninit \nInit Error type"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-error.html#style","title":"Error.style","content":"Error.style \nstyle \nCreates a function that applies the given style parameters to an Error object"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-fontselectionstyle.html","title":"FontSelectionStyle","content":"FontSelectionStyle \n \nFontSelectionStyle.( .ctor ) \n( .ctor ) \nFontSelectionStyle.init \ninit \nFontSelectionStyle.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-fontselectionstyle.html#( .ctor )","title":"FontSelectionStyle.( .ctor )","content":"FontSelectionStyle.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-fontselectionstyle.html#init","title":"FontSelectionStyle.init","content":"FontSelectionStyle.init \ninit \n\n Init Font()\n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-fontselectionstyle.html#style","title":"FontSelectionStyle.style","content":"FontSelectionStyle.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-funnelconnector.html","title":"FunnelConnector","content":"FunnelConnector \n\n Styles for connector lines in Funnel Charts.\n\n Parameters:\n\n Line          : Sets the Line style for this WaterfallConnector\n\n Visible       : Wether or not connectors are visible\n\n ConnectorMode : Sets the shape of connector lines.\n \nFunnelConnector.( .ctor ) \n( .ctor ) \nFunnelConnector.init \ninit \nFunnelConnector.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-funnelconnector.html#( .ctor )","title":"FunnelConnector.( .ctor )","content":"FunnelConnector.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-funnelconnector.html#init","title":"FunnelConnector.init","content":"FunnelConnector.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-funnelconnector.html#style","title":"FunnelConnector.style","content":"FunnelConnector.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-gradient.html","title":"Gradient","content":"Gradient \n \nGradient.( .ctor ) \n( .ctor ) \nGradient.init \ninit \nGradient.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-gradient.html#( .ctor )","title":"Gradient.( .ctor )","content":"Gradient.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-gradient.html#init","title":"Gradient.init","content":"Gradient.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-gradient.html#style","title":"Gradient.style","content":"Gradient.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-icicleleaf.html","title":"IcicleLeaf","content":"IcicleLeaf \n \nIcicleLeaf.( .ctor ) \n( .ctor ) \nIcicleLeaf.init \ninit \nIcicleLeaf.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-icicleleaf.html#( .ctor )","title":"IcicleLeaf.( .ctor )","content":"IcicleLeaf.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-icicleleaf.html#init","title":"IcicleLeaf.init","content":"IcicleLeaf.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-icicleleaf.html#style","title":"IcicleLeaf.style","content":"IcicleLeaf.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-icicleroot.html","title":"IcicleRoot","content":"IcicleRoot \n \nIcicleRoot.( .ctor ) \n( .ctor ) \nIcicleRoot.init \ninit \nIcicleRoot.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-icicleroot.html#( .ctor )","title":"IcicleRoot.( .ctor )","content":"IcicleRoot.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-icicleroot.html#init","title":"IcicleRoot.init","content":"IcicleRoot.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-icicleroot.html#style","title":"IcicleRoot.style","content":"IcicleRoot.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-icicletiling.html","title":"IcicleTiling","content":"IcicleTiling \n \nIcicleTiling.( .ctor ) \n( .ctor ) \nIcicleTiling.init \ninit \nIcicleTiling.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-icicletiling.html#( .ctor )","title":"IcicleTiling.( .ctor )","content":"IcicleTiling.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-icicletiling.html#init","title":"IcicleTiling.init","content":"IcicleTiling.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-icicletiling.html#style","title":"IcicleTiling.style","content":"IcicleTiling.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-indicatorbar.html","title":"IndicatorBar","content":"IndicatorBar \n \nIndicatorBar.( .ctor ) \n( .ctor ) \nIndicatorBar.init \ninit \nIndicatorBar.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-indicatorbar.html#( .ctor )","title":"IndicatorBar.( .ctor )","content":"IndicatorBar.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-indicatorbar.html#init","title":"IndicatorBar.init","content":"IndicatorBar.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-indicatorbar.html#style","title":"IndicatorBar.style","content":"IndicatorBar.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-indicatordelta.html","title":"IndicatorDelta","content":"IndicatorDelta \n \nIndicatorDelta.( .ctor ) \n( .ctor ) \nIndicatorDelta.init \ninit \nIndicatorDelta.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-indicatordelta.html#( .ctor )","title":"IndicatorDelta.( .ctor )","content":"IndicatorDelta.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-indicatordelta.html#init","title":"IndicatorDelta.init","content":"IndicatorDelta.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-indicatordelta.html#style","title":"IndicatorDelta.style","content":"IndicatorDelta.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-indicatorgauge.html","title":"IndicatorGauge","content":"IndicatorGauge \n \nIndicatorGauge.( .ctor ) \n( .ctor ) \nIndicatorGauge.init \ninit \nIndicatorGauge.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-indicatorgauge.html#( .ctor )","title":"IndicatorGauge.( .ctor )","content":"IndicatorGauge.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-indicatorgauge.html#init","title":"IndicatorGauge.init","content":"IndicatorGauge.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-indicatorgauge.html#style","title":"IndicatorGauge.style","content":"IndicatorGauge.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-indicatornumber.html","title":"IndicatorNumber","content":"IndicatorNumber \n \nIndicatorNumber.( .ctor ) \n( .ctor ) \nIndicatorNumber.init \ninit \nIndicatorNumber.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-indicatornumber.html#( .ctor )","title":"IndicatorNumber.( .ctor )","content":"IndicatorNumber.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-indicatornumber.html#init","title":"IndicatorNumber.init","content":"IndicatorNumber.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-indicatornumber.html#style","title":"IndicatorNumber.style","content":"IndicatorNumber.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-indicatorsteps.html","title":"IndicatorSteps","content":"IndicatorSteps \n \nIndicatorSteps.( .ctor ) \n( .ctor ) \nIndicatorSteps.init \ninit \nIndicatorSteps.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-indicatorsteps.html#( .ctor )","title":"IndicatorSteps.( .ctor )","content":"IndicatorSteps.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-indicatorsteps.html#init","title":"IndicatorSteps.init","content":"IndicatorSteps.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-indicatorsteps.html#style","title":"IndicatorSteps.style","content":"IndicatorSteps.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-indicatorsymbol.html","title":"IndicatorSymbol","content":"IndicatorSymbol \n \nIndicatorSymbol.( .ctor ) \n( .ctor ) \nIndicatorSymbol.init \ninit \nIndicatorSymbol.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-indicatorsymbol.html#( .ctor )","title":"IndicatorSymbol.( .ctor )","content":"IndicatorSymbol.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-indicatorsymbol.html#init","title":"IndicatorSymbol.init","content":"IndicatorSymbol.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-indicatorsymbol.html#style","title":"IndicatorSymbol.style","content":"IndicatorSymbol.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-indicatorthreshold.html","title":"IndicatorThreshold","content":"IndicatorThreshold \n \nIndicatorThreshold.( .ctor ) \n( .ctor ) \nIndicatorThreshold.init \ninit \nIndicatorThreshold.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-indicatorthreshold.html#( .ctor )","title":"IndicatorThreshold.( .ctor )","content":"IndicatorThreshold.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-indicatorthreshold.html#init","title":"IndicatorThreshold.init","content":"IndicatorThreshold.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-indicatorthreshold.html#style","title":"IndicatorThreshold.style","content":"IndicatorThreshold.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-lightposition.html","title":"LightPosition","content":"LightPosition \n \nLightPosition.( .ctor ) \n( .ctor ) \nLightPosition.init \ninit \nLightPosition.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-lightposition.html#( .ctor )","title":"LightPosition.( .ctor )","content":"LightPosition.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-lightposition.html#init","title":"LightPosition.init","content":"LightPosition.init \ninit \n\n Initialize a LightPosition object\n "},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-lightposition.html#style","title":"LightPosition.style","content":"LightPosition.style \nstyle \n\n Creates a function that applies the given style parameters to a LightPosition object\n "},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-lighting.html","title":"Lighting","content":"Lighting \n\n An object to set the Lighting of a 3D Scene\n \nLighting.( .ctor ) \n( .ctor ) \nLighting.init \ninit \nLighting.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-lighting.html#( .ctor )","title":"Lighting.( .ctor )","content":"Lighting.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-lighting.html#init","title":"Lighting.init","content":"Lighting.init \ninit \n\n Initialize a Lighting object\n "},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-lighting.html#style","title":"Lighting.style","content":"Lighting.style \nstyle \n\n Creates a function that applies the given style parameters to a Lighting object\n "},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-marker.html","title":"Marker","content":"Marker \n\n Marker type inherits from dynamic object\n \nMarker.( .ctor ) \n( .ctor ) \nMarker.init \ninit \nMarker.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-marker.html#( .ctor )","title":"Marker.( .ctor )","content":"Marker.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-marker.html#init","title":"Marker.init","content":"Marker.init \ninit \n\n Initialized Marker object\n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-marker.html#style","title":"Marker.style","content":"Marker.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-markerselectionstyle.html","title":"MarkerSelectionStyle","content":"MarkerSelectionStyle \n \nMarkerSelectionStyle.( .ctor ) \n( .ctor ) \nMarkerSelectionStyle.init \ninit \nMarkerSelectionStyle.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-markerselectionstyle.html#( .ctor )","title":"MarkerSelectionStyle.( .ctor )","content":"MarkerSelectionStyle.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-markerselectionstyle.html#init","title":"MarkerSelectionStyle.init","content":"MarkerSelectionStyle.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-markerselectionstyle.html#style","title":"MarkerSelectionStyle.style","content":"MarkerSelectionStyle.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-meanline.html","title":"MeanLine","content":"MeanLine \n\n Meanline type inherits from dynamic object (parent violin)\n \nMeanLine.( .ctor ) \n( .ctor ) \nMeanLine.init \ninit \nMeanLine.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-meanline.html#( .ctor )","title":"MeanLine.( .ctor )","content":"MeanLine.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-meanline.html#init","title":"MeanLine.init","content":"MeanLine.init \ninit \n\n Initialized Line object\n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-meanline.html#style","title":"MeanLine.style","content":"MeanLine.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-pathbar.html","title":"Pathbar","content":"Pathbar \n \nPathbar.( .ctor ) \n( .ctor ) \nPathbar.init \ninit \nPathbar.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-pathbar.html#( .ctor )","title":"Pathbar.( .ctor )","content":"Pathbar.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-pathbar.html#init","title":"Pathbar.init","content":"Pathbar.init \ninit \n\nInitializes pathbar object (used in Chart.Treemap)\n\nParameters:\n\nVisible  : Determines if the path bar is drawn i.e. outside the trace \u0060domain\u0060 and with one pixel gap.\n         \nSide     : Determines on which side of the the treemap the \u0060pathbar\u0060 should be presented.\n         \nEdgeShape: Determines which shape is used for edges between \u0060pathbar\u0060 labels.\n         \nThickness: Sets the thickness of \u0060pathbar\u0060 (in px). If not specified the \u0060pathbar.textfont.size\u0060 is used with 3 pixles extra padding on each side.\n         \nTextfont : Sets the font used inside \u0060pathbar\u0060.\n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-pathbar.html#style","title":"Pathbar.style","content":"Pathbar.style \nstyle \n\nApplies the given styles to the given pathbar object \n\nParameters:\n\nVisible  : Determines if the path bar is drawn i.e. outside the trace \u0060domain\u0060 and with one pixel gap.\n         \nSide     : Determines on which side of the the treemap the \u0060pathbar\u0060 should be presented.\n         \nEdgeShape: Determines which shape is used for edges between \u0060pathbar\u0060 labels.\n         \nThickness: Sets the thickness of \u0060pathbar\u0060 (in px). If not specified the \u0060pathbar.textfont.size\u0060 is used with 3 pixles extra padding on each side.\n         \nTextfont : Sets the font used inside \u0060pathbar\u0060.\n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-pattern.html","title":"Pattern","content":"Pattern \n \nPattern.( .ctor ) \n( .ctor ) \nPattern.init \ninit \nPattern.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-pattern.html#( .ctor )","title":"Pattern.( .ctor )","content":"Pattern.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-pattern.html#init","title":"Pattern.init","content":"Pattern.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-pattern.html#style","title":"Pattern.style","content":"Pattern.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-projection.html","title":"Projection","content":"Projection \n \nProjection.( .ctor ) \n( .ctor ) \nProjection.init \ninit \nProjection.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-projection.html#( .ctor )","title":"Projection.( .ctor )","content":"Projection.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-projection.html#init","title":"Projection.init","content":"Projection.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-projection.html#style","title":"Projection.style","content":"Projection.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-projectiondimension.html","title":"ProjectionDimension","content":"ProjectionDimension \n \nProjectionDimension.( .ctor ) \n( .ctor ) \nProjectionDimension.init \ninit \nProjectionDimension.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-projectiondimension.html#( .ctor )","title":"ProjectionDimension.( .ctor )","content":"ProjectionDimension.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-projectiondimension.html#init","title":"ProjectionDimension.init","content":"ProjectionDimension.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-projectiondimension.html#style","title":"ProjectionDimension.style","content":"ProjectionDimension.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-selection.html","title":"Selection","content":"Selection \n \nSelection.( .ctor ) \n( .ctor ) \nSelection.init \ninit \nSelection.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-selection.html#( .ctor )","title":"Selection.( .ctor )","content":"Selection.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-selection.html#init","title":"Selection.init","content":"Selection.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-selection.html#style","title":"Selection.style","content":"Selection.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-slices.html","title":"Slices","content":"Slices \n \nSlices.( .ctor ) \n( .ctor ) \nSlices.init \ninit \nSlices.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-slices.html#( .ctor )","title":"Slices.( .ctor )","content":"Slices.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-slices.html#init","title":"Slices.init","content":"Slices.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-slices.html#style","title":"Slices.style","content":"Slices.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-slicesfill.html","title":"SlicesFill","content":"SlicesFill \n \nSlicesFill.( .ctor ) \n( .ctor ) \nSlicesFill.init \ninit \nSlicesFill.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-slicesfill.html#( .ctor )","title":"SlicesFill.( .ctor )","content":"SlicesFill.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-slicesfill.html#init","title":"SlicesFill.init","content":"SlicesFill.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-slicesfill.html#style","title":"SlicesFill.style","content":"SlicesFill.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-spaceframe.html","title":"Spaceframe","content":"Spaceframe \n \nSpaceframe.( .ctor ) \n( .ctor ) \nSpaceframe.init \ninit \nSpaceframe.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-spaceframe.html#( .ctor )","title":"Spaceframe.( .ctor )","content":"Spaceframe.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-spaceframe.html#init","title":"Spaceframe.init","content":"Spaceframe.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-spaceframe.html#style","title":"Spaceframe.style","content":"Spaceframe.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-stockdata.html","title":"StockData","content":"StockData \n \nStockData.Create \nCreate \nStockData.create \ncreate \nStockData.Open \nOpen \nStockData.High \nHigh \nStockData.Low \nLow \nStockData.Close \nClose"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-stockdata.html#Create","title":"StockData.Create","content":"StockData.Create \nCreate \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-stockdata.html#create","title":"StockData.create","content":"StockData.create \ncreate \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-stockdata.html#Open","title":"StockData.Open","content":"StockData.Open \nOpen \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-stockdata.html#High","title":"StockData.High","content":"StockData.High \nHigh \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-stockdata.html#Low","title":"StockData.Low","content":"StockData.Low \nLow \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-stockdata.html#Close","title":"StockData.Close","content":"StockData.Close \nClose \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-streamtubestarts.html","title":"StreamTubeStarts","content":"StreamTubeStarts \n\n An object to set the Lighting of a 3D Scene\n \nStreamTubeStarts.( .ctor ) \n( .ctor ) \nStreamTubeStarts.init \ninit \nStreamTubeStarts.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-streamtubestarts.html#( .ctor )","title":"StreamTubeStarts.( .ctor )","content":"StreamTubeStarts.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-streamtubestarts.html#init","title":"StreamTubeStarts.init","content":"StreamTubeStarts.init \ninit \n\n Initializes a TubeStarts object\n "},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-streamtubestarts.html#style","title":"StreamTubeStarts.style","content":"StreamTubeStarts.style \nstyle \n\n Creates a function that applies the given style parameters to a TubeStarts object\n "},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-surface.html","title":"Surface","content":"Surface \n \nSurface.( .ctor ) \n( .ctor ) \nSurface.init \ninit \nSurface.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-surface.html#( .ctor )","title":"Surface.( .ctor )","content":"Surface.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-surface.html#init","title":"Surface.init","content":"Surface.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-surface.html#style","title":"Surface.style","content":"Surface.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-tablecells.html","title":"TableCells","content":"TableCells \n\n Cells type inherits from dynamic object\n \nTableCells.( .ctor ) \n( .ctor ) \nTableCells.init \ninit \nTableCells.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-tablecells.html#( .ctor )","title":"TableCells.( .ctor )","content":"TableCells.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-tablecells.html#init","title":"TableCells.init","content":"TableCells.init \ninit \n\n Initialized Cells object\n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-tablecells.html#style","title":"TableCells.style","content":"TableCells.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-tableheader.html","title":"TableHeader","content":"TableHeader \n\n Header type inherits from dynamic object\n \nTableHeader.( .ctor ) \n( .ctor ) \nTableHeader.init \ninit \nTableHeader.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-tableheader.html#( .ctor )","title":"TableHeader.( .ctor )","content":"TableHeader.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-tableheader.html#init","title":"TableHeader.init","content":"TableHeader.init \ninit \n\n Initialized Header object\n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-tableheader.html#style","title":"TableHeader.style","content":"TableHeader.style \nstyle \n\n Applies the styles to TableHeader()\n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-treemaptiling.html","title":"TreemapTiling","content":"TreemapTiling \n \nTreemapTiling.( .ctor ) \n( .ctor ) \nTreemapTiling.init \ninit \nTreemapTiling.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-treemaptiling.html#( .ctor )","title":"TreemapTiling.( .ctor )","content":"TreemapTiling.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-treemaptiling.html#init","title":"TreemapTiling.init","content":"TreemapTiling.init \ninit \n\nInitializes tiling object (used in Chart.Treemap)\n\nParameters:\n\nPacking      : Determines d3 treemap solver. For more info please refer to https://github.com/d3/d3-hierarchy#treemap-tiling\n         \nSquarifyRatio: When using \u0022squarify\u0022 \u0060packing\u0060 algorithm, according to https://github.com/d3/d3-hierarchy/blob/master/README.md#squarify_ratio this option specifies the desired aspect ratio of the generated rectangles. The ratio must be specified as a number greater than or equal to one. Note that the orientation of the generated rectangles (tall or wide) is not implied by the ratio; for example, a ratio of two will attempt to produce a mixture of rectangles whose width:height ratio is either 2:1 or 1:2. When using \u0022squarify\u0022, unlike d3 which uses the Golden Ratio i.e. 1.618034, Plotly applies 1 to increase squares in treemap layouts.\n         \nFlip         : Determines if the positions obtained from solver are flipped on each axis.\n         \nPad          : Sets the inner padding (in px).\n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-treemaptiling.html#style","title":"TreemapTiling.style","content":"TreemapTiling.style \nstyle \n\nApplies the given styles to the given tiling object \n\nParameters:\n\nPacking      : Determines d3 treemap solver. For more info please refer to https://github.com/d3/d3-hierarchy#treemap-tiling\n         \nSquarifyRatio: When using \u0022squarify\u0022 \u0060packing\u0060 algorithm, according to https://github.com/d3/d3-hierarchy/blob/master/README.md#squarify_ratio this option specifies the desired aspect ratio of the generated rectangles. The ratio must be specified as a number greater than or equal to one. Note that the orientation of the generated rectangles (tall or wide) is not implied by the ratio; for example, a ratio of two will attempt to produce a mixture of rectangles whose width:height ratio is either 2:1 or 1:2. When using \u0022squarify\u0022, unlike d3 which uses the Golden Ratio i.e. 1.618034, Plotly applies 1 to increase squares in treemap layouts.\n         \nFlip         : Determines if the positions obtained from solver are flipped on each axis.\n         \nPad          : Sets the inner padding (in px).\n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-waterfallconnector.html","title":"WaterfallConnector","content":"WaterfallConnector \n\n Styles for connector lines in Waterfall Charts.\n\n Parameters:\n\n Line          : Sets the Line style for this WaterfallConnector\n\n Visible       : Wether or not connectors are visible\n\n ConnectorMode : Sets the shape of connector lines.\n \nWaterfallConnector.( .ctor ) \n( .ctor ) \nWaterfallConnector.init \ninit \nWaterfallConnector.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-waterfallconnector.html#( .ctor )","title":"WaterfallConnector.( .ctor )","content":"WaterfallConnector.( .ctor ) \n( .ctor ) \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-waterfallconnector.html#init","title":"WaterfallConnector.init","content":"WaterfallConnector.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-waterfallconnector.html#style","title":"WaterfallConnector.style","content":"WaterfallConnector.style \nstyle \n"},{"uri":"https://plotly.net/00_0_basics.html","title":"Basics","content":"(**\n---\ntitle: Basics \ncategory: General\ncategoryindex: 1\nindex: 1\n---\n*)\n\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 12.0.3\u0022\n#r \u0022nuget: DynamicObj\u0022\nopen DynamicObj\n#r \u0022../bin/Plotly.NET/netstandard2.0/Plotly.NET.dll\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\nopen Plotly.NET\n\n(**\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/Plotly.NET/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n# Plotly.NET basics\n\n_This section is WIP._\n\n### Table of contents\n\n- [GenericChart](#GenericChart)\n- [Working with GenericCharts](#Working-with-GenericCharts)\n    - [Dynamic object style](#Dynamic-object-style)\n\n## GenericChart\n\n\nPlotly.NET is a .NET wrapper for creation of [plotly charts]() written in F#. This means that, under the hood, all functionality creates JSON objects that can be rendered by plotly.\n\nThe central type that gets created by all Chart constructors is \u0060GenericChart\u0060, which itself represents either a single chart or a multi chart (as a Discriminate Union type). It looks like this:\n\n*)\n\n(***do-not-eval***)\n[\u003CNoComparison\u003E]\ntype GenericChart =\n    | Chart of Trace * Layout * Config * DisplayOptions\n    | MultiChart of Trace list * Layout * Config * DisplayOptions\n\n(**\nAs you can see, a \u0060GenericChart\u0060 consists of four top level objects - \u0060Trace\u0060 (multiple of those in the case of a MultiChart) , \u0060Layout\u0060, \u0060Config\u0060, and \u0060DisplayOptions\u0060.\n\n- \u0060Trace\u0060 is in principle the representation of a dataset on a chart, including for example the data itself, color and shape of the visualization, etc.\n- \u0060Layout\u0060 is everything of the chart that is not dataset specifivc - e.g. the shape and style of axes, the chart title, etc.\n- \u0060Config\u0060 is an object that configures high level properties of the chart like making all chart elements editable or the tool bar on top\n- \u0060DisplayOptions\u0060 is an object that contains meta information about how the html document that contains the chart.\n\n## Working with GenericCharts\n\n### Dynamic object style\n\nPlotly.NET has multiple abstraction layers to work with \u0060GenericChart\u0060s. The prime directive for all functions provided by this library is the construction of valid plotly JSON objects.\nFor this purpose, \u0060Trace\u0060, \u0060Layout\u0060, and \u0060Config\u0060 (and many other internal objects) are inheriting from [\u0060DynamicObj\u0060](https://github.com/plotly/Plotly.NET/blob/dev/src/Plotly.NET/DynamicObj.fs),\nan extension of \u0060DynamicObject\u0060 which makes it possible to set arbitraryly named and typed properties of these objects via the \u0060?\u0060 operator.\n\nSo if you want to set any kind of property on one of these objects you can do it in a very declarative way like this:\n*)\n\nlet myTrace = Trace(\u0022scatter\u0022) // create a scatter trace\nmyTrace?x \u003C- [0;1;2] // set the x property (the x dimension of the data)\nmyTrace?y \u003C- [0;1;2] // set the y property (the y dimension of the data)\n\nGenericChart.ofTraceObject false myTrace // create a generic chart (layout and config are empty objects. When using useDefaults = true, default styling will be applied.)\n|\u003E Chart.show\n\n(**\nlets have a look at the trace object that will be created. The relevant section of the html generated with Chart.Show is the following:\n\n\u0060\u0060\u0060javascript\nvar data = [{\u0022type\u0022:\u0022scatter\u0022,\u0022x\u0022:[0,1,2],\u0022y\u0022:[0,1,2]}];\n\u0060\u0060\u0060\n\n*)"},{"uri":"https://plotly.net/02_0_line-scatter-plots.html","title":"Line and scatter plots","content":"(**\n---\ntitle: Line and scatter plots\ncategory: Simple Charts\ncategoryindex: 3\nindex: 1\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 12.0.3\u0022\n#r \u0022nuget: DynamicObj\u0022\n#r \u0022../bin/Plotly.NET/netstandard2.0/Plotly.NET.dll\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# Line and scatter plots\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/Plotly.NET/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create line and point charts in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n\n*)\n\nopen Plotly.NET \n  \nlet x  = [1.; 2.; 3.; 4.; 5.; 6.; 7.; 8.; 9.; 10.; ]\nlet y = [2.; 1.5; 5.; 1.5; 3.; 2.5; 2.5; 1.5; 3.5; 1.]\n\n(**\n\nA line or a point chart can be created using the \u0060Chart.Line\u0060 and \u0060Chart.Point\u0060 functions. \n\n## Chart.Line with LineStyle\n\nThe following example generates a line Plot containing X and Y values and applies a line style to it.\n*)\n\nlet line1 =\n    Chart.Line(\n        x,y,\n        Name=\u0022line\u0022,\n        ShowMarkers=true,\n        MarkerSymbol=StyleParam.MarkerSymbol.Square)    \n    |\u003E Chart.withLineStyle(Width=2.,Dash=StyleParam.DrawingStyle.Dot)\n\n(*** condition: ipynb ***)\n#if IPYNB\nline1\n#endif // IPYNB\n\n(***hide***)\nline1 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(** \n\n## Pipelining into Chart.Line\nThe following example calls the \u0060Chart.Line\u0060 method with a list of X and Y values as tuples. The snippet generates\nvalues of a simple function, f(x)=x^2. The values of the function are generated for X ranging from 1 to 100. The chart generated is \nshown below.\n*)\n\nlet line2 =\n    // Drawing graph of a \u0027square\u0027 function \n    [ for x in 1.0 .. 100.0 -\u003E (x, x ** 2.0) ]\n    |\u003E Chart.Line\n\n(*** condition: ipynb ***)\n#if IPYNB\nline2\n#endif // IPYNB\n\n(***hide***)\nline2 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n## Spline charts\n\nSpline charts interpolate the curves between single points of \nthe chart to generate a smoother version of the line chart.\n*)\n\nlet spline1 = Chart.Spline(x,y,Name=\u0022spline\u0022)    \n\n(*** condition: ipynb ***)\n#if IPYNB\nspline1\n#endif // IPYNB\n\n(***hide***)\nspline1 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\nlet spline2 = \n    Chart.Spline(\n        x,y,\n        Name=\u0022spline\u0022,\n        Smoothing = 0.4\n    )      \n    \n(*** condition: ipynb ***)\n#if IPYNB\nspline2\n#endif // IPYNB\n\n(***hide***)\nspline2 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(** \n## Point chart with text label\n\nThe following example calls the \u0060Chart.Point\u0060 function to generate a scatter Plot containing X and Y values.\nAddtionally, text labels are added . \n\nIf \u0060TextPosition\u0060 is set the labels are drawn otherwise only shown when hovering over the points.\n*)\n\n\nlet labels  = [\u0022a\u0022;\u0022b\u0022;\u0022c\u0022;\u0022d\u0022;\u0022e\u0022;\u0022f\u0022;\u0022g\u0022;\u0022h\u0022;\u0022i\u0022;\u0022j\u0022;]\n\nlet pointsWithLabels =\n    Chart.Point(\n        x,y,\n        Name=\u0022points\u0022,\n        Labels=labels,\n        TextPosition=StyleParam.TextPosition.TopRight\n    )    \n\n(*** condition: ipynb ***)\n#if IPYNB\npointsWithLabels\n#endif // IPYNB\n\n(***hide***)\npointsWithLabels |\u003E GenericChart.toChartHTML\n(***include-it-raw***)"},{"uri":"https://plotly.net/06_2_choropleth-mapbox.html","title":"ChoroplethMapbox","content":"(**\n---\ntitle: ChoroplethMapbox\ncategory: Mapbox map charts\ncategoryindex: 7\nindex: 3\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 12.0.3\u0022\n#r \u0022nuget: DynamicObj\u0022\n#r \u0022../bin/Plotly.NET/netstandard2.0/Plotly.NET.dll\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# ChoroplethMapbox\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/Plotly.NET/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create choropleth maps using Mapbox layers in F#.\n\nChoropleth Maps display divided geographical areas or regions that are coloured, shaded or patterned in relation to \na data variable. This provides a way to visualise values over a geographical area, which can show variation or \npatterns across the displayed location.\n\nThis choropleth map version uses [Mapbox Layers]({{root}}/6_0_geo-vs-mapbox.html). For the Geo variant, head over [here]({{root}}/5_2_choropleth-map.html)\n\nChoroplethMapbox charts need GeoJSON formatted data.\n\n[GeoJSON](https://en.wikipedia.org/wiki/GeoJSON) is an open standard format designed for representing simple geographical features, along with their non-spatial attributes.\n\nGeoJSON, or at least the type of GeoJSON accepted by plotly.js are \u0060FeatureCollection\u0060s. A feature has for example the \u0060geometry\u0060 field, which defines e.g. the corrdinates of it (think for example the coordinates of a polygon on the map)\nand the \u0060properties\u0060 field, a key-value pair of properties of the feature. \n\nIf you want to use GeoJSON with Plotly.NET (or any plotly flavor really), you have to know the property of the feature you are mapping your data to. In the following example this is simply the \u0060id\u0060 of a feature, but you can access any property by \u0060property.key\u0060.\n\nConsider the following GeoJSON:\n*)\n\n// we are using the awesome FSharp.Data project here to perform a http request\n#r \u0022nuget: FSharp.Data\u0022\n\nopen FSharp.Data\nopen Newtonsoft.Json\n\nlet geoJson = \n    Http.RequestString \u0022https://raw.githubusercontent.com/plotly/datasets/master/geojson-counties-fips.json\u0022\n    |\u003E JsonConvert.DeserializeObject // the easiest way to use the GeoJSON object is deserializing the JSON string.\n\n(**\nit looks like this:\n\n\u0060\u0060\u0060JSON\n{\n    \u0022type\u0022: \u0022FeatureCollection\u0022, \n    \u0022features\u0022: [{\n        \u0022type\u0022: \u0022Feature\u0022, \n        \u0022properties\u0022: {\n            \u0022GEO_ID\u0022: \u00220500000US01001\u0022, \n            \u0022STATE\u0022: \u002201\u0022, \n            \u0022COUNTY\u0022: \u0022001\u0022, \n            \u0022NAME\u0022: \u0022Autauga\u0022, \n            \u0022LSAD\u0022: \u0022County\u0022, \n            \u0022CENSUSAREA\u0022: 594.436\n        }, \n        \u0022geometry\u0022: {\n            \u0022type\u0022: \u0022Polygon\u0022, \n            \u0022coordinates\u0022: [[[-86.496774, 32.344437], [-86.717897, 32.402814], [-86.814912, 32.340803], [-86.890581, 32.502974], [-86.917595, 32.664169], [-86.71339, 32.661732], [-86.714219, 32.705694], [-86.413116, 32.707386], [-86.411172, 32.409937], [-86.496774, 32.344437]]]\n        },\n        \u0022id\u0022: \u002201001\u0022\n    }, ... MANY more features.\n\u0060\u0060\u0060\n\nIt basically contains all US counties as polygons on the map. Note that the \u0060id\u0060 property corresponds to the [**fips code**](https://en.wikipedia.org/wiki/FIPS_county_code).\n\nTo visualize some data using these counties as locations on a choropleth map, we need some exmaple data:\n*)\n\n// we use the awesome Deedle data frame library to parse and extract our location and z data\n#r \u0022nuget: Deedle\u0022\nopen Deedle\n\nlet data = \n    Http.RequestString \u0022https://raw.githubusercontent.com/plotly/datasets/master/fips-unemp-16.csv\u0022\n    |\u003E fun csv -\u003E Frame.ReadCsvString(csv,true,separators=\u0022,\u0022,schema=\u0022fips=string,unemp=float\u0022)\n\n(**\nThe data looks like this:\n*)\n\ndata.Print()\n\n(*** include-output ***)\n\n(**\nAs the data contains the fips code and associated unemployment data, we can use the fips codes as locations and the unemployment as z data:\n*)\n\nlet locations: string [] = \n    data\n    |\u003E Frame.getCol \u0022fips\u0022\n    |\u003E Series.values\n    |\u003E Array.ofSeq\n\nlet z: int [] = \n    data\n    |\u003E Frame.getCol \u0022unemp\u0022\n    |\u003E Series.values\n    |\u003E Array.ofSeq\n\n\n(**\nAnd finally put together the chart using GeoJSON:\n*)\n\nopen Plotly.NET\nopen Plotly.NET.LayoutObjects\n\nlet choroplethMapbox =\n    Chart.ChoroplethMapbox(\n        locations = locations,\n        z = z,\n        geoJson = geoJson,\n        FeatureIdKey=\u0022id\u0022\n    )\n    |\u003E Chart.withMapbox(\n        Mapbox.init(\n            Style=StyleParam.MapboxStyle.OpenStreetMap, // Use the free open street map base map layer\n            Center=(-104.6,50.45)\n        ) \n    )\n\n(*** condition: ipynb ***)\n#if IPYNB\nchoroplethMapbox\n#endif // IPYNB\n\n(***hide***)\nchoroplethMapbox |\u003E GenericChart.toChartHTML\n(***include-it-raw***)"},{"uri":"https://plotly.net/06_0_geo-vs-mapbox.html","title":"Geo vs. Mapbox","content":"(**\n---\ntitle: Geo vs. Mapbox\ncategory: Mapbox map charts\ncategoryindex: 7\nindex: 1\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 12.0.3\u0022\n#r \u0022nuget: DynamicObj\u0022\n#r \u0022../bin/Plotly.NET/netstandard2.0/Plotly.NET.dll\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# Mapbox Maps vs Geo Maps\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/Plotly.NET/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This introduction shows the differences between Geo and Mapbox based geographical charts.\n\nPlotly and therefore Plotly.NET supports two different kinds of maps:\n\n- **Mapbox maps** are tile-based maps. If your figure is created with a \u0060Chart.*Mapbox\u0060 function or otherwise contains one or more traces of type \u0060scattermapbox\u0060, \n    \u0060choroplethmapbox\u0060 or \u0060densitymapbox\u0060, the layout.mapbox object in your figure contains configuration information for the map itself.\n    \n- **Geo maps** are outline-based maps. If your figure is created with a \u0060Chart.ScatterGeo, \u0060Chart.PointGeo\u0060, \u0060Chart.LineGeo\u0060 or \u0060Chart.Choropleth\u0060 function or \n    otherwise contains one or more traces of type \u0060scattergeo\u0060 or \u0060choropleth\u0060, the layout.geo object in your figure contains configuration information for the map itself.\n    \n_This page documents Mapbox tile-based maps, and the [Geo map documentation]({{root}}/05_0_geo-vs-mapbox.html) describes how to configure outline-based maps_\n\n## How Layers Work in Mapbox Tile Maps\n\nMapbox tile maps are composed of various layers, of three different types:\n\n- the \u0060style\u0060 property of the \u0060Mapbox\u0060 object defines is the lowest layers, also known as your \u0022base map\u0022\n- The various traces in data are by default rendered above the base map (although this can be controlled via the below attribute).\n- the \u0060layers\u0060 property of the \u0060Mapbox\u0060 object is an array that defines more layers that are by default rendered above the traces in data (although this can also be controlled via the below attribute).\n    \na \u0060Mapbox\u0060 object where these properties can be set can be initialized via \u0060Mapbox.init\u0060. To use it in a chart, use the \u0060Chart.withMapbox\u0060 function:\n*)\nopen Plotly.NET\nopen Plotly.NET.LayoutObjects\n\n// a simple Mapbox with a OpenStreetMap base layer.\nlet mb =\n    Mapbox.init(\n        Style = StyleParam.MapboxStyle.OpenStreetMap\n    )\n\nlet baseLayerOnly = \n    Chart.PointMapbox([],[]) // deliberately empty chart to show the base map only\n    |\u003E Chart.withMapbox mb // add the mapBox\n\n(*** condition: ipynb ***)\n#if IPYNB\nbaseLayerOnly\n#endif // IPYNB\n\n(***hide***)\nbaseLayerOnly |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n\n## Mapbox Access Tokens and When You Need Them\n\nThe word \u0022mapbox\u0022 in the trace names and layout.mapbox refers to the Mapbox GL JS open-source library, which is integrated into Plotly.NET. \n\nIf your basemap uses data from the Mapbox service, then you will need to register for a free account at https://mapbox.com/ \nand obtain a Mapbox Access token. \n\nThis token should be provided via the \u0060AccessToken\u0060 property:\n*)\n\nlet mbWithToken =\n    Mapbox.init(\n        Style = StyleParam.MapboxStyle.OpenStreetMap,\n        AccessToken = \u0022your_token_here\u0022\n    )\n\n(**\n\nIf your base map does not use data from the Mapbox service, you do not need to register for a Mapbox account.\n\n## Base Maps\n\n- \u0060WhiteBG\u0060 yields an empty white canvas which results in no external HTTP requests\n- The plotly presets yield maps composed of raster tiles from various public tile servers which do not require signups or access tokens\n- The Mapbox presets yield maps composed of vector tiles from the Mapbox service, and do require a Mapbox Access Token or an on-premise Mapbox installation.\n- Use \u0060StyleParam.MapboxStyle.Custom\u0060 for:\n    - Mapbox service style URL, which requires a Mapbox Access Token or an on-premise Mapbox installation.\n    - A Mapbox Style object as defined at https://docs.mapbox.com/mapbox-gl-js/style-spec/\n\n\nThe accepted values for the \u0060style\u0060 property of the \u0060Mapbox\u0060 object are represented in \u0060StyleParam.MapboxStyle\u0060:\n\n*)\ntype MapboxStyle =\n    // plotly presets, no token needed\n    | WhiteBG\n    | OpenStreetMap\n    | CartoPositron\n    | CartoDarkmatter\n    | StamenTerrain\n    | StamenToner\n    | StamenWatercolor\n\n    // Mapbox presets, you might need a free token\n    | MapboxBasic\n    | MapboxStreets\n    | MapboxOutdoors\n    | MapboxLight\n    | MapboxDark\n    | MapboxSatellite\n    | MapboxSatelliteStreets\n\n    //Custom - provide custom maps\n    | Custom of string"},{"uri":"https://plotly.net/01_3_shapes.html","title":"Shapes","content":"(**\n---\ntitle: Shapes\ncategory: Chart Layout\ncategoryindex: 2\nindex: 4\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 12.0.3\u0022\n#r \u0022nuget: DynamicObj\u0022\n#r \u0022../bin/Plotly.NET/netstandard2.0/Plotly.NET.dll\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# Shapes\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/Plotly.NET/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create Shapes and add them to the Charts in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n\n*)\n\nopen Plotly.NET \n  \nlet x  = [1.; 2.; 3.; 4.; 5.; 6.; 7.; 8.; 9.; 10.; ]\nlet y\u0027 = [2.; 1.5; 5.; 1.5; 3.; 2.5; 2.5; 1.5; 3.5; 1.]\n\n(**\nuse the \u0060Shape.init\u0060 function to generate a shape, and either the \u0060Chart.withShape\u0060 or the \u0060Chart.withShapes\u0060 function to add\nmultiple shapes at once.\n\n**Attention**: Adding a shape after you added a previous one currently removes the old one. This is a bug and will be fixed\n*)\n\nopen Plotly.NET.LayoutObjects\n\nlet s1 = Shape.init (StyleParam.ShapeType.Rectangle,2.,4.,3.,4.,Opacity=0.3,Fillcolor= Color.fromHex \u0022#d3d3d3\u0022)\nlet s2 = Shape.init (StyleParam.ShapeType.Rectangle,5.,7.,3.,4.,Opacity=0.3,Fillcolor= Color.fromHex \u0022#d3d3d3\u0022)\n\nlet shapes =\n    Chart.Line(x,y\u0027,Name=\u0022line\u0022)    \n    |\u003E Chart.withShapes([s1;s2])\n//|\u003E Chart.withShape(Options.Shape(StyleOption.ShapeType.Rectangle,2.,4.,3.,4.,Opacity=0.3,Fillcolor=\u0022#d3d3d3\u0022))\n\n(*** condition: ipynb ***)\n#if IPYNB\nshapes\n#endif // IPYNB\n\n(***hide***)\nshapes |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n"},{"uri":"https://plotly.net/07_3_indicator.html","title":"Indicator Charts","content":"(**\n---\ntitle: Indicator Charts\ncategory: Finance Charts\ncategoryindex: 7\nindex: 4\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 13.0.1\u0022\n#r \u0022nuget: DynamicObj\u0022\n#r \u0022../bin/Plotly.NET/net5.0/Plotly.NET.dll\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# Indicator Charts\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/Plotly.NET/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create indicator charts in F#.\n\nIndicator Charts visualize the evolution of a value compared to a reference value, optionally inside a range.\n\nThere are different types of indicator charts, depending on the \u0060IndicatorMode\u0060 used in chart generation:\n\n- \u0060Delta\u0060/\u0060Number\u0060 (and combinations) simply shows if the value is increasing or decreasing compared to the reference\n- Any combination of the above with \u0060Gauge\u0060 adds a customizable gauge that indicates where the value lies inside a given range.\n*)\n\nopen Plotly.NET \nopen Plotly.NET.TraceObjects\nopen Plotly.NET.LayoutObjects\n\nlet allIndicatorTypes =\n    [\n        Chart.Indicator(\n            120., StyleParam.IndicatorMode.NumberDeltaGauge,\n            Title = \u0022Bullet gauge\u0022,\n            DeltaReference = 90.,\n            Range = StyleParam.Range.MinMax(-200., 200.),\n            GaugeShape = StyleParam.IndicatorGaugeShape.Bullet,\n            ShowGaugeAxis = false,\n            Domain  = Domain.init(Row = 0, Column = 0)\n        )\n        Chart.Indicator(\n            200., StyleParam.IndicatorMode.NumberDeltaGauge,\n            Title = \u0022Angular gauge\u0022,\n            Delta = IndicatorDelta.init(Reference=160),\n            Range = StyleParam.Range.MinMax(0., 250.),\n            Domain = Domain.init(Row = 0, Column = 1)\n        )\n        Chart.Indicator(\n            300., StyleParam.IndicatorMode.NumberDelta,\n            Title = \u0022number and delta\u0022,\n            DeltaReference = 90.,\n            Domain  = Domain.init(Row = 1, Column = 0)\n        )        \n        Chart.Indicator(\n            40., StyleParam.IndicatorMode.Delta,\n            Title = \u0022delta\u0022,\n            DeltaReference = 90.,\n            Domain  = Domain.init(Row = 1, Column = 1)\n        )\n    ]\n    |\u003E Chart.combine\n    |\u003E Chart.withLayoutGridStyle(Rows = 2, Columns = 2)\n    |\u003E Chart.withMarginSize(Left = 200)\n\n\n(*** condition: ipynb ***)\n#if IPYNB\nallIndicatorTypes\n#endif // IPYNB\n\n(***hide***)\nallIndicatorTypes |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n"},{"uri":"https://plotly.net/09_0_parallel-categories.html","title":"Parallel categories","content":"(**\n---\ntitle: Parallel categories\ncategory: Categorical Charts\ncategoryindex: 10\nindex: 1\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 12.0.3\u0022\n#r \u0022nuget: DynamicObj\u0022\n#r \u0022../bin/Plotly.NET/netstandard2.0/Plotly.NET.dll\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# Parallel categories\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/Plotly.NET/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create parallel categories plot in F#.\n\nThe parallel categories diagram (also known as parallel sets or alluvial diagram) is a visualization of multi-dimensional categorical data sets. Each variable in the data set is represented by a column of rectangles, where each rectangle corresponds to a discrete value taken on by that variable. The relative heights of the rectangles reflect the relative frequency of occurrence of the corresponding value.\n\nCombinations of category rectangles across dimensions are connected by ribbons, where the height of the ribbon corresponds to the relative frequency of occurrence of the combination of categories in the data set.\n*)\nopen Plotly.NET\nopen Plotly.NET.TraceObjects\n\nlet dims =\n    [\n        Dimensions.init([\u0022Cat1\u0022;\u0022Cat1\u0022;\u0022Cat1\u0022;\u0022Cat1\u0022;\u0022Cat2\u0022;\u0022Cat2\u0022;\u0022Cat3\u0022],Label=\u0022A\u0022)\n        Dimensions.init([0;1;0;1;0;0;0],Label=\u0022B\u0022,TickText=[\u0022YES\u0022;\u0022NO\u0022])\n    ]\n\nlet parcats =\n    Chart.ParallelCategories(\n        dims,\n        Color = Color.fromColorScaleValues [0.;1.;0.;1.;0.;0.;0.],\n        Colorscale = StyleParam.Colorscale.Blackbody\n    )\n\n(*** condition: ipynb ***)\n#if IPYNB\nparcats\n#endif // IPYNB\n\n(***hide***)\nparcats |\u003E GenericChart.toChartHTML\n(***include-it-raw***)"},{"uri":"https://plotly.net/05_2_choropleth-map.html","title":"Choropleth maps","content":"(**\n---\ntitle: Choropleth maps\ncategory: Geo map charts\ncategoryindex: 6\nindex: 3\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 12.0.3\u0022\n#r \u0022nuget: DynamicObj\u0022\n#r \u0022../bin/Plotly.NET/netstandard2.0/Plotly.NET.dll\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# Choropleth maps\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/Plotly.NET/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create choropleth map in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n\n*)\n\nopen Plotly.NET \n\n// Pure alcohol consumption among adults (age 15\u002B) in 2010\nlet locations,z = \n   [(\u0022Belarus\u0022,17.5); (\u0022Moldova\u0022,16.8);(\u0022Lithuania\u0022,15.4);(\u0022Russia\u0022,15.1);\n    (\u0022Romania\u0022,14.4);(\u0022Ukraine\u0022,13.9);(\u0022Andorra\u0022,13.8);(\u0022Hungary\u0022,13.3);\n    (\u0022Czech Republic\u0022,13.);(\u0022Slovakia\u0022,13.);(\u0022Portugal\u0022,12.9);(\u0022Serbia\u0022,12.6);\n    (\u0022Grenada\u0022,12.5);(\u0022Poland\u0022,12.5);(\u0022Latvia\u0022,12.3);(\u0022Finland\u0022,12.3);\n    (\u0022South Korea\u0022,12.3);(\u0022France\u0022,12.2);(\u0022Australia\u0022,12.2);(\u0022Croatia\u0022,12.2);\n    (\u0022Ireland\u0022,11.9);(\u0022Luxembourg\u0022,11.9);(\u0022Germany\u0022,11.8);(\u0022Slovenia\u0022,11.6);\n    (\u0022United Kingdom\u0022,11.6);(\u0022Denmark\u0022,11.4);(\u0022Bulgaria\u0022,11.4);(\u0022Spain\u0022,11.2);\n    (\u0022Belgium\u0022,11.);(\u0022South Africa\u0022,11.);(\u0022New Zealand\u0022,10.9);(\u0022Gabon\u0022,10.9);\n    (\u0022Namibia\u0022,10.8);(\u0022Switzerland\u0022,10.7);(\u0022Saint Lucia\u0022,10.4);(\u0022Austria\u0022,10.3);\n    (\u0022Estonia\u0022,10.3);(\u0022Greece\u0022,10.3);(\u0022Kazakhstan\u0022,10.3);(\u0022Canada\u0022,10.2);\n    (\u0022Nigeria\u0022,10.1);(\u0022Netherlands\u0022,9.9);(\u0022Uganda\u0022,9.8);(\u0022Rwanda\u0022,9.8);\n    (\u0022Chile\u0022,9.6);(\u0022Argentina\u0022,9.3);(\u0022Burundi\u0022,9.3);(\u0022United States\u0022,9.2);\n    (\u0022Cyprus\u0022,9.2);(\u0022Sweden\u0022,9.2);(\u0022Venezuela\u0022,8.9);(\u0022Paraguay\u0022,8.8);(\u0022Brazil\u0022,8.7);\n    (\u0022Sierra Leone\u0022,8.7);(\u0022Montenegro\u0022,8.7);(\u0022Belize\u0022,8.5);(\u0022Cameroon\u0022,8.4);\n    (\u0022Botswana\u0022,8.4);(\u0022Saint Kitts and Nevis\u0022,8.2);(\u0022Guyana\u0022,8.1);(\u0022Peru\u0022,8.1);\n    (\u0022Panama\u0022,8.);(\u0022Niue\u0022,8.);(\u0022Palau\u0022,7.9);(\u0022Norway\u0022,7.7);(\u0022Tanzania\u0022,7.7);\n    (\u0022Georgia\u0022,7.7);(\u0022Uruguay\u0022,7.6);(\u0022Angola\u0022,7.5);(\u0022Laos\u0022,7.3);(\u0022Japan\u0022,7.2);\n    (\u0022Mexico\u0022,7.2);(\u0022Ecuador\u0022,7.2);(\u0022Dominica\u0022,7.1);(\u0022Iceland\u0022,7.1);\n    (\u0022Thailand\u0022,7.1);(\u0022Bosnia and Herzegovina\u0022,7.1);(\u0022Sao Tome and Principe\u0022,7.1);\n    (\u0022Malta\u0022,7.);(\u0022Albania\u0022,7.);(\u0022Bahamas\u0022,6.9);(\u0022Dominican Republic\u0022,6.9);\n    (\u0022Mongolia\u0022,6.9);(\u0022Cape Verde\u0022,6.9);(\u0022Barbados\u0022,6.8);(\u0022Burkina Faso\u0022,6.8);\n    (\u0022Italy\u0022,6.7);(\u0022Trinidad and Tobago\u0022,6.7);(\u0022China\u0022,6.7);(\u0022Macedonia\u0022,6.7);\n    (\u0022Saint Vincent and the Grenadines\u0022,6.6);(\u0022Equatorial Guinea\u0022,6.6);\n    (\u0022Suriname\u0022,6.6);(\u0022Vietnam\u0022,6.6);(\u0022Lesotho\u0022,6.5);(\u0022Haiti\u0022,6.4);\n    (\u0022Cook Islands\u0022,6.4);(\u0022Colombia\u0022,6.2);(\u0022Ivory Coast\u0022,6.);(\u0022Bolivia\u0022,5.9);\n    (\u0022Swaziland\u0022,5.7);(\u0022Zimbabwe\u0022,5.7);(\u0022Seychelles\u0022,5.6);(\u0022Cambodia\u0022,5.5);\n    (\u0022Puerto Rico\u0022,5.4);(\u0022Netherlands Antilles\u0022,5.4);(\u0022Philippines\u0022,5.4);\n    (\u0022Costa Rica\u0022,5.4);(\u0022Armenia\u0022,5.3);(\u0022Cuba\u0022,5.2);(\u0022Nicaragua\u0022,5.);\n    (\u0022Jamaica\u0022,4.9);(\u0022Ghana\u0022,4.8);(\u0022Liberia\u0022,4.7);(\u0022Uzbekistan\u0022,4.6);\n    (\u0022Chad\u0022,4.4);(\u0022United Arab Emirates\u0022,4.3);(\u0022Kyrgyzstan\u0022,4.3);(\u0022India\u0022,4.3);\n    (\u0022Turkmenistan\u0022,4.3);(\u0022Kenya\u0022,4.3);(\u0022Ethiopia\u0022,4.2);(\u0022Honduras\u0022,4.);\n    (\u0022Guinea-Bissau\u0022,4.);(\u0022Zambia\u0022,4.);(\u0022Republic of the Congo\u0022,3.9);(\u0022Guatemala\u0022,3.8);\n    (\u0022Central African Republic\u0022,3.8);(\u0022North Korea\u0022,3.7);(\u0022Sri Lanka\u0022,3.7);\n    (\u0022Mauritius\u0022,3.6);(\u0022Samoa\u0022,3.6);(\u0022Democratic Republic of the Congo\u0022,3.6);\n    (\u0022Nauru\u0022,3.5);(\u0022Gambia\u0022,3.4);(\u0022Federated States of Micronesia\u0022,3.3);\n    (\u0022El Salvador\u0022,3.2);(\u0022Fiji\u0022,3.);(\u0022Papua New Guinea\u0022,3.);(\u0022Kiribati\u0022,3.);\n    (\u0022Tajikistan\u0022,2.8);(\u0022Israel\u0022,2.8);(\u0022Sudan\u0022,2.7);(\u0022Malawi\u0022,2.5);(\u0022Lebanon\u0022,2.4);\n    (\u0022Azerbaijan\u0022,2.3);(\u0022Mozambique\u0022,2.3);(\u0022Togo\u0022,2.3);(\u0022Nepal\u0022,2.2);(\u0022Brunei\u0022,2.1);\n    (\u0022Benin\u0022,2.1);(\u0022Singapore\u0022,2.);(\u0022Turkey\u0022,2.);(\u0022Madagascar\u0022,1.8);(\u0022Solomon Islands\u0022,1.7);\n    (\u0022Tonga\u0022,1.6);(\u0022Tunisia\u0022,1.5);(\u0022Tuvalu\u0022,1.5);(\u0022Qatar\u0022,1.5);(\u0022Vanuatu\u0022,1.4);\n    (\u0022Djibouti\u0022,1.3);(\u0022Malaysia\u0022,1.3);(\u0022Syria\u0022,1.2);(\u0022Maldives\u0022,1.2);(\u0022Mali\u0022,1.1);\n    (\u0022Eritrea\u0022,1.1);(\u0022Algeria\u0022,1.);(\u0022Iran\u0022,1.);(\u0022Oman\u0022,0.9);(\u0022Brunei\u0022,0.9);\n    (\u0022Morocco\u0022,0.9);(\u0022Jordan\u0022,0.7);(\u0022Bhutan\u0022,0.7);(\u0022Guinea\u0022,0.7);(\u0022Burma\u0022,0.7);\n    (\u0022Afghanistan\u0022,0.7);(\u0022Senegal\u0022,0.6);(\u0022Indonesia\u0022,0.6);(\u0022Timor-Leste\u0022,0.6);\n    (\u0022Iraq\u0022,0.5);(\u0022Somalia\u0022,0.5);(\u0022Egypt\u0022,0.4);(\u0022Niger\u0022,0.3);(\u0022Yemen\u0022,0.3);\n    (\u0022Comoros\u0022,0.2);(\u0022Saudi Arabia\u0022,0.2);(\u0022Bangladesh\u0022,0.2);(\u0022Kuwait\u0022,0.1);\n    (\u0022Libya\u0022,0.1);(\u0022Mauritania\u0022,0.1);(\u0022Pakistan\u0022,0.1);]\n    |\u003E List.unzip\n\n(**\nChoropleth Maps display divided geographical areas or regions that are coloured, shaded or patterned in relation to \na data variable. This provides a way to visualise values over a geographical area, which can show variation or \npatterns across the displayed location.\n*)\n\nlet choroplethMap1 =\n    Chart.ChoroplethMap(\n        locations,z,\n        Locationmode=StyleParam.LocationFormat.CountryNames\n    )\n\n(*** condition: ipynb ***)\n#if IPYNB\nchoroplethMap1\n#endif // IPYNB\n\n(***hide***)\nchoroplethMap1 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n## Map styling\n\nyou can access various map styles via \u0060Chart.withGeoStyle\u0060, such as the projection type, lake/ocean color, and so on.\n*)\n\nopen Plotly.NET.LayoutObjects\n\nlet choroplethMap2 =\n    Chart.ChoroplethMap(\n        locations,z,\n        Locationmode=StyleParam.LocationFormat.CountryNames\n    )\n    |\u003E Chart.withGeoStyle(\n        Projection=GeoProjection.init(projectionType=StyleParam.GeoProjectionType.Mollweide),\n        ShowLakes=true,\n        ShowOcean=true,\n        OceanColor=Color.fromString \u0022lightblue\u0022,\n        ShowRivers=true)\n    |\u003E Chart.withColorBarStyle (Title.init(\u0022Alcohol consumption[l/y]\u0022),Length=0.5)\n\n(*** condition: ipynb ***)\n#if IPYNB\nchoroplethMap2\n#endif // IPYNB\n\n(***hide***)\nchoroplethMap2 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n## Using GeoJSON\n\n[GeoJSON](https://en.wikipedia.org/wiki/GeoJSON) is an open standard format designed for representing simple geographical features, along with their non-spatial attributes.\n\nGeoJSON, or at least the type of GeoJSON accepted by plotly.js are \u0060FeatureCollection\u0060s. A feature has for example the \u0060geometry\u0060 field, which defines e.g. the corrdinates of it (think for example the coordinates of a polygon on the map)\nand the \u0060properties\u0060 field, a key-value pair of properties of the feature. \n\nIf you want to use GeoJSON with Plotly.NET (or any plotly flavor really), you have to know the property of the feature you are mapping your data to. In the following example this is simply the \u0060id\u0060 of a feature, but you can access any property by \u0060property.key\u0060.\n\nConsider the following GeoJSON:\n\n*)\n\n// we are using the awesome FSharp.Data project here to perform a http request\n#r \u0022nuget: FSharp.Data\u0022\n\nopen FSharp.Data\nopen Newtonsoft.Json\n\nlet geoJson = \n    Http.RequestString \u0022https://raw.githubusercontent.com/plotly/datasets/master/geojson-counties-fips.json\u0022\n    |\u003E JsonConvert.DeserializeObject // the easiest way to use the GeoJSON object is deserializing the JSON string.\n\n(**\nit looks like this:\n\n\u0060\u0060\u0060JSON\n{\n    \u0022type\u0022: \u0022FeatureCollection\u0022, \n    \u0022features\u0022: [{\n        \u0022type\u0022: \u0022Feature\u0022, \n        \u0022properties\u0022: {\n            \u0022GEO_ID\u0022: \u00220500000US01001\u0022, \n            \u0022STATE\u0022: \u002201\u0022, \n            \u0022COUNTY\u0022: \u0022001\u0022, \n            \u0022NAME\u0022: \u0022Autauga\u0022, \n            \u0022LSAD\u0022: \u0022County\u0022, \n            \u0022CENSUSAREA\u0022: 594.436\n        }, \n        \u0022geometry\u0022: {\n            \u0022type\u0022: \u0022Polygon\u0022, \n            \u0022coordinates\u0022: [[[-86.496774, 32.344437], [-86.717897, 32.402814], [-86.814912, 32.340803], [-86.890581, 32.502974], [-86.917595, 32.664169], [-86.71339, 32.661732], [-86.714219, 32.705694], [-86.413116, 32.707386], [-86.411172, 32.409937], [-86.496774, 32.344437]]]\n        },\n        \u0022id\u0022: \u002201001\u0022\n    }, ... MANY more features.\n\u0060\u0060\u0060\n\nIt basically contains all US counties as polygons on the map. Note that the \u0060id\u0060 property corresponds to the [**fips code**](https://en.wikipedia.org/wiki/FIPS_county_code).\n\nTo visualize some data using these counties as locations on a choropleth map, we need some exmaple data:\n*)\n\n// we use the awesome Deedle data frame library to parse and extract our location and z data\n#r \u0022nuget: Deedle\u0022\nopen Deedle\nopen System.IO\nopen System.Text\n\nlet data = \n    Http.RequestString \u0022https://raw.githubusercontent.com/plotly/datasets/master/fips-unemp-16.csv\u0022\n    |\u003E fun csv -\u003E Frame.ReadCsvString(csv,true,separators=\u0022,\u0022,schema=\u0022fips=string,unemp=float\u0022)\n\n\n(**\nThe data looks like this:\n*)\n\n\ndata.Print()\n\n(*** include-output ***)\n\n(**\nAs the data contains the fips code and associated unemployment data, we can use the fips codes as locations and the unemployment as z data:\n*)\n\nlet locationsGeoJSON: string [] = \n    data\n    |\u003E Frame.getCol \u0022fips\u0022\n    |\u003E Series.values\n    |\u003E Array.ofSeq\n\nlet zGeoJSON: int [] = \n    data\n    |\u003E Frame.getCol \u0022unemp\u0022\n    |\u003E Series.values\n    |\u003E Array.ofSeq\n\n\n(**\nAnd finally put together the chart using GeoJSON:\n*)\n\nlet choroplethGeoJSON =\n    Chart.ChoroplethMap(\n        locations = locationsGeoJSON,\n        z = zGeoJSON,\n        Locationmode=StyleParam.LocationFormat.GeoJson_Id,\n        GeoJson = geoJson,\n        FeatureIdKey=\u0022id\u0022\n    )\n    |\u003E Chart.withGeo(\n        Geo.init(\n            Scope=StyleParam.GeoScope.NorthAmerica, \n            Projection=GeoProjection.init(StyleParam.GeoProjectionType.AzimuthalEqualArea),\n            ShowLand=true,\n            LandColor = Color.fromString \u0022lightgrey\u0022\n        )\n    )\n    |\u003E Chart.withSize (800.,800.)\n\n(*** condition: ipynb ***)\n#if IPYNB\nchoroplethGeoJSON\n#endif // IPYNB\n\n(***hide***)\nchoroplethGeoJSON |\u003E GenericChart.toChartHTML\n(***include-it-raw***)"},{"uri":"https://plotly.net/11_2_contourcarpet_plots.html","title":"Contour carpet plots","content":"(**\n---\ntitle: Contour carpet plots\ncategory: Carpet Plots\ncategoryindex: 12\nindex: 2\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 12.0.3\u0022\n#r \u0022nuget: DynamicObj\u0022\n#r \u0022../bin/Plotly.NET/netstandard2.0/Plotly.NET.dll\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# Contour carpet charts\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/Plotly.NET/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create contour plots on carpets in F#.\n\n*)\n\nopen Plotly.NET\nopen Plotly.NET.LayoutObjects\n\nlet contourCarpet = \n    [\n        Chart.Carpet(\n            \u0022contour\u0022,\n            A = [0.; 1.; 2.; 3.; 0.; 1.; 2.; 3.; 0.; 1.; 2.; 3.],\n            B = [4.; 4.; 4.; 4.; 5.; 5.; 5.; 5.; 6.; 6.; 6.; 6.],\n            X = [2.; 3.; 4.; 5.; 2.2; 3.1; 4.1; 5.1; 1.5; 2.5; 3.5; 4.5],\n            Y = [1.; 1.4; 1.6; 1.75; 2.; 2.5; 2.7; 2.75; 3.; 3.5; 3.7; 3.75],\n            AAxis = LinearAxis.initCarpet(\n                TickPrefix = \u0022a = \u0022,\n                Smoothing = 0.,\n                MinorGridCount = 9,\n                AxisType = StyleParam.AxisType.Linear\n            ),\n            BAxis = LinearAxis.initCarpet(\n                TickPrefix = \u0022b = \u0022,\n                Smoothing = 0.,\n                MinorGridCount = 9,\n                AxisType = StyleParam.AxisType.Linear\n            )\n        )    \n        Chart.ContourCarpet(\n            \u0022contour\u0022,\n            [1.; 1.96; 2.56; 3.0625; 4.; 5.0625; 1.; 7.5625; 9.; 12.25; 15.21; 14.0625],\n            A = [0; 1; 2; 3; 0; 1; 2; 3; 0; 1; 2; 3],\n            B = [4; 4; 4; 4; 5; 5; 5; 5; 6; 6; 6; 6]\n        )\n    ]\n    |\u003E Chart.combine\n\n(*** condition: ipynb ***)\n#if IPYNB\ncontourCarpet\n#endif // IPYNB\n\n(***hide***)\ncontourCarpet |\u003E GenericChart.toChartHTML\n(***include-it-raw***)"},{"uri":"https://plotly.net/02_5_pie-doughnut-charts.html","title":"Pie and doughnut Charts","content":"(**\n---\ntitle: Pie and doughnut Charts\ncategory: Simple Charts\ncategoryindex: 3\nindex: 6\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 12.0.3\u0022\n#r \u0022nuget: DynamicObj\u0022\n#r \u0022../bin/Plotly.NET/netstandard2.0/Plotly.NET.dll\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# Pie and doughnut Charts\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/Plotly.NET/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create pie and doughnut charts in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n\n*)\nopen Plotly.NET \n  \nlet values = [19; 26; 55;]\nlet labels = [\u0022Residential\u0022; \u0022Non-Residential\u0022; \u0022Utility\u0022]\n\n(**\n\nA pie, doughnut, or sunburst chart can be created using the \u0060Chart.Pie\u0060, \u0060Chart.Doughnut\u0060, and \u0060Chart.Sunburst\u0060 functions.\nWhen creating pie charts, it is usually desirable to provide both labels and values.\n\n*)\n\nlet pie1 =\n    Chart.Pie(values,labels)\n\n(*** condition: ipynb ***)\n#if IPYNB\npie1\n#endif // IPYNB\n\n(***hide***)\npie1 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\nlet doughnut1 =\n    Chart.Doughnut(\n        values,\n        labels,\n        Hole=0.3,\n        TextLabels=labels\n    )\n\n(*** condition: ipynb ***)\n#if IPYNB\ndoughnut1\n#endif // IPYNB\n\n(***hide***)\ndoughnut1 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\nlet sunburst1 =\n    Chart.Sunburst(\n        [\u0022A\u0022;\u0022B\u0022;\u0022C\u0022;\u0022D\u0022;\u0022E\u0022],\n        [\u0022\u0022;\u0022\u0022;\u0022B\u0022;\u0022B\u0022;\u0022\u0022],\n        Values=[5.;0.;3.;2.;3.],\n        Text=[\u0022At\u0022;\u0022Bt\u0022;\u0022Ct\u0022;\u0022Dt\u0022;\u0022Et\u0022]\n    )\n\n(*** condition: ipynb ***)\n#if IPYNB\nsunburst1\n#endif // IPYNB\n\n(***hide***)\nsunburst1 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)"},{"uri":"https://plotly.net/03_0_3d-scatter-plots.html","title":"3D point and line charts","content":"(**\n---\ntitle: 3D point and line charts\ncategory: 3D Charts\ncategoryindex: 4\nindex: 1\n---\n*)\n\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 12.0.3\u0022\n#r \u0022nuget: DynamicObj\u0022\n#r \u0022../bin/Plotly.NET/netstandard2.0/Plotly.NET.dll\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# 3D point plots\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/Plotly.NET/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create three-dimensional point and line charts in F#.\n\nA Scatter3d chart report shows a three-dimensional spinnable view of your data\n*)\n\nopen Plotly.NET \n  \nlet point3d = \n    Chart.Point3d(\n        [1,3,2; 6,5,4; 7,9,8],\n        Labels = [\u0022A\u0022; \u0022B\u0022; \u0022C\u0022],\n        TextPosition = StyleParam.TextPosition.BottomCenter\n    )\n    |\u003E Chart.withXAxisStyle(\u0022my x-axis\u0022, Id=StyleParam.SubPlotId.Scene 1) // in contrast to 2D plots, x and y axes of 3D charts have to be set via the scene object\n    |\u003E Chart.withYAxisStyle(\u0022my y-axis\u0022, Id=StyleParam.SubPlotId.Scene 1) // in contrast to 2D plots, x and y axes of 3D charts have to be set via the scene object\n    |\u003E Chart.withZAxisStyle(\u0022my z-axis\u0022)\n    |\u003E Chart.withSize(800.,800.)\n\n(*** condition: ipynb ***)\n#if IPYNB\npoint3d\n#endif // IPYNB\n\n(***hide***)\npoint3d |\u003E GenericChart.toChartHTML\n(*** include-it-raw ***)\n\n\n\n(**\n# 3D Line plots\n*)\n\nlet line3d = \n    Chart.Line3d(\n        [1,3,2; 6,5,4; 7,9,8],\n        Labels = [\u0022A\u0022; \u0022B\u0022; \u0022C\u0022],\n        TextPosition = StyleParam.TextPosition.BottomCenter,\n        ShowMarkers = true\n    )\n\n(*** condition: ipynb ***)\n#if IPYNB\nline3d\n#endif // IPYNB\n\n(***hide***)\nline3d |\u003E GenericChart.toChartHTML\n(*** include-it-raw ***)\n\n(**\n# 3D Bubble plots\n*)\n\nlet bubble3d =\n    Chart.Bubble3d(\n        [1,3,2; 6,5,4; 7,9,8],\n        [10;20;30],\n        Labels = [\u0022A\u0022; \u0022B\u0022; \u0022C\u0022],\n        TextPosition = StyleParam.TextPosition.BottomCenter\n    )\n\n(*** condition: ipynb ***)\n#if IPYNB\nbubble3d\n#endif // IPYNB\n\n(***hide***)\nbubble3d |\u003E GenericChart.toChartHTML\n(*** include-it-raw ***)"},{"uri":"https://plotly.net/08_1_polar_bar_charts.html","title":"Polar bar charts","content":"(**\n---\ntitle: Polar bar charts\ncategory: Polar Charts\ncategoryindex: 9 \nindex: 2\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 12.0.3\u0022\n#r \u0022nuget: DynamicObj\u0022\n#r \u0022../bin/Plotly.NET/netstandard2.0/Plotly.NET.dll\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# Polar bar charts\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/Plotly.NET/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create polar bar charts in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n\n*)\n\nopen Plotly.NET \n  \nlet r   = [77.5; 72.5; 70.0; 45.0; 22.5; 42.5; 40.0; 62.5]\nlet r2  = [57.5; 50.0; 45.0; 35.0; 20.0; 22.5; 37.5; 55.0]\nlet r3  = [40.0; 30.0; 30.0; 35.0; 7.5; 7.5; 32.5; 40.0]\nlet r4  = [20.0; 7.5; 15.0; 22.5; 2.5; 2.5; 12.5; 22.5]\n\nlet t = [\u0022North\u0022; \u0022N-E\u0022; \u0022East\u0022; \u0022S-E\u0022; \u0022South\u0022; \u0022S-W\u0022; \u0022West\u0022; \u0022N-W\u0022]\n\n(**\nPolar bar charts plot data on a radial axis and a categorical angular axis. \n\nA common use case is the **windrose chart**.\n\nA wind rose is a graphic tool used by meteorologists to give a succinct view \nof how wind speed and direction are typically distributed at a particular location.\n*)\nopen Plotly.NET.LayoutObjects\n\nlet windrose1 =\n    [\n        Chart.BarPolar (r , t, Name=\u002211-14 m/s\u0022)\n        Chart.BarPolar (r2, t, Name=\u00228-11 m/s\u0022)\n        Chart.BarPolar (r3, t, Name=\u00225-8 m/s\u0022)\n        Chart.BarPolar (r4, t, Name=\u0022\u003C 5 m/s\u0022)\n    ]\n    |\u003E Chart.combine\n    |\u003E Chart.withAngularAxis(\n        AngularAxis.init(\n            CategoryOrder = StyleParam.CategoryOrder.Array,\n            CategoryArray = ([\u0022East\u0022; \u0022N-E\u0022; \u0022North\u0022; \u0022N-W\u0022; \u0022West\u0022; \u0022S-W\u0022; \u0022South\u0022; \u0022S-E\u0022;]) // set the order of the categorical axis\n        )\n    )\n\n(*** condition: ipynb ***)\n#if IPYNB\nwindrose1\n#endif // IPYNB\n\n(***hide***)\nwindrose1 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n\n"},{"uri":"https://plotly.net/09_3_icicle.html","title":"Icicle Charts","content":"(**\n---\ntitle: Icicle Charts\ncategory: Categorical Charts\ncategoryindex: 10\nindex: 4\n---\n*)\n\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 12.0.3\u0022\n#r \u0022nuget: DynamicObj\u0022\n#r \u0022../bin/Plotly.NET/netstandard2.0/Plotly.NET.dll\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# Icicle charts\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/Plotly.NET/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create icicle charts in F#.\n\nIcicle charts visualize hierarchical data using rectangular sectors that cascade from root to leaves in one of four directions: up, down, left, or right. \nSimilar to Sunburst charts and Treemaps charts, the hierarchy is defined by labels and parents attributes. \nClick on one sector to zoom in/out, which also displays a pathbar on the top of your icicle. \nTo zoom out, you can click the parent sector or click the pathbar as well.\n*)\n\nopen Plotly.NET\nopen Plotly.NET.TraceObjects\n\nlet character   = [\u0022Eve\u0022; \u0022Cain\u0022; \u0022Seth\u0022; \u0022Enos\u0022; \u0022Noam\u0022; \u0022Abel\u0022; \u0022Awan\u0022; \u0022Enoch\u0022; \u0022Azura\u0022]\nlet parent      = [\u0022\u0022; \u0022Eve\u0022; \u0022Eve\u0022; \u0022Seth\u0022; \u0022Seth\u0022; \u0022Eve\u0022; \u0022Eve\u0022; \u0022Awan\u0022; \u0022Eve\u0022 ]\n\nlet icicle = \n    Chart.Icicle(\n        character,\n        parent,\n        ShowScale = true,\n        ColorScale = StyleParam.Colorscale.Viridis,\n        TilingOrientation = StyleParam.Orientation.Vertical, // wether the icicles will grow in the vertical (up/down) or horizontal (left/right) direction\n        TilingFlip = StyleParam.TilingFlip.Y, // flip in the Y direction (grow up instead of down)\n        PathBarEdgeShape = StyleParam.PathbarEdgeShape.BackSlash\n    )\n\n(*** condition: ipynb ***)\n#if IPYNB\nicicle\n#endif // IPYNB\n\n(***hide***)\nicicle |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n"},{"uri":"https://plotly.net/03_2_3d-mesh-plots.html","title":"3D Mesh plots","content":"(**\n---\ntitle: 3D Mesh plots\ncategory: 3D Charts\ncategoryindex: 4\nindex: 3\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 12.0.3\u0022\n#r \u0022nuget: DynamicObj\u0022\n#r \u0022../bin/Plotly.NET/netstandard2.0/Plotly.NET.dll\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# 3D Mesh plots\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/Plotly.NET/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create 3D-Mesh charts in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n*)\n\nopen System\nopen Plotly.NET \n\n\n//---------------------- Generate linearly spaced vector ----------------------\nlet linspace (min,max,n) = \n    if n \u003C= 2 then failwithf \u0022n needs to be larger then 2\u0022\n    let bw = float (max - min) / (float n - 1.)\n    Array.init n (fun i -\u003E min \u002B (bw * float i))\n    //[|min ..bw ..max|]\n\n//---------------------- Create example data ----------------------\nlet size = 100\nlet x = linspace(-2. * Math.PI, 2. * Math.PI, size)\nlet y = linspace(-2. * Math.PI, 2. * Math.PI, size)\n\nlet f x y = - (5. * x / (x**2. \u002B y**2. \u002B 1.) )\n\nlet z = \n    Array.init size (fun i -\u003E \n        Array.init size (fun j -\u003E \n            f x.[j] y.[i] \n        )\n    )\n\nlet rnd = System.Random()\nlet a = Array.init 50 (fun _ -\u003E rnd.NextDouble())\nlet b = Array.init 50 (fun _ -\u003E rnd.NextDouble())\nlet c = Array.init 50 (fun _ -\u003E rnd.NextDouble())\n\nopen Plotly.NET.TraceObjects\n\nlet mesh3d =\n    Trace3D.initMesh3d \n        (fun mesh3d -\u003E\n            mesh3d?x \u003C- a\n            mesh3d?y \u003C- b\n            mesh3d?z \u003C- c\n            mesh3d?flatshading \u003C- true\n            mesh3d?contour \u003C- Contours.initXyz(Show=true)\n            mesh3d\n            )\n    |\u003E GenericChart.ofTraceObject true\n    \n(*** condition: ipynb ***)\n#if IPYNB\nmesh3d\n#endif // IPYNB\n\n(***hide***)\nmesh3d |\u003E GenericChart.toChartHTML\n(*** include-it-raw ***)"},{"uri":"https://plotly.net/02_7_heatmaps.html","title":"Heatmaps","content":"(**\n---\ntitle: Heatmaps\ncategory: Simple Charts\ncategoryindex: 3\nindex: 8\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 12.0.3\u0022\n#r \u0022nuget: DynamicObj\u0022\n#r \u0022../bin/Plotly.NET/netstandard2.0/Plotly.NET.dll\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# Heatmaps\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/Plotly.NET/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create heatmap charts in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n\n*)\n\nopen Plotly.NET \n \nlet matrix =\n    [[1.;1.5;0.7;2.7];\n    [2.;0.5;1.2;1.4];\n    [0.1;2.6;2.4;3.0];]\n\nlet rownames = [\u0022p3\u0022;\u0022p2\u0022;\u0022p1\u0022]\nlet colnames = [\u0022Tp0\u0022;\u0022Tp30\u0022;\u0022Tp60\u0022;\u0022Tp160\u0022]\n\nlet colorscaleValue = \n    StyleParam.Colorscale.Custom [(0.0,\u0022#3D9970\u0022);(1.0,\u0022#001f3f\u0022)]\n\n// Generating the Heatmap \nlet heat1 =\n    Chart.Heatmap(\n        matrix,colnames,rownames,\n        Colorscale=colorscaleValue,\n        Showscale=true\n    )\n    |\u003E Chart.withSize(700.,500.)\n    |\u003E Chart.withMarginSize(Left=200.)\n\n(*** condition: ipynb ***)\n#if IPYNB\nheat1\n#endif // IPYNB\n\n(***hide***)\nheat1 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\nA heatmap chart can be created using the \u0060Chart.HeatMap\u0060 functions.\nWhen creating heatmap charts, it is usually desirable to provide the values in matrix form, rownames and colnames.\n*)\n\n(**\n## Styling Colorbars\n\nAll charts that contain colorbars can be styled by the \u0060Chart.withColorBarStyle\u0060 function.\nHere is an example that adds a title to the colorbar:\n*)\n\nlet heat2 =\n    heat1\n    |\u003E Chart.withColorBarStyle(\n        Title.init(\u0022Im the ColorBar\u0022)\n    )\n\n(*** condition: ipynb ***)\n#if IPYNB\nheat2\n#endif // IPYNB\n\n(***hide***)\nheat2 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)"},{"uri":"https://plotly.net/02_6_table.html","title":"Tables","content":"(**\n---\ntitle: Tables\ncategory: Simple Charts\ncategoryindex: 3\nindex: 7\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 12.0.3\u0022\n#r \u0022nuget: DynamicObj\u0022\n#r \u0022../bin/Plotly.NET/netstandard2.0/Plotly.NET.dll\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# Tables\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/Plotly.NET/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\nThis example shows how to create tables in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n\n*)\n\nopen Plotly.NET \nopen Plotly.NET.StyleParam\n  \nlet header = [\u0022\u003Cb\u003ERowIndex\u003C/b\u003E\u0022;\u0022A\u0022;\u0022simple\u0022;\u0022table\u0022]\nlet rows = \n    [\n     [\u00220\u0022;\u0022I\u0022     ;\u0022am\u0022     ;\u0022a\u0022]        \n     [\u00221\u0022;\u0022little\u0022;\u0022example\u0022;\u0022!\u0022]       \n    ]\n\n\nlet table1 = Chart.Table(header, rows)\n\n(*** condition: ipynb ***)\n#if IPYNB\ntable1\n#endif // IPYNB\n\n(***hide***)\ntable1 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\nA little bit of styling:\n*)\n\nlet table2 =\n    Chart.Table(\n        header,\n        rows,\n        //sets global header alignment\n        AlignHeader = [HorizontalAlign.Center],\n        //sets alignment for each column separately \n        //(The last alignment is applied to all potential following columns)\n        AlignCells  = [HorizontalAlign.Left;HorizontalAlign.Center;HorizontalAlign.Right],\n        //sets global header color\n        ColorHeader = Color.fromString \u0022#45546a\u0022,    \n        //sets specific color to each header column\n        //ColorHeader=[\u0022#45546a\u0022;\u0022#deebf7\u0022;\u0022#45546a\u0022;\u0022#deebf7\u0022],    \n        //sets global cell color\n        //ColorRows = \u0022#deebf7\u0022,\n        //sets cell column colors\n        ColorCells  = Color.fromColors [\n            Color.fromString \u0022#deebf7\u0022\n            Color.fromString \u0022lightgrey\u0022\n            Color.fromString \u0022#deebf7\u0022\n            Color.fromString \u0022lightgrey\u0022\n        ],\n        //sets cell row colors\n        //ColorCells=[[\u0022#deebf7\u0022;\u0022lightgrey\u0022]],\n        //sets font of header\n        FontHeader  = Font.init(FontFamily.Courier_New, Size=12., Color=Color.fromString \u0022white\u0022),      \n        //sets the height of the header\n        HeightHeader= 30.,\n        //sets lines of header\n        LineHeader  = Line.init(2.,Color.fromString \u0022black\u0022),                     \n        ColumnWidth = [70;50;100;70],      \n        //defines order of columns\n        ColumnOrder = [1;2;3;4]                                  \n        )\n\n(*** condition: ipynb ***)\n#if IPYNB\ntable2\n#endif // IPYNB\n\n(***hide***)\ntable2 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\nValue dependent cell coloring:\n*)\n\nlet header2 = [\u0022Identifier\u0022;\u0022T0\u0022;\u0022T1\u0022;\u0022T2\u0022;\u0022T3\u0022]\nlet rowvalues = \n    [\n     [10001.;0.2;2.0;4.0;5.0]\n     [10002.;2.1;2.0;1.8;2.1]\n     [10003.;4.5;3.0;2.0;2.5]\n     [10004.;0.0;0.1;0.3;0.2]\n     [10005.;1.0;1.6;1.8;2.2]\n     [10006.;1.0;0.8;1.5;0.7]\n     [10007.;2.0;2.0;2.1;1.9]\n    ]\n    |\u003E Seq.sortBy (fun x -\u003E x.[1])\n\n//map color from value to hex representation\nlet mapColor min max value = \n    let proportion = \n        (255. * (value - min) / (max - min))\n        |\u003E int\n    Color.fromRGB 255 (255 - proportion) proportion\n    \n//Assign a color to every cell seperately. Matrix must be transposed for correct orientation.\nlet cellcolor = \n     rowvalues\n     |\u003E Seq.map (fun row -\u003E\n        row \n        |\u003E Seq.mapi (fun index value -\u003E \n            if index = 0 then Color.fromString \u0022white\u0022\n            else mapColor 0. 5. value\n            )\n        )\n    |\u003E Seq.transpose\n    |\u003E Seq.map Color.fromColors\n    |\u003E Color.fromColors\n\nlet table3 = Chart.Table(header2,rowvalues,ColorCells=cellcolor)\n\n(*** condition: ipynb ***)\n#if IPYNB\ntable3\n#endif // IPYNB\n\n(***hide***)\ntable3 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n\n(**\nSequence representation:\n\n*)\n\nlet sequence =\n        [\n        \u0022ATGAGACGTCGAGACTGATAGACGTCGATAGACGTCGATAGACCG\u0022\n        \u0022ATAGACTCGTGATAGACGTCGATAGACGTCGATAGAGTATAGACC\u0022\n        \u0022GTGATAGACGTCGAGAAGACGTCGATAGACGTCGATAGACGTCGA\u0022\n        \u0022TAGAGATAGACGTCGATAGACCGTATAGAAGACGTCGATAGATAG\u0022\n        \u0022ACGTCGATAGACCGTAGACGTCGATAGACGTCGATAGACCGT\u0022\n        ]\n        |\u003E String.concat \u0022\u0022\n\nlet elementsPerRow = 60\n\nlet headers = \n    [0..elementsPerRow] \n    |\u003E Seq.map (fun x -\u003E \n        if x%10=0 \u0026\u0026 x \u003C\u003E 0 then \u0022|\u0022 \n        else \u0022\u0022\n        )\n\nlet cells = \n    sequence\n    |\u003E Seq.chunkBySize elementsPerRow\n    |\u003E Seq.mapi (fun i x -\u003E Seq.append [string (i * elementsPerRow)] (Seq.map string x))\n\nlet cellcolors =\n    cells\n    |\u003E Seq.map (fun row -\u003E \n        row \n        |\u003E Seq.map (fun element -\u003E \n            match element with\n            //colors taken from DRuMS \n            //(http://biomodel.uah.es/en/model4/dna/atgc.htm)\n            | \u0022A\u0022 -\u003E Color.fromHex \u0022#5050FF\u0022 \n            | \u0022T\u0022 -\u003E Color.fromHex \u0022#E6E600\u0022\n            | \u0022G\u0022 -\u003E Color.fromHex \u0022#00C000\u0022\n            | \u0022C\u0022 -\u003E Color.fromHex \u0022#E00000\u0022\n            | \u0022U\u0022 -\u003E Color.fromHex \u0022#B48100\u0022\n            | _   -\u003E Color.fromString \u0022white\u0022\n            )\n        )\n    |\u003E Seq.transpose\n    |\u003E Seq.map (fun x -\u003E Seq.append x (seq [Color.fromString \u0022white\u0022]))\n    |\u003E Seq.map Color.fromColors\n    |\u003E Color.fromColors\n\nlet font = Font.init(FontFamily.Consolas,Size=14.)\nlet line = Line.init(0.,Color.fromString \u0022white\u0022)\nlet chartwidth = 50. \u002B 10. * float elementsPerRow\n\nlet table4 =\n    Chart.Table(\n        headers,\n        cells,\n        LineCells   = line,\n        LineHeader  = line,\n        HeightCells = 20.,\n        FontHeader  = font,\n        FontCells   = font,\n        ColumnWidth = [50;10],\n        AlignCells  = [HorizontalAlign.Right;HorizontalAlign.Center],\n        ColorCells  = cellcolors\n        )\n    |\u003E Chart.withSize(chartwidth,nan)\n    |\u003E Chart.withTitle \u0022Sequence A\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\ntable4\n#endif // IPYNB\n\n(***hide***)\ntable4 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n"},{"uri":"https://plotly.net/01_4_annotations.html","title":"Annotations","content":"(**\n---\ntitle: Annotations\ncategory: Chart Layout\ncategoryindex: 2\nindex: 5\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 12.0.3\u0022\n#r \u0022nuget: DynamicObj\u0022\n#r \u0022../bin/Plotly.NET/netstandard2.0/Plotly.NET.dll\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# Annotations\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/Plotly.NET/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n\n*Summary:* This example shows how to create Shapes and add them to the Charts in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n\n*)\n\nopen Plotly.NET \n  \nlet x  = [1.; 2.; 3.; 4.; 5.; 6.; 7.; 8.; 9.; 10.; ]\nlet y\u0027 = [2.; 1.5; 5.; 1.5; 3.; 2.5; 2.5; 1.5; 3.5; 1.]\n\n(**\nuse the \u0060Annotation.init\u0060 function to generate a shape, and either the \u0060Chart.withAnnotation\u0060 or the \u0060Chart.withAnnotations\u0060 function to add\nmultiple annotations at once.\n\n*)\n\nopen Plotly.NET.LayoutObjects\n\nlet a1 = Annotation.init (X=2.,Y=4.,Text = \u0022Hi there!\u0022)\nlet a2 = Annotation.init (X=5.,Y=7.,Text=\u0022I am another annotation!\u0022,BGColor= Color.fromString \u0022white\u0022,BorderColor= Color.fromString  \u0022black\u0022)\n\nlet annotations =\n    Chart.Line(x,y\u0027,Name=\u0022line\u0022)    \n    |\u003E Chart.withAnnotations([a1;a2])\n\n(*** condition: ipynb ***)\n#if IPYNB\nannotations\n#endif // IPYNB\n\n(***hide***)\nannotations |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n"},{"uri":"https://plotly.net/03_4_3d-streamtube-plots.html","title":"3D streamtube plots","content":"(**\n---\ntitle: 3D streamtube plots\ncategory: 3D Charts\ncategoryindex: 4\nindex: 5\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 12.0.3\u0022\n#r \u0022nuget: DynamicObj\u0022\n#r \u0022../bin/Plotly.NET/netstandard2.0/Plotly.NET.dll\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# 3D Mesh plots\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/Plotly.NET/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create 3D-StreamTube charts in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n*)\n\n#r \u0022nuget: Deedle\u0022\n#r \u0022nuget: FSharp.Data\u0022\nopen Deedle\nopen FSharp.Data\nopen System\nopen Plotly.NET \nopen Plotly.NET.TraceObjects\n\nlet tubeData =\n    Http.RequestString @\u0022https://raw.githubusercontent.com/plotly/datasets/master/streamtube-wind.csv\u0022\n    |\u003E Frame.ReadCsvString\n\nlet streamTube = \n    Chart.StreamTube(\n        x = (tubeData.[\u0022x\u0022] |\u003E Series.values),\n        y = (tubeData.[\u0022y\u0022] |\u003E Series.values),\n        z = (tubeData.[\u0022z\u0022] |\u003E Series.values),\n        u = (tubeData.[\u0022u\u0022] |\u003E Series.values),\n        v = (tubeData.[\u0022v\u0022] |\u003E Series.values),\n        w = (tubeData.[\u0022w\u0022] |\u003E Series.values),\n        Starts = \n            StreamTubeStarts.init(\n                X = Array.init 16 (fun _ -\u003E 80),\n                Y = [20;30;40;50;20;30;40;50;20;30;40;50;20;30;40;50],\n                Z = [0;0;0;0;5;5;5;5;10;10;10;10;15;15;15;15]\n            ),\n        ColorScale = StyleParam.Colorscale.Viridis\n    )\n\n    \n(*** condition: ipynb ***)\n#if IPYNB\nstreamTube\n#endif // IPYNB\n\n(***hide***)\nstreamTube |\u003E GenericChart.toChartHTML\n(*** include-it-raw ***)"},{"uri":"https://plotly.net/03_6_3d-isosurface-plots .html","title":"3D IsoSurface plots","content":"(**\n---\ntitle: 3D IsoSurface plots\ncategory: 3D Charts\ncategoryindex: 4\nindex: 7\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 12.0.3\u0022\n#r \u0022nuget: DynamicObj\u0022\n#r \u0022../bin/Plotly.NET/netstandard2.0/Plotly.NET.dll\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# 3D IsoSurface plots\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/Plotly.NET/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create 3D-IsoSurface charts in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n*)\n\nopen System\nopen Plotly.NET \n\nlet linspace (min,max,n) = \n    if n \u003C= 2 then failwithf \u0022n needs to be larger then 2\u0022\n    let bw = float (max - min) / (float n - 1.)\n    Array.init n (fun i -\u003E min \u002B (bw * float i))\n\nlet mgrid (min,max,n) = \n\n    let data = linspace(min,max,n)\n\n    let z = [|for i in 1 .. n do [|for i in 1 .. n do yield data|]|]\n    let x = [|for i in 1 .. n do [|for j in 1 .. n do yield [|for k in 1 .. n do yield data.[i-1]|]|]|]\n    let y = [|for i in 1 .. n do [|for j in 1 .. n do yield [|for k in 1 .. n do yield data.[j-1]|]|]|]\n\n    x,y,z\n\nlet xIso,yIso,zIso = \n    mgrid(-5.,5.,40)\n    |\u003E fun (x,y,z) -\u003E\n        (x |\u003E Array.concat |\u003E Array.concat),\n        (y |\u003E Array.concat |\u003E Array.concat),\n        (z |\u003E Array.concat |\u003E Array.concat)\n\nlet valueIso =\n    Array.map3 (fun x y z -\u003E\n        x * x * 0.5 \u002B y * y \u002B z * z * 2.\n    ) xIso yIso zIso\n\nopen Plotly.NET.TraceObjects\n\nlet isoSurface =\n    Chart.IsoSurface(\n        xIso,yIso,zIso,valueIso,\n        IsoMin = 10.,\n        IsoMax = 40.,\n        Caps = Caps.init(\n            X = (CapFill.init(Show=false)),\n            Y = (CapFill.init(Show=false))\n        ),\n        Surface = Surface.init(Count=5),\n        ColorScale = StyleParam.Colorscale.Viridis\n    )\n\n(*** condition: ipynb ***)\n#if IPYNB\nisoSurface\n#endif // IPYNB\n\n(***hide***)\nisoSurface |\u003E GenericChart.toChartHTML\n(*** include-it-raw ***)"},{"uri":"https://plotly.net/08_2_styling_polar_layouts.html","title":"Styling polar layouts","content":"(**\n---\ntitle: Styling polar layouts\ncategory: Polar Charts\ncategoryindex: 9 \nindex: 3\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 12.0.3\u0022\n#r \u0022nuget: DynamicObj\u0022\n#r \u0022../bin/Plotly.NET/netstandard2.0/Plotly.NET.dll\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(**\n# Styling polar layouts\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/Plotly.NET/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to style polar layouts in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n*)\nopen Plotly.NET\n\nlet r  = [ 1; 2; 3; 4; 5; 6; 7;] |\u003E List.map ((*) 10000)\nlet r2 = [ 5; 6; 7; 1; 2; 3; 4;] |\u003E List.map ((*) 10000)\nlet r3 = [ 3; 1; 5; 2; 8; 7; 5;] |\u003E List.map ((*) 10000)\n\nlet t  = [0; 45; 90; 135; 200; 320; 184;]\n\n(**\nConsider this combined polar chart:\n*)\n\nlet combinedPolar =\n    [\n        Chart.PointPolar(r,t,Name=\u0022PointPolar\u0022)\n        Chart.LinePolar(r2,t,Name=\u0022LinePolar\u0022, ShowMarkers = true)\n        Chart.SplinePolar(r3,t,Name=\u0022SplinePolar\u0022, ShowMarkers = true)\n    ]\n    \n    |\u003E Chart.combine\n\n(*** condition: ipynb ***)\n#if IPYNB\ncombinedPolar\n#endif // IPYNB\n\n(***hide***)\ncombinedPolar |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n## Styling the polar layout\n\nUse the \u0060Chart.withPolar\u0060 function and initialize a Polar layout with the desired looks\n*)\nopen Plotly.NET.LayoutObjects\n\nlet styledPolar = \n    combinedPolar\n    |\u003E Chart.withPolar(\n        Polar.init(\n            Sector= (0., 270.),\n            Hole=0.1\n        )\n    )\n\n\n(*** condition: ipynb ***)\n#if IPYNB\nstyledPolar\n#endif // IPYNB\n\n(***hide***)\nstyledPolar |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n## Styling radial and angular axes\n\nYou could pass these axes to \u0060Chart.withPolar\u0060, but for the case where you want to specifically set the angular or radial axis, there are the \u0060Chart.withAngularAxis\u0060 and \u0060Chart.withRadialAxis\u0060 functions:\n*)\n\nlet styledPolar2 =\n    styledPolar\n    |\u003E Chart.withAngularAxis(\n        AngularAxis.init(\n            Color=Color.fromString \u0022darkblue\u0022\n        )\n    )\n    |\u003E Chart.withRadialAxis(\n        RadialAxis.init(\n            Title = Title.init(\u0022Hi, i am the radial axis\u0022),\n            Color=Color.fromString \u0022darkblue\u0022,\n            SeparateThousands = true\n        )\n    )\n\n\n(*** condition: ipynb ***)\n#if IPYNB\nstyledPolar2\n#endif // IPYNB\n\n(***hide***)\nstyledPolar2 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)"},{"uri":"https://plotly.net/07_1_funnel.html","title":"Funnel Charts","content":"(**\n---\ntitle: Funnel Charts\ncategory: Finance Charts\ncategoryindex: 7\nindex: 2\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 12.0.3\u0022\n#r \u0022nuget: DynamicObj\u0022\n#r \u0022../bin/Plotly.NET/netstandard2.0/Plotly.NET.dll\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# Funnel Charts\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/Plotly.NET/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create funnel charts in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n*)\n\nlet y = [|\u0022Sales person A\u0022; \u0022Sales person B\u0022; \u0022Sales person C\u0022; \u0022Sales person D\u0022; \u0022Sales person E\u0022|]\nlet x = [|1200.; 909.4; 600.6; 300.; 80.|]\n\n(**\nFunnel charts visualize stages in a process using length-encoded bars. This trace can be used to show data in either a part-to-whole \nrepresentation wherein each item appears in a single stage, or in a \u0022drop-off\u0022 representation wherein each item appears in each stage \nit traversed. See also the [FunnelArea]({{root}}/6_2_funnel_area.html) chart for a different approach to visualizing funnel data.\n*)\n\nopen Plotly.NET \nopen Plotly.NET.TraceObjects\n\n// Customize the connector lines used to connect the funnel bars\nlet connectorLine = Line.init (Color=Color.fromString \u0022royalblue\u0022, Dash=StyleParam.DrawingStyle.Dot, Width=3.)\nlet connector = FunnelConnector.init(Line=connectorLine)\n\n// Customize the outline of the funnel bars\nlet line = Line.init(Width=2.,Color=Color.fromHex \u00223E4E88\u0022)\n\n// create a funnel chart using custom connectors and outlines\nlet funnel =\n    Chart.Funnel (x,y,Color=Color.fromHex \u002259D4E8\u0022, Line=line, Connector=connector)\n    |\u003E Chart.withMarginSize(Left=100)\n\n(*** condition: ipynb ***)\n#if IPYNB\nfunnel\n#endif // IPYNB\n\n(***hide***)\nfunnel |\u003E GenericChart.toChartHTML\n(***include-it-raw***)"},{"uri":"https://plotly.net/01_1_errorbars.html","title":"Error bars","content":"(**\n---\ntitle: Error bars\ncategory: Chart Layout\ncategoryindex: 2\nindex: 2\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 12.0.3\u0022\n#r \u0022nuget: DynamicObj\u0022\n#r \u0022../bin/Plotly.NET/netstandard2.0/Plotly.NET.dll\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(**\n# Error bars\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/Plotly.NET/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to add error bars to plots in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n\n*)\n\nopen Plotly.NET\n\nlet x  = [1.; 2.; 3.; 4.; 5.; 6.; 7.; 8.; 9.; 10.; ]\nlet y\u0027 = [2.; 1.5; 5.; 1.5; 3.; 2.5; 2.5; 1.5; 3.5; 1.]\nlet xError = [|0.2;0.3;0.2;0.1;0.2;0.4;0.2;0.08;0.2;0.1;|]\nlet yError = [|0.3;0.2;0.1;0.4;0.2;0.4;0.1;0.18;0.02;0.2;|]\n(**\nTo add error bars to a chart, use the \u0060Chart.with*ErrorStyle\u0060 functions for either X, Y, or Z.\n*)\n\nlet pointsWithErrorBars =\n    Chart.Point(x,y\u0027,Name=\u0022points with errors\u0022)    \n    |\u003E Chart.withXErrorStyle (Array=xError,Symmetric=true)\n    |\u003E Chart.withYErrorStyle (Array=yError, Arrayminus = xError) // for negative error, use positive values in the \u0060Arrayminus\u0060 argument \n\n(*** condition: ipynb ***)\n#if IPYNB\npointsWithErrorBars\n#endif // IPYNB\n\n(***hide***)\npointsWithErrorBars |\u003E GenericChart.toChartHTML\n(***include-it-raw***)"},{"uri":"https://plotly.net/03_1_3d-surface-plots.html","title":"3D surface plots","content":"(**\n---\ntitle: 3D surface plots\ncategory: 3D Charts\ncategoryindex: 4\nindex: 2\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 12.0.3\u0022\n#r \u0022nuget: DynamicObj\u0022\n#r \u0022../bin/Plotly.NET/netstandard2.0/Plotly.NET.dll\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# 3D surface plots\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/Plotly.NET/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create 3D surface plots in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n*)\nopen System\nopen Plotly.NET \n\n//---------------------- Generate linearly spaced vector ----------------------\nlet linspace (min,max,n) = \n    if n \u003C= 2 then failwithf \u0022n needs to be larger then 2\u0022\n    let bw = float (max - min) / (float n - 1.)\n    Array.init n (fun i -\u003E min \u002B (bw * float i))\n\n//---------------------- Create example data ----------------------\nlet size = 100\nlet x = linspace(-2. * Math.PI, 2. * Math.PI, size)\nlet y = linspace(-2. * Math.PI, 2. * Math.PI, size)\n\nlet f x y = - (5. * x / (x**2. \u002B y**2. \u002B 1.) )\n\nlet z = \n    Array.init size (fun i -\u003E \n        Array.init size (fun j -\u003E f x.[j] y.[i] )\n                    )\n\nlet surface = \n    z\n    |\u003E Chart.Surface\n\n(*** condition: ipynb ***)\n#if IPYNB\nsurface\n#endif // IPYNB\n\n(***hide***)\nsurface |\u003E GenericChart.toChartHTML\n(*** include-it-raw ***)\n\n// Create simple example data were x y and z is given (z is a xy-Matrix)\nlet x\u0027 = [0.;2.5]\nlet y\u0027 = [0.;2.5]\nlet z\u0027 = [\n    [1.;1.;]; // row wise (length x)\n    [1.;2.;];\n    ] // column (length y)\n\nopen Plotly.NET.TraceObjects\n\nlet surface2 = \n    Chart.Surface(z\u0027,x\u0027,y\u0027,Opacity=0.5,Contours=Contours.initXyz(Show=true))\n\n(*** condition: ipynb ***)\n#if IPYNB\nsurface2\n#endif // IPYNB\n\n(***hide***)\nsurface2 |\u003E GenericChart.toChartHTML\n(*** include-it-raw ***)\n\n"},{"uri":"https://plotly.net/06_1_mapbox-plots.html","title":"Scatter and line plots on Mapbox maps","content":"(**\n---\ntitle: Scatter and line plots on Mapbox maps\ncategory: Mapbox map charts\ncategoryindex: 7\nindex: 2\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 12.0.3\u0022\n#r \u0022nuget: DynamicObj\u0022\n#r \u0022../bin/Plotly.NET/netstandard2.0/Plotly.NET.dll\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# Scatter and line plots on Mapbox maps\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/Plotly.NET/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create Point and Line charts on Mapbox maps in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n*)\nopen Plotly.NET \n\nlet cityNames = [\n    \u0022Montreal\u0022; \u0022Toronto\u0022; \u0022Vancouver\u0022; \u0022Calgary\u0022; \u0022Edmonton\u0022;\n    \u0022Ottawa\u0022; \u0022Halifax\u0022; \u0022Victoria\u0022; \u0022Winnepeg\u0022; \u0022Regina\u0022\n]\n\nlet lon = [\n    -73.57; -79.24; -123.06; -114.1; -113.28;\n    -75.43; -63.57; -123.21; -97.13; -104.6\n]\nlet lat = [\n    45.5; 43.4; 49.13; 51.1; 53.34; 45.24;\n    44.64; 48.25; 49.89; 50.45\n]\n\n(**\nThe simplest type of geographic plot using Mapbox is plotting the (lon,lat) pairs of a location via \u0060Chart.PointMapbox\u0060. \nHere is an example using the location of Canadian cities:\n*)\nopen Plotly.NET.LayoutObjects\n\nlet pointMapbox = \n    Chart.PointMapbox(\n        lon,lat,\n        Labels = cityNames,\n        TextPosition = StyleParam.TextPosition.TopCenter\n    )\n    |\u003E Chart.withMapbox(\n        Mapbox.init(\n            Style=StyleParam.MapboxStyle.OpenStreetMap,\n            Center=(-104.6,50.45)\n        )\n    )\n\n(*** condition: ipynb ***)\n#if IPYNB\npointMapbox\n#endif // IPYNB\n\n(***hide***)\npointMapbox |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\nTo connect the given (lon,lat) pairs via straight lines, use \u0060Chart.LineGeo\u0060. \nBelow is an example that pulls external data as a Deedle data \nframe containing the source and target locations of American Airlines flights from Feb. 2011:\n*)\n\n#r \u0022nuget: Deedle\u0022\n#r \u0022nuget: FSharp.Data\u0022\nopen Deedle\nopen FSharp.Data\nopen System.IO\nopen System.Text\n\nlet data = \n    Http.RequestString \u0022https://raw.githubusercontent.com/plotly/datasets/c34aaa0b1b3cddad335173cb7bc0181897201ee6/2011_february_aa_flight_paths.csv\u0022\n    |\u003E fun csv -\u003E Frame.ReadCsvString(csv,true,separators=\u0022,\u0022)\n\nlet opacityVals : float [] = data.[\u0022cnt\u0022] |\u003E Series.values |\u003E fun s -\u003E s |\u003E Seq.map (fun v -\u003E v/(Seq.max s)) |\u003E Array.ofSeq\nlet startCoords = Series.zipInner data.[\u0022start_lon\u0022] data.[\u0022start_lat\u0022]\nlet endCoords = Series.zipInner data.[\u0022end_lon\u0022] data.[\u0022end_lat\u0022]\nlet coords = Series.zipInner startCoords endCoords |\u003E Series.values\n\nlet flights = \n    coords \n    |\u003E Seq.mapi (fun i (startCoords,endCoords) -\u003E\n        Chart.LineMapbox(\n            [startCoords; endCoords],\n            Opacity = opacityVals.[i],\n            Color = Color.fromString \u0022red\u0022\n        )\n    )\n    |\u003E Chart.combine\n    |\u003E Chart.withLegend(false)\n    |\u003E Chart.withMapbox(\n        Mapbox.init(\n            Style=StyleParam.MapboxStyle.OpenStreetMap,\n            Center=(-97.0372,32.8959)\n        )\n    )\n    |\u003E Chart.withMarginSize(0,0,50,0)\n    |\u003E Chart.withTitle \u0022Feb. 2011 American Airline flights\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\nflights\n#endif // IPYNB\n\n(***hide***)\nflights |\u003E GenericChart.toChartHTML\n(***include-it-raw***)"},{"uri":"https://plotly.net/10_1_styling_ternary_layouts.html","title":"Styling ternary layouts","content":"(**\n---\ntitle: Styling ternary layouts\ncategory: Ternary Plots\ncategoryindex: 11\nindex: 2\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 12.0.3\u0022\n#r \u0022nuget: DynamicObj\u0022\n#r \u0022../bin/Plotly.NET/netstandard2.0/Plotly.NET.dll\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(**\n# Styling ternary layouts\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/Plotly.NET/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to style polar layouts in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n*)\nopen Plotly.NET\n\n// a coordinates\nlet a  = [ 1; 2; 3; 4; 5; 6; 7;]\n\n// b coordinates\nlet b  = a |\u003E List.rev\n\n//c\nlet c  = [ 2; 2; 2; 2; 2; 2; 2;]\n\n(**\nConsider this combined ternary chart:\n*)\n\nlet combinedTernary =\n    [\n        Chart.PointTernary(a,b,c)\n        Chart.LineTernary(a,c,Sum = 10)\n    ]\n    \n    |\u003E Chart.combine\n\n(*** condition: ipynb ***)\n#if IPYNB\ncombinedTernary\n#endif // IPYNB\n\n(***hide***)\ncombinedTernary |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n## Styling the polar layout\n\nUse the \u0060Chart.withTernary\u0060 function and initialize a Ternary layout with the desired looks\n*)\nopen Plotly.NET.LayoutObjects\n\nlet styledTernary = \n    combinedTernary\n    |\u003E Chart.withTernary(\n        Ternary.init(\n            AAxis = LinearAxis.init(Title = Title.init(\u0022A\u0022), Color = Color.fromKeyword ColorKeyword.DarkOrchid),\n            BAxis = LinearAxis.init(Title = Title.init(\u0022B\u0022), Color = Color.fromKeyword ColorKeyword.DarkRed)\n        )\n    )\n\n(*** condition: ipynb ***)\n#if IPYNB\nstyledTernary\n#endif // IPYNB\n\n(***hide***)\nstyledTernary |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n## Styling A, B, and C Axes\n\nYou could pass these axes to \u0060Chart.withTernary\u0060 as above, but for the case where you want to specifically set one axis, there are the \u0060Chart.withAAxis\u0060, \u0060Chart.withBAxis\u0060, \u0060Chart.withCAxis\u0060 functions:\n*)\n\nlet styledTernary2 =\n    styledTernary\n    |\u003E Chart.withCAxis(LinearAxis.init(Title = Title.init(\u0022C\u0022), Color = Color.fromKeyword ColorKeyword.DarkCyan))\n    \n\n\n(*** condition: ipynb ***)\n#if IPYNB\nstyledTernary2\n#endif // IPYNB\n\n(***hide***)\nstyledTernary2 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)"},{"uri":"https://plotly.net/00_2_display-options.html","title":"Display Options","content":"(**\n---\ntitle: Display Options\ncategory: General\ncategoryindex: 1\nindex: 3\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 12.0.3\u0022\n#r \u0022nuget: DynamicObj\u0022\n#r \u0022../bin/Plotly.NET/netstandard2.0/Plotly.NET.dll\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# Display Options\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/Plotly.NET/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to alter the display options that control the html document that contains plotly charts\n\nYou can control the html document that gets created via \u0060Chart.Show\u0060 with various functions that change a chart\u0027s \u0060DisplayOptions\u0060.\n\nNaturally, these full html documents can not be embedded in this documentation page, so images have to suffice in this case.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n\n*)\n\nopen Plotly.NET \n  \nlet x  = [1.; 2.; 3.; 4.; 5.; 6.; 7.; 8.; 9.; 10.; ]\nlet y = [2.; 1.5; 5.; 1.5; 3.; 2.5; 2.5; 1.5; 3.5; 1.]\n\n\n(**\n## Chart description\n\nTo create a chart description to put below the chart, use \u0060ChartDescription.create\u0060 to create the description, and \u0060Chart.WithDescription\u0060 \nto add the description to the chart\u0027s display options:\n*)\n\nlet description1 =\n    ChartDescription.create \u0022Hello\u0022 \u0022F#\u0022\n\n(***do-not-eval***)\nlet desc1 =\n    Chart.Point(x,y,Name=\u0022desc1\u0022)    \n    |\u003E Chart.withDescription(description1)\n    |\u003E Chart.show\n\n(**\n\n![]({{root}}img/desc1.png)\n\nThe \u0060ChartDescription\u0060 type is a bit barebones for now, but you can contain any valid html in both \u0060Heading\u0060 and \u0060Text\u0060 fields:\n*)\n\nlet description2 =\n    ChartDescription.create \u0022\u003Ch1\u003EI am heading\u003C/h1\u003E\u0022 \u0022\u003Col\u003E\u003Cli\u003EHi\u003C/li\u003E\u003Cli\u003Ethere\u003C/li\u003E\u003C/ol\u003E\u0022\n\n(***do-not-eval***)\nlet desc2 =\n    Chart.Point(x,y,Name=\u0022desc1\u0022)    \n    |\u003E Chart.withDescription(description2)\n    |\u003E Chart.show\n\n(**\n\n![]({{root}}img/desc2.png)\n\n## Adding additional head tags\n\nYou can add any number of additional html tags to the documents \u0060\u003Chead\u003E\u0060 tag using \u0060Chart.WithAdditionalHeadTags\u0060.\n\nFor example, you can load external css libraries to style the chart description:\n\n*)\n\n//html for description containing bulma classes such as \u0022hero\u0022\nlet bulmaHero = \u0022\u0022\u0022\u003Csection class=\u0022hero is-primary is-bold\u0022\u003E\n  \u003Cdiv class=\u0022hero-body\u0022\u003E\n    \u003Cp class=\u0022title\u0022\u003E\n      Hero title\n    \u003C/p\u003E\n    \u003Cp class=\u0022subtitle\u0022\u003E\n      Hero subtitle\n    \u003C/p\u003E\n  \u003C/div\u003E\n\u003C/section\u003E\n\u0022\u0022\u0022\n\n// chart description containing bulma classes\nlet description3 =\n    ChartDescription.create \n        \u0022\u0022\u0022\u003Ch1 class=\u0022title\u0022\u003EI am heading\u003C/h1\u003E\u0022\u0022\u0022 \n       bulmaHero\n\n(***do-not-eval***)\nlet desc3 =\n    Chart.Point(x,y,Name=\u0022desc3\u0022)    \n    |\u003E Chart.withDescription description3\n    // Add reference to the bulma css framework\n    |\u003E Chart.withAdditionalHeadTags [\u0022\u0022\u0022\u003Clink rel=\u0022stylesheet\u0022 href=\u0022https://cdn.jsdelivr.net/npm/bulma@0.9.2/css/bulma.min.css\u0022\u003E\u0022\u0022\u0022]\n    |\u003E Chart.show\n\n(**\n\n![]({{root}}img/desc3.png)\n\n## Using MathTeX\n\nBy popular request, \u0060Chart.WithMathTex\u0060 is a prebuilt function to enable MathTeX for your generated plotly chart documents:\n\n*)\n\n(***do-not-eval***)\n[\n    Chart.Point([(1.,2.)],@\u0022$\\beta_{1c} = 25 \\pm 11 \\text{ km s}^{-1}$\u0022)\n    Chart.Point([(2.,4.)],@\u0022$\\beta_{1c} = 25 \\pm 11 \\text{ km s}^{-1}$\u0022)\n]\n|\u003E Chart.combine\n|\u003E Chart.withTitle @\u0022$\\beta_{1c} = 25 \\pm 11 \\text{ km s}^{-1}$\u0022\n// include mathtex tags in \u003Chead\u003E. pass true to append these scripts, false to ONLY include MathTeX.\n|\u003E Chart.withMathTex(true)\n|\u003E Chart.show\n\n(**\n\n![]({{root}}img/desc4.png)\n\n*)"},{"uri":"https://plotly.net/07_2_funnel_area.html","title":"FunnelArea Charts","content":"(**\n---\ntitle: FunnelArea Charts\ncategory: Finance Charts\ncategoryindex: 7\nindex: 3\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 12.0.3\u0022\n#r \u0022nuget: DynamicObj\u0022\n#r \u0022../bin/Plotly.NET/netstandard2.0/Plotly.NET.dll\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# FunnelArea Charts\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/Plotly.NET/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create funnel area charts in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n*)\n\nlet values = [|5; 4; 3; 2; 1|]\nlet text = [|\u0022The 1st\u0022; \u0022The 2nd\u0022; \u0022The 3rd\u0022; \u0022The 4th\u0022; \u0022The 5th\u0022|]\n\n(**\nFunnelArea charts visualize stages in a process using area-encoded trapezoids. \nThis trace can be used to show data in a part-to-whole representation similar to a \u0022pie\u0022 trace, \nwherein each item appears in a single stage. See also the the [Funnel]({{root}}/6_1_funnel.html) chart for a different approach \nto visualizing funnel data.\n*)\n\nopen Plotly.NET \n\nlet line = Line.init (Color=Color.fromString \u0022purple\u0022, Width=3.)\n\nlet funnelArea = \n    Chart.FunnelArea(Values=values, Text=text, Line=line)\n\n(*** condition: ipynb ***)\n#if IPYNB\nfunnelArea\n#endif // IPYNB\n\n(***hide***)\nfunnelArea |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n"},{"uri":"https://plotly.net/04_4_2d-histograms.html","title":"2D Histograms","content":"(**\n---\ntitle: 2D Histograms\ncategory: Distribution Charts\ncategoryindex: 5\nindex: 4\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 12.0.3\u0022\n#r \u0022nuget: DynamicObj\u0022\n#r \u0022../bin/Plotly.NET/netstandard2.0/Plotly.NET.dll\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# 2D Histograms\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/Plotly.NET/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create a bi-dimensional histogram of two data samples in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n*)\n\nopen Plotly.NET \n\n//---------------------- generate random normally distributed data ---------------------- \nlet normal (rnd:System.Random) mu tau =\n    let mutable v1 = 2.0 * rnd.NextDouble() - 1.0\n    let mutable v2 = 2.0 * rnd.NextDouble() - 1.0\n    let mutable r = v1 * v1 \u002B v2 * v2\n    while (r \u003E= 1.0 || r = 0.0) do\n        v1 \u003C- 2.0 * rnd.NextDouble() - 1.0\n        v2 \u003C- 2.0 * rnd.NextDouble() - 1.0\n        r \u003C- v1 * v1 \u002B v2 * v2\n    let fac = sqrt(-2.0*(log r)/r)\n    (tau * v1 * fac \u002B mu)\n\nlet rnd = System.Random()\nlet n = 2000\nlet a = -1.\nlet b = 1.2\nlet step i = a \u002B  ((b - a) / float (n - 1)) * float i\n\n//---------------------- generate data distributed in x and y direction ---------------------- \nlet x = Array.init n (fun i -\u003E ((step i)**3.) \u002B (0.3 * (normal (rnd) 0. 2.) ))\nlet y = Array.init n (fun i -\u003E ((step i)**6.) \u002B (0.3 * (normal (rnd) 0. 2.) ))\n\n(**\nA Histogram2D chart can be created using the \u0060Chart.Histogram2D\u0060 or \u0060Chart.Histogram2DContour\u0060 functions.\n*)\n\nlet histogramContour =\n    [\n        Chart.Histogram2DContour (x,y,Line=Line.init(Width=0.))\n        Chart.Point(x,y,Opacity=0.3)\n    ]\n    |\u003E Chart.combine\n\n(*** condition: ipynb ***)\n#if IPYNB\nhistogramContour\n#endif // IPYNB\n\n(***hide***)\nhistogramContour |\u003E GenericChart.toChartHTML\n(*** include-it-raw ***)\n\nlet histogram2D = \n    Chart.Histogram2D (x,y)\n\n(*** condition: ipynb ***)\n#if IPYNB\nhistogram2D\n#endif // IPYNB\n\n(***hide***)\nhistogram2D |\u003E GenericChart.toChartHTML\n(*** include-it-raw ***)"},{"uri":"https://plotly.net/02_4_bubble-charts.html","title":"Bubble charts","content":"(**\n---\ntitle: Bubble charts\ncategory: Simple Charts\ncategoryindex: 3\nindex: 5\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 12.0.3\u0022\n#r \u0022nuget: DynamicObj\u0022\n#r \u0022../bin/Plotly.NET/netstandard2.0/Plotly.NET.dll\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# Bubble charts\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/Plotly.NET/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create bubble charts in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n*)\n\nopen Plotly.NET \n  \nlet x = [2; 4; 6;]\nlet y = [4; 1; 6;]\nlet size = [19; 26; 55;]\n\n(**\n\nA bubble chart is a type of chart that displays three dimensions of data. Each entity with its triplet (x, y, size) \nof associated data is plotted as a disk. The first two values determine the disk\u0027s xy location and the \nthird its size.\n\n*)\n\nlet bubble1 = Chart.Bubble(x,y,size)\n\n(*** condition: ipynb ***)\n#if IPYNB\nbubble1\n#endif // IPYNB\n\n(***hide***)\nbubble1 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n"},{"uri":"https://plotly.net/04_5_splom.html","title":"Scatterplot matrix","content":"(**\n---\ntitle: Scatterplot matrix\ncategory: Distribution Charts\ncategoryindex: 5\nindex: 5\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 12.0.3\u0022\n#r \u0022nuget: DynamicObj\u0022\n#r \u0022../bin/Plotly.NET/netstandard2.0/Plotly.NET.dll\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# Scatterplot matrix \n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/Plotly.NET/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to plot a scatterplot matrix (splom) in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n\n*)\n\nopen Plotly.NET \n\nlet data = \n    [\n        \u0022A\u0022,[|1.;4.;3.4;0.7;|]\n        \u0022B\u0022,[|3.;1.5;1.7;2.3;|]\n        \u0022C\u0022,[|2.;4.;3.1;5.|]\n        \u0022D\u0022,[|4.;2.;2.;4.;|]\n    ]\n\n(**\nUsing a scatterplot matrix of several different variables can help to determine whether there are any\nrelationships among the variables in the dataset.\n\n**Attention**: this function is not very well tested and does not use the \u0060Chart.Grid\u0060 functionality. \nUntil that is fixed, consider creating splom plot programatically using \u0060Chart.Grid\u0060 for more control.\n*)\n\nlet splom1 =\n    Chart.Splom(data,Color=Color.fromString \u0022blue\u0022)\n\n(*** condition: ipynb ***)\n#if IPYNB\nsplom1\n#endif // IPYNB\n\n(***hide***)\nsplom1 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n\n\n\n"},{"uri":"https://plotly.net/03_5_3d-volume-plots.html","title":"3D Volume plots","content":"(**\n---\ntitle: 3D Volume plots\ncategory: 3D Charts\ncategoryindex: 4\nindex: 6\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 12.0.3\u0022\n#r \u0022nuget: DynamicObj\u0022\n#r \u0022../bin/Plotly.NET/netstandard2.0/Plotly.NET.dll\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# 3D Volume plots\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/Plotly.NET/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create 3D-Volume charts in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n*)\n\nopen System\nopen Plotly.NET \n\nlet linspace (min,max,n) = \n    if n \u003C= 2 then failwithf \u0022n needs to be larger then 2\u0022\n    let bw = float (max - min) / (float n - 1.)\n    Array.init n (fun i -\u003E min \u002B (bw * float i))\n\nlet mgrid (min,max,n) = \n\n    let data = linspace(min,max,n)\n\n    let z = [|for i in 1 .. n do [|for i in 1 .. n do yield data|]|]\n    let x = [|for i in 1 .. n do [|for j in 1 .. n do yield [|for k in 1 .. n do yield data.[i-1]|]|]|]\n    let y = [|for i in 1 .. n do [|for j in 1 .. n do yield [|for k in 1 .. n do yield data.[j-1]|]|]|]\n\n    x,y,z\n\nlet x,y,z = \n    mgrid(-8.,8.,40)\n    |\u003E fun (x,y,z) -\u003E\n        (x |\u003E Array.concat |\u003E Array.concat),\n        (y |\u003E Array.concat |\u003E Array.concat),\n        (z |\u003E Array.concat |\u003E Array.concat)\n\nlet values = \n    Array.map3 (fun x y z -\u003E\n        sin(x*y*z) / (x*y*z)\n    ) x y z\n\nopen Plotly.NET.TraceObjects\n\nlet volume =\n    Chart.Volume(\n       x, y, z, values,\n       Opacity=0.1,\n       Surface=(Surface.init(Count=17)),\n       IsoMin=0.1,\n       IsoMax=0.8,\n       ColorScale = StyleParam.Colorscale.Viridis\n    )\n    \n(*** condition: ipynb ***)\n#if IPYNB\nvolume\n#endif // IPYNB\n\n(***hide***)\nvolume |\u003E GenericChart.toChartHTML\n(*** include-it-raw ***)"},{"uri":"https://plotly.net/00_3_chart-config.html","title":"Chart config","content":"(**\n---\ntitle: Chart config\ncategory: General\ncategoryindex: 1\nindex: 4\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 12.0.3\u0022\n#r \u0022nuget: DynamicObj\u0022\n#r \u0022../bin/Plotly.NET/netstandard2.0/Plotly.NET.dll\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# Chart config\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/Plotly.NET/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n\u0060Config\u0060 is an object that configures high level properties of the chart like making all chart elements editable or the tool bar on top\n\n## Image button options\n\nOptions for chart export can be set in the config at \u0060ToImageButtonOptions\u0060:\n\n  - Three file formats for chart exports are supported (SVG, PNG, JPEG) and can be set as \u0060Format\u0060. \n\n  - A predefined name for the downloaded chart can be set at \u0060Filename\u0060. \n\n  - The dimensions of the downloaded chart are set at \u0060Width\u0060 and \u0060Height\u0060.\n\n  - The \u0060Scale\u0060 defines the size of the exported svg.\n\nThe settings do not apply for the html document containing the chart but for charts that are exported by clicking the camera icon in the menu bar.\n\n*)\n\nopen Plotly.NET\nopen Plotly.NET.ConfigObjects\n\nlet svgConfig =\n    Config.init (\n        ToImageButtonOptions = ToImageButtonOptions.init(\n            Format = StyleParam.ImageFormat.JPEG,\n            Filename = \u0022mySvgChart\u0022,\n            Width = 900.,\n            Height = 600.,\n            Scale = 10.\n        )\n    )\n\nlet svgButtonChart = \n    Chart.Point([(1.,2.)])\n    |\u003E Chart.withConfig svgConfig\n\n\n(*** condition: ipynb ***)\n#if IPYNB\nsvgButtonChart\n#endif // IPYNB\n\n(***hide***)\nsvgButtonChart |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(** \n## Static plots\n\nTo create a static plot that has no hoverable elements, use \u0060StaticPlot=true\u0060 on the Config:\n\n*)\n\nlet staticConfig = Config.init(StaticPlot=true)\n\nlet staticPlot =\n    Chart.Point([(1.,2.)])\n    |\u003E Chart.withConfig staticConfig\n\n(*** condition: ipynb ***)\n#if IPYNB\nstaticPlot\n#endif // IPYNB\n\n(***hide***)\nstaticPlot |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(** \n## Editable charts\n\nYou can define fields that can be edited on the chart by setting \u0060Editable = true\u0060 on the config, optionally explicitly setting the editable parts via \u0060EditableAnnotations\u0060\n\n*)\n\nlet editableConfig = \n    Config.init(\n        Editable = true,\n        EditableAnnotations = [\n            StyleParam.AnnotationEditOptions.LegendPosition\n            StyleParam.AnnotationEditOptions.AxisTitleText\n            StyleParam.AnnotationEditOptions.LegendText\n        ]\n    )\n\nlet editablePlot =\n    Chart.Point([(1.,2.)])\n    |\u003E Chart.withConfig editableConfig\n\n(*** condition: ipynb ***)\n#if IPYNB\neditablePlot\n#endif // IPYNB\n\n(***hide***)\neditablePlot |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(** \n## Responsive charts\n\nTo create a chart that is reponsive to its container size, use \u0060Responsive=true\u0060 on the Config:\n\n(try resizing the window)\n*)\n\nlet responsiveConfig = Config.init(Responsive=true)\n\nlet responsivePlot =\n    Chart.Point([(1.,2.)])\n    |\u003E Chart.withConfig responsiveConfig\n\n(*** condition: ipynb ***)\n#if IPYNB\nresponsivePlot\n#endif // IPYNB\n\n(***hide***)\nresponsivePlot |\u003E GenericChart.toChartHTML\n(***include-it-raw***)"},{"uri":"https://plotly.net/02_3_range-plots.html","title":"Range plots","content":"(**\n---\ntitle: Range plots\ncategory: Simple Charts\ncategoryindex: 3\nindex: 4\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 12.0.3\u0022\n#r \u0022nuget: DynamicObj\u0022\n#r \u0022../bin/Plotly.NET/netstandard2.0/Plotly.NET.dll\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# Range plots\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/Plotly.NET/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create Range plot charts in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n\n*)\n\nopen Plotly.NET \n\nlet rnd = System.Random()\n\nlet x  = [1.; 2.; 3.; 4.; 5.; 6.; 7.; 8.; 9.; 10.; ]\nlet y = [2.; 1.5; 5.; 1.5; 3.; 2.5; 2.5; 1.5; 3.5; 1.]\n\nlet yUpper = y |\u003E List.map (fun v -\u003E v \u002B rnd.NextDouble())\nlet yLower = y |\u003E List.map (fun v -\u003E v - rnd.NextDouble())\n\n(**\nA range plot is commonly used to indicate some property of data that lies in a certain range around a central value,\nfor example the range of all predictions from different models, scattering around a central tendency.\n*)\n\nlet range1 =\n    Chart.Range(\n        x,y,yUpper,yLower,\n        StyleParam.Mode.Lines_Markers,\n        Color = Color.fromString \u0022grey\u0022,\n        RangeColor = Color.fromString \u0022lightblue\u0022)\n\n(*** condition: ipynb ***)\n#if IPYNB\nrange1\n#endif // IPYNB\n\n(***hide***)\nrange1 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n"},{"uri":"https://plotly.net/09_2_sankey.html","title":"Sankey Charts","content":"(**\n---\ntitle: Sankey Charts\ncategory: Categorical Charts\ncategoryindex: 10\nindex: 3\n---\n*)\n\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 12.0.3\u0022\n#r \u0022nuget: DynamicObj\u0022\n#r \u0022../bin/Plotly.NET/netstandard2.0/Plotly.NET.dll\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# Sankey charts\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/Plotly.NET/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create sankey charts in F#.\n\nSankey charts are a visualization of multiple, linked graphs layed out linearly. \nThese are usually used to depict flow between nodes or stations.\nTo create Sankey, a set of nodes and links between them are required. \nThese are created using the provided Node and Link structures.\n*)\n\nopen Plotly.NET \n\n// create nodes\nlet n1 = Node.Create(\u0022a\u0022,color=\u0022Black\u0022)\nlet n2 = Node.Create(\u0022b\u0022,color=\u0022Red\u0022)\nlet n3 = Node.Create(\u0022c\u0022,color=\u0022Purple\u0022)\nlet n4 = Node.Create(\u0022d\u0022,color=\u0022Green\u0022)\nlet n5 = Node.Create(\u0022e\u0022,color=\u0022Orange\u0022)\n\n// create links between nodes\nlet link1 = Link.Create(n1,n2,value=1.0)\nlet link2 = Link.Create(n2,n3,value=2.0)\nlet link3 = Link.Create(n1,n5,value=1.3)\nlet link4 = Link.Create(n4,n5,value=1.5)\nlet link5 = Link.Create(n3,n5,value=0.5)\n\nlet sankey1 = \n    Chart.Sankey(\n        [n1;n2;n3;n4;n5],\n        [link1;link2;link3;link4;link5]\n    )\n    |\u003E Chart.withTitle \u0022Sankey Sample\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\nsankey1\n#endif // IPYNB\n\n(***hide***)\nsankey1 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n"},{"uri":"https://plotly.net/index.html","title":"Plotly.NET\n","content":"(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 12.0.3\u0022\n#r \u0022nuget: DynamicObj\u0022\n#r \u0022../bin/Plotly.NET/netstandard2.0/Plotly.NET.dll\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n\n(**\n# Plotly.NET\n \n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/Plotly.NET/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\nPlotly.NET provides functions for generating and rendering plotly.js charts in **.NET** programming languages \uD83D\uDCC8\uD83D\uDE80. \n\n### Table of contents \n\n- [Installation](#Installation)\n    - [For applications and libraries](#For-applications-and-libraries)\n    - [For scripting](#For-scripting)\n    - [For dotnet interactive notebooks](#For-dotnet-interactive-notebooks)\n- [Overview](#Overview)\n    - [Basics](#Basics)\n        - [Initializing a chart](#Initializing-a-chart)\n        - [Styling a chart](#Styling-a-chart)\n        - [Displaying a chart](#Displaying-a-chart)\n    - [Comparison: Usage in F# and C#](#Comparison-Usage-in-F-and-C)\n        - [Functional pipeline style in F#](#Functional-pipeline-style-in-F)\n        - [Fluent interface style in C#](#Fluent-interface-style-in-C)\n        - [Declarative style in F# using the underlying \u0060DynamicObj\u0060](#Declarative-style-in-F-using-the-underlying)\n        - [Declarative style in C# using the underlying \u0060DynamicObj\u0060](#Declarative-style-in-C-using-the-underlying)\n- [Contributing and copyright](#Contributing-and-copyright)\n\n# Installation\n\nPlotly.NET will be available as 2.0.0 version of its predecessor FSharp.Plotly. The feature roadmap can be seen [here](https://github.com/plotly/Plotly.NET/issues/43). Contributions are very welcome!\n\nOld packages up until version 1.2.2 can be accessed via the old package name *FSharp.Plotly* [here](https://www.nuget.org/packages/FSharp.Plotly/)\n\n### For applications and libraries\n\nA preview version of Plotly.NET 2.0.0 is available on nuget to plug into your favorite package manager.\n\nYou can find all available package versions on the [nuget page](https://www.nuget.org/packages/Plotly.NET/).\n\n - dotnet CLI\n\n    \u0060\u0060\u0060shell\n    dotnet add package Plotly.NET --version {{fsdocs-package-version}}\n    \u0060\u0060\u0060\n\n - paket CLI\n\n    \u0060\u0060\u0060shell\n    paket add Plotly.NET --version {{fsdocs-package-version}}\n    \u0060\u0060\u0060\n\n - package manager\n\n    \u0060\u0060\u0060shell\n    Install-Package Plotly.NET -Version {{fsdocs-package-version}}\n    \u0060\u0060\u0060\n\n    Or add the package reference directly to your \u0060.*proj\u0060 file:\n\n    \u0060\u0060\u0060\n    \u003CPackageReference Include=\u0022Plotly.NET\u0022 Version=\u0022{{fsdocs-package-version}}\u0022 /\u003E\n    \u0060\u0060\u0060\n\n### For scripting\n\nYou can include the package via an inline package reference:\n\n\u0060\u0060\u0060\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n\u0060\u0060\u0060\n\n### For dotnet interactive notebooks\n\nYou can use the same inline package reference as in script, but as an additional goodie, \nthe interactive extensions for dotnet interactive have you covered for seamless chart rendering:\n\n\u0060\u0060\u0060\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n\u0060\u0060\u0060\n\n_Note_: \n\ndue to the currently fast development cycles of Dotnet Interactive, there might be increments in their versioning that renders the current version of Plotly.NET.Interactive incompatible (example [here](https://github.com/plotly/Plotly.NET/issues/67)).\n\nIf the interactive extension does not work, please file an issue and we will try to get it running again as soon as possible.\n\nA possible fix for this is the inclusion of Dotnet.Interactive preview package sources. To use these, add the following lines before referencning Plotly.NET.Interactive:\n\n\u0060\u0060\u0060\n#i \u0022nuget:https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet5/nuget/v3/index.json\u0022\n#i \u0022nuget:https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-tools/nuget/v3/index.json\u0022\n\u0060\u0060\u0060\n\n# Overview\n\n## Basics\n\nThe general design philosophy of Plotly.NET implements the following visualization flow:\n\n- **initialize** a \u0060GenericChart\u0060 object from the data you want to visualize by using the respective \u0060Chart.*\u0060 function, optionally setting some specific style parameters\n- further **style** the chart with fine-grained control, e.g. by setting axis titles, tick intervals, etc.\n- **display** (in the browser or as cell result in a notebook) or save the chart \n\n### Initializing a chart\n\nThe \u0060Chart\u0060 module contains a lot of functions named after the type of chart they will create, e.g. \n\u0060Chart.Point\u0060 will create a point chart, \u0060Chart.Scatter3d\u0060 wil create a 3D scatter chart, and so on.\n\nThe respective functions all contain specific arguments, but they all have in common that the first \nmandatory arguments are the data to visualize. \n\nExample: The first two arguments of the \u0060Chart.Point\u0060 function are the x and y data. You can therefore initialize a point chart like this:\n\n*)\nopen Plotly.NET\nlet xData = [0. .. 10.]\nlet yData = [0. .. 10.]\nlet myFirstChart = Chart.Point(xData,yData)\n\n(**\n\n### Styling a chart\n\nStyling functions are generally the \u0060Chart.with*\u0060 naming convention. The following styling example does:\n\n - set the chart title via \u0060Chart.withTitle\u0060\n - set the x axis title and removes the gridline from the axis via \u0060Chart.withXAxisStyle\u0060\n - set the y axis title and removes the gridline from the axis via \u0060Chart.withYAxisStyle\u0060\n\n*)\n\nlet myFirstStyledChart =\n    Chart.Point(xData,yData)\n    |\u003E Chart.withTitle \u0022Hello world!\u0022\n    |\u003E Chart.withXAxisStyle (\u0022xAxis\u0022, ShowGrid=false)\n    |\u003E Chart.withYAxisStyle (\u0022yAxis\u0022, ShowGrid=false)\n\n(**\n**Attention:** Styling functions mutate \uD83D\uDE08 the input chart, therefore possibly affecting bindings to intermediary results. \nWe recommend creating a single chart for each workflow to prevent unexpected results\n\n### Displaying a chart in the browser\n\nThe \u0060Chart.Show\u0060 function will open a browser window and render the input chart there. When working in a notebook context, after\n[referencing Plotly.NET.Interactive](#For-dotnet-interactive-notebooks), the function is not necessary, just end the cell with the value of the chart.\n\n*)\n\n(***do-not-eval***)\nmyFirstChart\n|\u003E Chart.show\n\n(**Should render this chart in your brower:*)\n\n(***hide***)\nmyFirstChart |\u003E GenericChart.toChartHTML\n(*** include-it-raw ***)\n\n(***do-not-eval***)\nmyFirstStyledChart\n|\u003E Chart.show\n\n(**And here is what happened after applying the styles from above:*)\n\n(***hide***)\nmyFirstStyledChart |\u003E GenericChart.toChartHTML\n(*** include-it-raw ***)\n\n\n(**\n### Displaying a chart in a notbook cell output\n\nIn a notebook context you usually have (at leat when running on a jupyter server like binder) no access to the browser on the machine where plotly runs on.\nThat\u0027s why you can render charts directly in the cell output. Just end the cell with the chart value:\n*)\n\nlet xData\u0027 = [0. .. 10.]\nlet yData\u0027 = [0. .. 10.]\nChart.Point(xData\u0027,yData\u0027)\n\n(**Here is the styled chart:*)\n\nChart.Point(xData,yData)\n|\u003E Chart.withTitle \u0022Hello world!\u0022\n|\u003E Chart.withXAxisStyle (\u0022xAxis\u0022, ShowGrid=false)\n|\u003E Chart.withYAxisStyle (\u0022yAxis\u0022, ShowGrid=false)\n\n\n(**\n## Comparison: Usage in F# and C#\n\nOne of the main design points of Plotly.NET it is to provide support for multiple flavors of chart generation. Here are 2 examples in different styles and languages that create an equivalent chart:\n \n### Functional pipeline style in F#:\n*)\n\n[(1,5);(2,10)]\n|\u003E Chart.Point\n|\u003E Chart.withTraceName(\u0022Hello from F#\u0022,ShowLegend=true)\n|\u003E Chart.withYAxisStyle(\u0022xAxis\u0022,ShowGrid= false, ShowLine=true)\n|\u003E Chart.withXAxisStyle(\u0022yAxis\u0022,ShowGrid= false, ShowLine=true)\n\n(**\n### Fluent interface style in C#:\n\n\u0060\u0060\u0060\nusing System;\nusing Plotly.NET;\nusing Microsoft.FSharp.Core; // use this for less verbose and more helpful intellisense\n\nnamespace Plotly.NET.Tests.CSharp\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            double[] x = new double[] { 1, 2 };\n            double[] y = new double[] { 5, 10 };\n            GenericChart.GenericChart chart = Chart2D.Chart.Point\u003Cdouble, double, string\u003E(x: x, y: y);\n            chart\n                .WithTraceName(\u0022Hello from C#\u0022, true)\n                .WithXAxisStyle(title: Title.init(\u0022xAxis\u0022), ShowGrid: false, ShowLine: true)\n                .WithYAxisStyle(title: Title.init(\u0022yAxis\u0022), ShowGrid: false, ShowLine: true)\n                .Show();\n        }\n    }\n}\n\n\u0060\u0060\u0060\n\n### Declarative style in F# using the underlying \u0060DynamicObj\u0060:\n*)\n\nopen Plotly.NET.LayoutObjects\n\nlet xAxis = \n    let tmp = LinearAxis()\n    tmp?title \u003C- \u0022xAxis\u0022\n    tmp?showgrid \u003C- false\n    tmp?showline \u003C- true    \n    tmp\n\nlet yAxis =\n    let tmp = LinearAxis()\n    tmp?title \u003C- \u0022yAxis\u0022\n    tmp?showgrid \u003C- false\n    tmp?showline \u003C- true    \n    tmp\n\nlet layout =\n    let tmp = Layout()\n    tmp?xaxis \u003C- xAxis\n    tmp?yaxis \u003C- yAxis\n    tmp?showlegend \u003C- true\n    tmp\n\nlet trace = \n    let tmp = Trace(\u0022scatter\u0022)\n    tmp?x \u003C- [1;2]\n    tmp?y \u003C- [5;10]\n    tmp?mode \u003C- \u0022markers\u0022\n    tmp?name \u003C- \u0022Hello from F#\u0022\n    tmp\n\nGenericChart.ofTraceObject true trace\n|\u003E GenericChart.setLayout layout\n\n(**\n### Declarative style in C# using the underlying \u0060DynamicObj\u0060:\n\n\u0060\u0060\u0060\nusing System;\nusing Plotly.NET;\nusing Microsoft.FSharp.Core; // use this for less verbose and more helpful intellisense\nusing Plotly.NET.LayoutObjects;\n\nnamespace Plotly.NET.Tests.CSharp\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            double[] x = new double[] { 1, 2 };\n            double[] y = new double[] { 5, 10 };\n\n            LinearAxis xAxis = new LinearAxis();\n            xAxis.SetValue(\u0022title\u0022, \u0022xAxis\u0022);\n            xAxis.SetValue(\u0022showgrid\u0022, false);\n            xAxis.SetValue(\u0022showline\u0022, true);\n\n            LinearAxis yAxis = new LinearAxis();\n            yAxis.SetValue(\u0022title\u0022, \u0022yAxis\u0022);\n            yAxis.SetValue(\u0022showgrid\u0022, false);\n            yAxis.SetValue(\u0022showline\u0022, true);\n\n            Layout layout = new Layout();\n            layout.SetValue(\u0022xaxis\u0022, xAxis);\n            layout.SetValue(\u0022yaxis\u0022, yAxis);\n            layout.SetValue(\u0022showlegend\u0022, true);\n\n            Trace trace = new Trace(\u0022scatter\u0022);\n            trace.SetValue(\u0022x\u0022, x);\n            trace.SetValue(\u0022y\u0022, y);\n            trace.SetValue(\u0022mode\u0022, \u0022markers\u0022);\n            trace.SetValue(\u0022name\u0022, \u0022Hello from C#\u0022);\n\n            GenericChart\n                .ofTraceObject(trace)\n                .WithLayout(layout)\n                .Show();\n        }\n    }\n}\n\u0060\u0060\u0060\n\n# Contributing and copyright\n\nThe project is hosted on [GitHub][gh] where you can [report issues][issues], fork \nthe project and submit pull requests. If you\u0027re adding a new public API, please also \nconsider adding [samples][content] that can be turned into a documentation. You might\nalso want to read the [library design notes][readme] to understand how it works.\n\nThe library is available under Public Domain license, which allows modification and \nredistribution for both commercial and non-commercial purposes. For more information see the \n[License file][license] in the GitHub repository. \n\n  [content]: https://github.com/plotly/Plotly.NET/tree/master/docs/content\n  [gh]: https://github.com/plotly/Plotly.NET\n  [issues]: https://github.com/plotly/Plotly.NET/issues\n  [readme]: https://github.com/plotly/Plotly.NET/blob/master/README.md\n  [license]: https://github.com/plotly/Plotly.NET/blob/master/LICENSE.txt\n*)"},{"uri":"https://plotly.net/05_0_geo-vs-mapbox.html","title":"Geo vs. Mapbox","content":"(**\n---\ntitle: Geo vs. Mapbox\ncategory: Geo map charts\ncategoryindex: 6\nindex: 1\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 12.0.3\u0022\n#r \u0022nuget: DynamicObj\u0022\n#r \u0022../bin/Plotly.NET/netstandard2.0/Plotly.NET.dll\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# Mapbox Maps vs Geo Maps\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/Plotly.NET/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This introduction shows the differences between Geo and Mapbox based geographical charts.\n\nPlotly and therefore Plotly.NET supports two different kinds of maps:\n\n- **Mapbox maps** are tile-based maps. If your figure is created with a \u0060Chart.*Mapbox\u0060 function or otherwise contains one or more traces of type \u0060scattermapbox\u0060, \n    \u0060choroplethmapbox\u0060 or \u0060densitymapbox\u0060, the layout.mapbox object in your figure contains configuration information for the map itself.\n    \n- **Geo maps** are outline-based maps. If your figure is created with a \u0060Chart.ScatterGeo, \u0060Chart.PointGeo\u0060, \u0060Chart.LineGeo\u0060 or \u0060Chart.Choropleth\u0060 function or \n    otherwise contains one or more traces of type \u0060scattergeo\u0060 or \u0060choropleth\u0060, the layout.geo object in your figure contains configuration information for the map itself.\n    \n_This page documents Geo outline-based maps, and the [Mapbox Layers documentation]({{root}}/06_0_geo-vs-mapbox.html) describes how to configure Mapbox tile-based maps._\n\n## Physical Base Maps\n\nPlotly Geo maps have a built-in base map layer composed of \u0022physical\u0022 and \u0022cultural\u0022 (i.e. administrative border) data from the Natural Earth Dataset. \nVarious lines and area fills can be shown or hidden, and their color and line-widths specified. \nIn the default plotly template, a map frame and physical features such as a coastal outline and filled land areas are shown, at a small-scale 1:110m resolution:\n\n*)\n\nopen Plotly.NET\n\nlet baseMapOnly = \n    Chart.PointGeo([]) // deliberately empty chart to show the base map only\n    |\u003E Chart.withMarginSize(0,0,0,0)\n\n(*** condition: ipynb ***)\n#if IPYNB\nbaseLayerOnly\n#endif // IPYNB\n\n(***hide***)\nbaseMapOnly |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\nTo control the features of the map, a \u0060Geo\u0060 object is used that can be associtaed with a given chart using the \u0060Chart.WithGeo\u0060 function.\nHere is a map with all physical features enabled and styled, at a larger-scale 1:50m resolution:\n*)\nopen Plotly.NET.LayoutObjects\n\nlet myGeo =\n    Geo.init(\n        Resolution=StyleParam.GeoResolution.R50,\n        ShowCoastLines=true, \n        CoastLineColor=Color.fromString \u0022RebeccaPurple\u0022,\n        ShowLand=true, \n        LandColor=Color.fromString \u0022LightGreen\u0022,\n        ShowOcean=true, \n        OceanColor=Color.fromString \u0022LightBlue\u0022,\n        ShowLakes=true, \n        LakeColor=Color.fromString \u0022Blue\u0022,\n        ShowRivers=true, \n        RiverColor=Color.fromString \u0022Blue\u0022\n    )\n\nlet moreFeaturesBaseMap =\n    Chart.PointGeo([])\n    |\u003E Chart.withGeo myGeo\n    |\u003E Chart.withMarginSize(0,0,0,0)\n\n(*** condition: ipynb ***)\n#if IPYNB\nmoreFeaturesBaseMap\n#endif // IPYNB\n\n(***hide***)\nmoreFeaturesBaseMap |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n## Cultural Base Maps\n\nIn addition to physical base map features, a \u0022cultural\u0022 base map is included which is composed of country borders and selected sub-country borders such as states.\n\n_Note and disclaimer: cultural features are by definition subject to change, debate and dispute. Plotly includes data from Natural Earth \u0022as-is\u0022 and defers to the Natural Earth policy regarding disputed borders which read:_\n\n\u003E Natural Earth Vector draws boundaries of countries according to defacto status. We show who actually controls the situation on the ground.\n\nHere is a map with only cultural features enabled and styled, at a 1:50m resolution, which includes only country boundaries. See below for country sub-unit cultural base map features:\n*)\n\nlet countryGeo =\n    Geo.init(\n        Visible=false, \n        Resolution=StyleParam.GeoResolution.R50,\n        ShowCountries=true, \n        CountryColor=Color.fromString \u0022RebeccaPurple\u0022\n    )\n\n\nlet countryBaseMap =\n    Chart.PointGeo([])\n    |\u003E Chart.withGeo countryGeo\n    |\u003E Chart.withMarginSize(0,0,0,0)\n\n(*** condition: ipynb ***)\n#if IPYNB\ncountryBaseMap\n#endif // IPYNB\n\n(***hide***)\ncountryBaseMap |\u003E GenericChart.toChartHTML\n(***include-it-raw***)"},{"uri":"https://plotly.net/05_1_geo-plots.html","title":"Scatter and line plots on Geo maps","content":"(**\n---\ntitle: Scatter and line plots on Geo maps\ncategory: Geo map charts\ncategoryindex: 6\nindex: 2\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 12.0.3\u0022\n#r \u0022nuget: DynamicObj\u0022\n#r \u0022../bin/Plotly.NET/netstandard2.0/Plotly.NET.dll\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# Scatter and line plots on Geo maps\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/Plotly.NET/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create Point and Line charts on geo maps in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n*)\nopen Plotly.NET \n\nlet cityNames = [\n    \u0022Montreal\u0022; \u0022Toronto\u0022; \u0022Vancouver\u0022; \u0022Calgary\u0022; \u0022Edmonton\u0022;\n    \u0022Ottawa\u0022; \u0022Halifax\u0022; \u0022Victoria\u0022; \u0022Winnepeg\u0022; \u0022Regina\u0022\n]\n\nlet lon = [\n    -73.57; -79.24; -123.06; -114.1; -113.28;\n    -75.43; -63.57; -123.21; -97.13; -104.6\n]\nlet lat = [\n    45.5; 43.4; 49.13; 51.1; 53.34; 45.24;\n    44.64; 48.25; 49.89; 50.45\n]\n\n(**\nThe simplest type of geo plot is plotting the (lon,lat) pairs of a location via \u0060Chart.PointGeo\u0060. \nHere is an example using the location of Canadian cities:\n*)\n\nopen Plotly.NET.LayoutObjects\n\nlet pointGeo =\n    Chart.PointGeo(\n        lon,\n        lat,\n        Labels=cityNames,\n        TextPosition=StyleParam.TextPosition.TopCenter\n    )\n    |\u003E Chart.withGeoStyle(\n        Scope=StyleParam.GeoScope.NorthAmerica, \n        Projection=GeoProjection.init(StyleParam.GeoProjectionType.AzimuthalEqualArea),\n        CountryColor = Color.fromString \u0022lightgrey\u0022\n    )\n    |\u003E Chart.withMarginSize(0,0,0,0)\n\n(*** condition: ipynb ***)\n#if IPYNB\npointGeo\n#endif // IPYNB\n\n(***hide***)\npointGeo |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n\n(**\nTo connect the given (lon,lat) pairs via straight lines, use \u0060Chart.LineGeo\u0060. \nBelow is an example that pulls external data as a Deedle data \nframe containing the source and target locations of American Airlines flights from Feb. 2011:\n*)\n\n#r \u0022nuget: Deedle\u0022\n#r \u0022nuget: FSharp.Data\u0022\nopen Deedle\nopen FSharp.Data\nopen System.IO\nopen System.Text\n\nlet data = \n    Http.RequestString \u0022https://raw.githubusercontent.com/plotly/datasets/c34aaa0b1b3cddad335173cb7bc0181897201ee6/2011_february_aa_flight_paths.csv\u0022\n    |\u003E fun csv -\u003E Frame.ReadCsvString(csv,true,separators=\u0022,\u0022)\n\nlet opacityVals : float [] = data.[\u0022cnt\u0022] |\u003E Series.values |\u003E fun s -\u003E s |\u003E Seq.map (fun v -\u003E v/(Seq.max s)) |\u003E Array.ofSeq\nlet startCoords = Series.zipInner data.[\u0022start_lon\u0022] data.[\u0022start_lat\u0022]\nlet endCoords = Series.zipInner data.[\u0022end_lon\u0022] data.[\u0022end_lat\u0022]\nlet coords = Series.zipInner startCoords endCoords |\u003E Series.values\n\nlet flights = \n    coords \n    |\u003E Seq.mapi (fun i (startCoords,endCoords) -\u003E\n        Chart.LineGeo(\n            [startCoords; endCoords],\n            Opacity = opacityVals.[i],\n            Color = Color.fromString \u0022red\u0022\n        )\n    )\n    |\u003E Chart.combine\n    |\u003E Chart.withLegend(false)\n    |\u003E Chart.withGeoStyle(\n        Scope=StyleParam.GeoScope.NorthAmerica, \n        Projection=GeoProjection.init(StyleParam.GeoProjectionType.AzimuthalEqualArea),\n        ShowLand=true,\n        LandColor = Color.fromString \u0022lightgrey\u0022\n    )\n    |\u003E Chart.withMarginSize(0,0,50,0)\n    |\u003E Chart.withTitle \u0022Feb. 2011 American Airline flights\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\nflights\n#endif // IPYNB\n\n(***hide***)\nflights |\u003E GenericChart.toChartHTML\n(***include-it-raw***)"},{"uri":"https://plotly.net/01_2_multiple-charts.html","title":"Multicharts and subplots","content":"(**\n---\ntitle: Multicharts and subplots\ncategory: Chart Layout\ncategoryindex: 2\nindex: 3\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 12.0.3\u0022\n#r \u0022nuget: DynamicObj\u0022\n#r \u0022../bin/Plotly.NET/netstandard2.0/Plotly.NET.dll\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(**\n# Multicharts and subplots\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/Plotly.NET/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create charts with multiple subplots in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n\n*)\n\nopen Plotly.NET \n  \nlet x = [1.; 2.; 3.; 4.; 5.; 6.; 7.; 8.; 9.; 10.; ]\nlet y = [2.; 1.5; 5.; 1.5; 3.; 2.5; 2.5; 1.5; 3.5; 1.]\n\n\n(**\n\n## Combining charts\n\n\u0060Chart.Combine\u0060 takes a sequence of charts, and attempts to combine their layouts to \nproduce a composite chart with one layout containing all traces of the input:\n\n*)\n\nlet combinedChart = \n    [\n        Chart.Line(x,y,Name=\u0022first\u0022)\n        Chart.Line(y,x,Name=\u0022second\u0022)\n    ]\n    |\u003E Chart.combine\n\n#if IPYNB\ncombinedChart\n#endif // end cell with chart value in a notebook context\n(***hide***)\ncombinedChart |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n\n## Chart subplot grids\n\n### Chart.Grid\n\n\u0060Chart.Grid\u0060 creates a subplot grid. There are two overloads:\n\nYou can either use Chart.Grid with a 1 dimensional sequence of Charts and specify the amount of rows and columns:\n\n*)\n\n//simple 2x2 subplot grid\nlet grid = \n    [\n        Chart.Point(x,y,Name=\u00221,1\u0022)\n        |\u003E Chart.withXAxisStyle \u0022x1\u0022\n        |\u003E Chart.withYAxisStyle \u0022y1\u0022    \n        Chart.Line(x,y,Name=\u00221,2\u0022)\n        |\u003E Chart.withXAxisStyle \u0022x2\u0022\n        |\u003E Chart.withYAxisStyle \u0022y2\u0022\n        Chart.Spline(x,y,Name=\u00222,1\u0022)\n        |\u003E Chart.withXAxisStyle \u0022x3\u0022\n        |\u003E Chart.withYAxisStyle \u0022y3\u0022    \n        Chart.Point(x,y,Name=\u00222,2\u0022)\n        |\u003E Chart.withXAxisStyle \u0022x4\u0022\n        |\u003E Chart.withYAxisStyle \u0022y4\u0022\n    ]\n    |\u003E Chart.Grid(2,2)\n\n(*** condition: ipynb ***)\n#if IPYNB\ngrid\n#endif // IPYNB\n\n(***hide***)\ngrid |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\nor provide a 2-dimensional Chart sequence as input, the dimensions of the input will then be used to set the dimensions of the grid:\n*)\n\n//simple 2x2 subplot grid using a 2x2 2D chart sequence as input\nlet grid2 = \n    [\n        [\n            Chart.Point(x,y,Name=\u00221,1\u0022)\n            |\u003E Chart.withXAxisStyle \u0022x1\u0022\n            |\u003E Chart.withYAxisStyle \u0022y1\u0022    \n            Chart.Line(x,y,Name=\u00221,2\u0022)\n            |\u003E Chart.withXAxisStyle \u0022x2\u0022\n            |\u003E Chart.withYAxisStyle \u0022y2\u0022\n        ]\n        [\n            Chart.Spline(x,y,Name=\u00222,1\u0022)\n            |\u003E Chart.withXAxisStyle \u0022x3\u0022\n            |\u003E Chart.withYAxisStyle \u0022y3\u0022    \n            Chart.Point(x,y,Name=\u00222,2\u0022)\n            |\u003E Chart.withXAxisStyle \u0022x4\u0022\n            |\u003E Chart.withYAxisStyle \u0022y4\u0022\n        \n        ]\n    ]\n    |\u003E Chart.Grid()\n\n(*** condition: ipynb ***)\n#if IPYNB\ngrid2\n#endif // IPYNB\n\n(***hide***)\ngrid2 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\nTo leave cells of the grid empty, you have to fill it with dummy charts via \u0060Chart.Invisible()\u0060.\nPleas enote that when using a 2D sequence with unequal amounts of charts in the rows, the column amount will be set\nto the row with the highest amount of charts, and the other rows will be filled by invisible charts to the right.\n*)\n\n//simple 2x2 subplot grid with an empty cell at position 1,2\nlet grid3 = \n    [\n        Chart.Point(x,y,Name=\u00221,1\u0022)\n        |\u003E Chart.withXAxisStyle \u0022x1\u0022\n        |\u003E Chart.withYAxisStyle \u0022y1\u0022    \n\n        Chart.Invisible()\n\n        Chart.Spline(x,y,Name=\u00222,1\u0022)\n        |\u003E Chart.withXAxisStyle \u0022x3\u0022\n        |\u003E Chart.withYAxisStyle \u0022y3\u0022    \n\n        Chart.Point(x,y,Name=\u00222,2\u0022)\n        |\u003E Chart.withXAxisStyle \u0022x4\u0022\n        |\u003E Chart.withYAxisStyle \u0022y4\u0022\n    ]\n    |\u003E Chart.Grid(2,2)\n\n(*** condition: ipynb ***)\n#if IPYNB\ngrid3\n#endif // IPYNB\n\n(***hide***)\ngrid3 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\nuse \u0060Pattern=StyleParam.LayoutGridPatter.Coupled\u0060 to use one shared x axis per column and one shared y axis per row. \n(Try zooming in the single subplots below)\n*)\n\nlet grid4 =\n    [\n        Chart.Point(x,y,Name=\u00221,1\u0022)\n        |\u003E Chart.withXAxisStyle \u0022x1\u0022\n        |\u003E Chart.withYAxisStyle \u0022y1\u0022    \n        Chart.Line(x,y,Name=\u00221,2\u0022)\n        |\u003E Chart.withXAxisStyle \u0022x2\u0022\n        |\u003E Chart.withYAxisStyle \u0022y2\u0022\n        Chart.Spline(x,y,Name=\u00222,1\u0022)\n        |\u003E Chart.withXAxisStyle \u0022x3\u0022\n        |\u003E Chart.withYAxisStyle \u0022y3\u0022    \n        Chart.Point(x,y,Name=\u00222,2\u0022)\n        |\u003E Chart.withXAxisStyle \u0022x4\u0022\n        |\u003E Chart.withYAxisStyle \u0022y4\u0022\n    ]\n    |\u003E Chart.Grid(2,2,Pattern=StyleParam.LayoutGridPattern.Coupled)\n\n(*** condition: ipynb ***)\n#if IPYNB\ngrid4\n#endif // IPYNB\n\n(***hide***)\ngrid4 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(** \n### Chart.SingleStack\n\nThe \u0060Chart.SingleStack\u0060 function is a special version of Chart.Grid that creates only one column from a 1D input chart sequence.\nIt uses a shared x axis per default.\n\nAs with all grid charts, you can also use the Chart.withLayoutGridStyle to style subplot grids:\n\n*)\n\nlet singleStack =\n    [\n        Chart.Point(x,y) \n        |\u003E Chart.withYAxisStyle(\u0022This title must\u0022)\n\n        Chart.Line(x,y) \n        |\u003E Chart.withYAxisStyle(\u0022be set on the\u0022)\n        \n        Chart.Spline(x,y) \n        |\u003E Chart.withYAxisStyle(\u0022respective subplots\u0022)\n    ]\n    |\u003E Chart.SingleStack(Pattern= StyleParam.LayoutGridPattern.Coupled)\n    //increase spacing between plots by using the withLayoutGridStyle function\n    |\u003E Chart.withLayoutGridStyle(YGap= 0.1)\n    |\u003E Chart.withTitle(\u0022Hi i am the new SingleStackChart\u0022)\n    |\u003E Chart.withXAxisStyle(\u0022im the shared xAxis\u0022)\n\n(*** condition: ipynb ***)\n#if IPYNB\nsingleStack\n#endif // IPYNB\n\n(***hide***)\nsingleStack |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n### Using subplots of different trace types in a grid\n\nChart.Grid does some internal magic to make sure that all trace types get their grid cell according to plotly.js\u0027s inner logic. \n\nThe only thing you have to consider is, that when you are using nested combined charts, that these have to have the same trace type.\n\nOtherwise, you can freely combine all charts with Chart.Grid:\n\n*)\nopen Plotly.NET.LayoutObjects\n\nlet multipleTraceTypesGrid =\n    [\n        Chart.Point([1,2; 2,3])\n        Chart.PointTernary([1,2,3; 2,3,4])\n        Chart.Heatmap([[1; 2];[3; 4]], Showscale=false)\n        Chart.Point3d([1,3,2])\n        Chart.PointMapbox([1,2]) |\u003E Chart.withMapbox(Mapbox.init(Style = StyleParam.MapboxStyle.OpenStreetMap))\n        [\n            // you can use nested combined charts, but they have to have the same trace type (Cartesian2D in this case)\n            let y =  [2.; 1.5; 5.; 1.5; 2.; 2.5; 2.1; 2.5; 1.5; 1.;2.; 1.5; 5.; 1.5; 3.; 2.5; 2.5; 1.5; 3.5; 1.]\n            Chart.BoxPlot(\u0022y\u0022 ,y,Name=\u0022bin1\u0022,Jitter=0.1,BoxPoints=StyleParam.BoxPoints.All);\n            Chart.BoxPlot(\u0022y\u0027\u0022,y,Name=\u0022bin2\u0022,Jitter=0.1,BoxPoints=StyleParam.BoxPoints.All);\n        ]\n        |\u003E Chart.combine\n    ]\n    |\u003E Chart.Grid(2,3)\n    |\u003E Chart.withSize(1000,1000)\n\n(*** condition: ipynb ***)\n#if IPYNB\nmultipleTraceTypesGrid\n#endif // IPYNB\n\n(***hide***)\nmultipleTraceTypesGrid |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n    \n(**\nIf you are not sure if traceTypes are compatible, look at the \u0060TraceIDs\u0060:\n*)\n\nlet pointType = Chart.Point([1,2]) |\u003E GenericChart.getTraceID\n(***include-it***)\n\n[\n     Chart.Point([1,2])\n     Chart.PointTernary([1,2,3])\n]\n|\u003E Chart.combine\n|\u003E GenericChart.getTraceID\n(***include-it***)\n\n[\n     Chart.Point([1,2])\n     Chart.PointTernary([1,2,3])\n]\n|\u003E Chart.combine\n|\u003E GenericChart.getTraceIDs\n(***include-it***)"},{"uri":"https://plotly.net/03_3_3d-cone-charts.html","title":"3D Cone plots","content":"(**\n---\ntitle: 3D Cone plots\ncategory: 3D Charts\ncategoryindex: 4\nindex: 4\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 12.0.3\u0022\n#r \u0022nuget: DynamicObj\u0022\n#r \u0022../bin/Plotly.NET/netstandard2.0/Plotly.NET.dll\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# 3D Cone plots\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/Plotly.NET/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create 3D-Cone charts in F#.\n\n*)\n\nopen System\nopen Plotly.NET \n\n\nlet cone =\n    Chart.Cone(\n        x = [1; 1; 1],\n        y = [1; 2; 3],\n        z = [1; 1; 1],\n        u = [1; 2; 3],\n        v = [1; 1; 2],\n        w = [4; 4; 1]\n    )\n\n(*** condition: ipynb ***)\n#if IPYNB\ncone\n#endif // IPYNB\n\n(***hide***)\ncone |\u003E GenericChart.toChartHTML\n(*** include-it-raw ***)"},{"uri":"https://plotly.net/08_0_polar_line-scatter-plots.html","title":"Polar line and scatter plots","content":"(**\n---\ntitle: Polar line and scatter plots\ncategory: Polar Charts\ncategoryindex: 8\nindex: 1\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 12.0.3\u0022\n#r \u0022nuget: DynamicObj\u0022\n#r \u0022../bin/Plotly.NET/netstandard2.0/Plotly.NET.dll\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# Polar charts\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/Plotly.NET/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create polar charts in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n\n*)\n\nopen Plotly.NET \n  \n// radial coordinates\nlet radial  = [ 1; 2; 3; 4; 5; 6; 7;]\n\n// angular coordinates\nlet theta  = [0; 45; 90; 135; 200; 320; 184;]\n\n(**\nA polar chart is a graphical method of displaying multivariate data in the form of a two-dimensional chart \nof three or more quantitative variables represented on axes starting from the same point.\n\nThe relative position and angle of the axes is typically uninformative.\n\nIn Polar Charts, a series is represented by a closed curve that connects points in the polar coordinate system. \nEach data point is determined by the distance from the pole (the radial coordinate) and the angle from the fixed direction (the angular coordinate).\n\n## Polar point charts\n\nuse \u0060Chart.PointPolar\u0060 to create a polar plot that displays points on a polar coordinate system:\n*)\n\nlet pointPolar = Chart.PointPolar(radial,theta)\n(*** condition: ipynb ***)\n#if IPYNB\npointPolar\n#endif // IPYNB\n\n(***hide***)\npointPolar |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n## Polar line charts\n\nuse \u0060Chart.LinePolar\u0060 to create a polar plot that displays a line connecting input the data on a polar coordinate system.\n\nYou can for example change the line style using \u0060Chart.withLineStyle\u0060\n*)\n\nlet linePolar = \n    Chart.LinePolar(radial,theta)\n    |\u003E Chart.withLineStyle(Color=Color.fromString \u0022purple\u0022,Dash=StyleParam.DrawingStyle.DashDot)\n\n(*** condition: ipynb ***)\n#if IPYNB\nlinePolar\n#endif // IPYNB\n\n(***hide***)\nlinePolar |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n## Polar Spline charts\n\nuse \u0060Chart.SpinePolar\u0060 to create a polar plot that displays a smoothed line connecting input the data on a polar coordinate system.\n\nAs for all other plots above, You can for example add labels to each datum:\n*)\n\nlet splinePolar = \n    Chart.SplinePolar(\n        radial,\n        theta,\n        Labels=[\u0022one\u0022;\u0022two\u0022;\u0022three\u0022;\u0022four\u0022;\u0022five\u0022;\u0022six\u0022;\u0022seven\u0022],\n        TextPosition=StyleParam.TextPosition.TopCenter,\n        ShowMarkers=true\n    )\n\n(*** condition: ipynb ***)\n#if IPYNB\nsplinePolar\n#endif // IPYNB\n\n(***hide***)\nsplinePolar |\u003E GenericChart.toChartHTML\n(***include-it-raw***)"},{"uri":"https://plotly.net/01_5_layout_images.html","title":"Layout images","content":"(**\n---\ntitle: Layout images\ncategory: Chart Layout\ncategoryindex: 2\nindex: 6\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 12.0.3\u0022\n#r \u0022nuget: DynamicObj\u0022\n#r \u0022../bin/Plotly.NET/netstandard2.0/Plotly.NET.dll\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# Annotations\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/Plotly.NET/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n\n*Summary:* This example shows how to create Images and add them to the Charts in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n\n*)\n\nopen Plotly.NET \n  \nlet x  = [1.; 2.; 3.; 4.; 5.; 6.; 7.; 8.; 9.; 10.; ]\nlet y\u0027 = [2.; 1.5; 5.; 1.5; 3.; 2.5; 2.5; 1.5; 3.5; 1.]\n\n(**\nuse the \u0060LayoutImage.init\u0060 function to generate an image, and either the \u0060Chart.withLayoutImage\u0060 or the \u0060Chart.withLayoutImages\u0060 function to add\nmultiple annotations at once.\n\n*)\n\nopen Plotly.NET.LayoutObjects\n\nlet image = \n    LayoutImage.init(\n        Source=\u0022https://fsharp.org/img/logo/fsharp.svg\u0022,\n        XRef=\u0022x\u0022,\n        YRef=\u0022y\u0022,\n        X=0,\n        Y=3,\n        SizeX=2,\n        SizeY=2,\n        Sizing=StyleParam.LayoutImageSizing.Stretch,\n        Opacity=0.5,\n        Layer=StyleParam.Layer.Below\n    )\n\nlet imageChart =\n    Chart.Line(x,y\u0027,Name=\u0022line\u0022)    \n    |\u003E Chart.withLayoutImage(image)\n\n(*** condition: ipynb ***)\n#if IPYNB\nimageChart\n#endif // IPYNB\n\n(***hide***)\nimageChart |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n"},{"uri":"https://plotly.net/09_1_parallel-coords.html","title":"Parallel coordinates","content":"(**\n---\ntitle: Parallel coordinates\ncategory: Categorical Charts\ncategoryindex: 10\nindex: 2\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 12.0.3\u0022\n#r \u0022nuget: DynamicObj\u0022\n#r \u0022../bin/Plotly.NET/netstandard2.0/Plotly.NET.dll\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n\n(** \n# Parallel coordinates\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/Plotly.NET/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create parallel coordinates plot in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n\n*)\n\nopen Plotly.NET \n\nlet data = \n    [\n        \u0022A\u0022,[1.;4.;3.4;0.7;]\n        \u0022B\u0022,[3.;1.5;1.7;2.3;]\n        \u0022C\u0022,[2.;4.;3.1;5.]\n        \u0022D\u0022,[4.;2.;2.;4.;]\n    ]\n\n(**\n\nParallel coordinates are a common way of visualizing high-dimensional geometry and analyzing multivariate data.\nTo show a set of points in an n-dimensional space, a backdrop is drawn consisting of n parallel lines, typically \nvertical and equally spaced. A point in n-dimensional space is represented as a polyline with vertices on the parallel axes; \nthe position of the vertex on the i-th axis corresponds to the i-th coordinate of the point.\n*)\n\nlet parcoords1 =\n    Chart.ParallelCoord(data,Color=Color.fromString \u0022blue\u0022)\n\n(*** condition: ipynb ***)\n#if IPYNB\nparcoords1\n#endif // IPYNB\n\n(***hide***)\nparcoords1 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\nopen Plotly.NET.TraceObjects\n\n// Dynamic object version\nlet parcoords = \n    let v = [|\n        Dimensions.init([|1.;4.;|],  \n            StyleParam.Range.MinMax (1.,5.),StyleParam.Range.MinMax (1.,2.),Label=\u0022A\u0022);\n        Dimensions.init([|3.;1.5;|], \n            StyleParam.Range.MinMax (1.,5.),Label=\u0022B\u0022,Tickvals=[|1.5;3.;4.;5.;|]);\n        Dimensions.init([|2.;4.;|],  \n            StyleParam.Range.MinMax (1.,5.),Label=\u0022C\u0022,Tickvals=[|1.;2.;4.;5.;|],\n                TickText=[|\u0022txt 1\u0022;\u0022txt 2\u0022;\u0022txt 4\u0022;\u0022txt 5\u0022;|]);\n        Dimensions.init([|4.;2.;|],  \n            StyleParam.Range.MinMax (1.,5.),Label=\u0022D\u0022);\n    |]\n\n    let dyn = Trace(\u0022parcoords\u0022)\n\n    dyn?dimensions \u003C- v\n    dyn?line \u003C- Line.init(Color=Color.fromString \u0022blue\u0022)\n\n    dyn\n    |\u003E GenericChart.ofTraceObject true\n\n(*** condition: ipynb ***)\n#if IPYNB\nparcoords\n#endif // IPYNB\n\n(***hide***)\nparcoords |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n"},{"uri":"https://plotly.net/11_1_carpet_line_scatter_plots.html","title":"Carpet line and scatter plots","content":"(**\n---\ntitle: Carpet line and scatter plots\ncategory: Carpet Plots\ncategoryindex: 12\nindex: 1\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 12.0.3\u0022\n#r \u0022nuget: DynamicObj\u0022\n#r \u0022../bin/Plotly.NET/netstandard2.0/Plotly.NET.dll\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# Carpet charts\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/Plotly.NET/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create carpet charts in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n\n*)\n\nopen Plotly.NET \n  \n//carpet coordinate data\nlet a = [4.; 4.; 4.; 4.5; 4.5; 4.5; 5.; 5.; 5.; 6.; 6.; 6.]\nlet b = [1.; 2.; 3.; 1.; 2.; 3.; 1.; 2.; 3.; 1.; 2.; 3.]\nlet y = [2.; 3.5; 4.; 3.; 4.5; 5.; 5.5; 6.5; 7.5; 8.; 8.5; 10.]\n\n//carpet plot data\nlet aData = [4.; 5.; 5.; 6.]\nlet bData = [1.; 1.; 2.; 3.]\nlet sizes = [5; 10; 15; 20]\n\n(**\nA carpet plot is any of a few different specific types of plot. The more common plot referred to as a carpet plot is one that illustrates the interaction between two or more independent variables and one or more dependent variables in a two-dimensional plot. \n\nBesides the ability to incorporate more variables, another feature that distinguishes a carpet plot from an equivalent contour plot or 3D surface plot is that a carpet plot can be used to more accurately interpolate data points. \n\nA conventional carpet plot can capture the interaction of up to three independent variables and three dependent variables and still be easily read and interpolated.\n\nCarpet plots have common applications within areas such as material science for showing elastic modulus in laminates,and within aeronautics.\n\nA carpet plot with two independent variables and one dependent variable is often called a cheater plot for the use of a phantom \u0022cheater\u0022 axis instead of the horizontal axis. \n\n(https://en.wikipedia.org/wiki/Carpet_plot)\n\n## Carpet Traces\n\nIn plotly, carpet plots are different to all other trace types in the regard that the coordinate system of the carpet is not set on the layout, but is itself a trace.\n\nUse \u0060Chart.Carpet\u0060 to define these \u0060coordinate traces\u0060. All carpets have a mandatory identifier, which will be used by other traces to define which carpet coordinate system to use.\n*)\n\nlet carpet = Chart.Carpet(\u0022carpetIdentifier\u0022, A = a, B = b, Y = y)\n\n(*** condition: ipynb ***)\n#if IPYNB\ncarpet\n#endif // IPYNB\n\n(***hide***)\ncarpet |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n## Carpet point charts\n\nuse \u0060Chart.PointCarpet\u0060 to create a point plot on the referenced carpet coordinate system:\n*)\nlet carpetPoint = \n    [\n        carpet\n        Chart.PointCarpet(aData,bData,\u0022carpetIdentifier\u0022, Name = \u0022Point\u0022)\n    ]\n    |\u003E Chart.combine\n\n(*** condition: ipynb ***)\n#if IPYNB\ncarpetPoint\n#endif // IPYNB\n\n(***hide***)\ncarpetPoint |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n## Carpet line charts\n\nuse \u0060Chart.LineCarpet\u0060 to create a line plot on the referenced carpet coordinate system:\n*)\n\nlet carpetLine = \n    [\n        carpet\n        Chart.LineCarpet(aData,bData,\u0022carpetIdentifier\u0022,Name = \u0022Line\u0022)\n    ]\n    |\u003E Chart.combine\n\n(*** condition: ipynb ***)\n#if IPYNB\ncarpetLine\n#endif // IPYNB\n\n(***hide***)\ncarpetLine |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n## Carpet Spline charts\n\nuse \u0060Chart.LineCarpet\u0060 to create a spline plot on the referenced carpet coordinate system:\n*)\n\nlet carpetSpline = \n    [\n        carpet\n        Chart.SplineCarpet(aData,bData,\u0022carpetIdentifier\u0022,Name = \u0022Spline\u0022)\n    ]\n    |\u003E Chart.combine\n\n(*** condition: ipynb ***)\n#if IPYNB\ncarpetSpline\n#endif // IPYNB\n\n(***hide***)\ncarpetSpline |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n## Carpet bubble charts\n\nuse \u0060Chart.LineCarpet\u0060 to create a bubble plot on the referenced carpet coordinate system:\n*)\n\nlet carpetBubble = \n    [\n        carpet\n        Chart.BubbleCarpet((Seq.zip3 aData bData sizes),\u0022carpetIdentifier\u0022,Name = \u0022Bubble\u0022)\n    ]\n    |\u003E Chart.combine\n\n(*** condition: ipynb ***)\n#if IPYNB\ncarpetBubble\n#endif // IPYNB\n\n(***hide***)\ncarpetBubble |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n\n\n"},{"uri":"https://plotly.net/04_0_histograms.html","title":"Histograms","content":"(**\n---\ntitle: Histograms\ncategory: Distribution Charts\ncategoryindex: 5\nindex: 1\n---\n*)\n\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 12.0.3\u0022\n#r \u0022nuget: DynamicObj\u0022\n#r \u0022../bin/Plotly.NET/netstandard2.0/Plotly.NET.dll\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# Histograms\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/Plotly.NET/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create a one-dimensional histogram of a data samples in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n\n*)\n\n\nopen Plotly.NET \n\nlet rnd = System.Random()\nlet x = [for i=0 to 500 do yield rnd.NextDouble() ]\n\n(**\nA histogram consisting of rectangles whose area is proportional to the frequency of a variable and whose width is equal to the class interval.\nThe histogram chart represents the distribution of numerical data and can be created using the \u0060Chart.Histogram\u0060 function:.\n*)\n\nlet histo1 =\n    x\n    |\u003E Chart.Histogram\n    |\u003E Chart.withSize(500.,500.)\n\n(*** condition: ipynb ***)\n#if IPYNB\nhisto1\n#endif // IPYNB\n\n(***hide***)\nhisto1 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n"},{"uri":"https://plotly.net/00_4_templates.html","title":"Chart Templates","content":"(**\n---\ntitle: Chart Templates\ncategory: General\ncategoryindex: 1\nindex: 5\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 12.0.3\u0022\n#r \u0022nuget: DynamicObj\u0022\n#r \u0022../bin/Plotly.NET/netstandard2.0/Plotly.NET.dll\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# Chart Templates\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/Plotly.NET/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n## Using premade templates\n\npremade templates can be accessed via the \u0060ChartTemplates\u0060 module. In fact, the \u0060ChartTemplates.plotly\u0060 template is always active by default (see [global defaults](./005_defaults.html))\n*)\nopen Plotly.NET\n\nlet lightMirrored = \n    Chart.Point([1,2])\n    |\u003E Chart.withTemplate ChartTemplates.lightMirrored\n\n(*** condition: ipynb ***)\n#if IPYNB\nlightMirrored\n#endif // IPYNB\n\n(***hide***)\nlightMirrored |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n\nhere are then contents of the template \u0060plotly\u0060 which is used by default for all charts:\n\n*)\n\nopen DynamicObj\n\n(***include-output***)\nChartTemplates.plotly\n|\u003E DynObj.print\n\n(**\n\n## Creating custom templates\n\nChart Templates consist of a \u0060Layout\u0060 object and a collection of \u0060Trace\u0060 objects. Both are used to set default values for all possible styling options:\n*)\n\nopen Plotly.NET.TraceObjects\n\nlet layoutTemplate = \n    Layout.init(\n        Title = Title.init(\u0022I will always be there now!\u0022)\n    )\n\nlet traceTemplates = \n    [\n        Trace2D.initScatter(\n            Trace2DStyle.Scatter(\n                Marker = Marker.init(Symbol = StyleParam.MarkerSymbol.ArrowLeft, Size = 20)\n            )\n        )\n    ]\n\nlet myTemplate = Template.init(layoutTemplate, traceTemplates)\n\nlet myTemplateExampleChart =\n    Chart.Point([1,2])\n    |\u003E Chart.withTemplate myTemplate\n\n(*** condition: ipynb ***)\n#if IPYNB\nmyTemplateExampleChart\n#endif // IPYNB\n\n(***hide***)\nmyTemplateExampleChart |\u003E GenericChart.toChartHTML\n(***include-it-raw***)"},{"uri":"https://plotly.net/06_3_density-mapbox.html","title":"DensityMapbox charts","content":"(**\n---\ntitle: DensityMapbox charts\ncategory: Mapbox map charts\ncategoryindex: 7\nindex: 4\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 12.0.3\u0022\n#r \u0022nuget: DynamicObj\u0022\n#r \u0022../bin/Plotly.NET/netstandard2.0/Plotly.NET.dll\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# DensityMapbox charts\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/Plotly.NET/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create DensityMapbox charts in F#.\n\n\u0060Chart.DensityMapbox\u0060 draws a bivariate kernel density estimation with a Gaussian kernel from \u0060lon\u0060 and \u0060lat\u0060 coordinates and optional \u0060z\u0060 values using a colorscale.\nThis Chart uses [Mapbox layers]({{root}}/6_0_geo-vs-mapbox.html) and might need a Mapbox API token depending on the desired base map layer style.\n\n*)\n// we are using the awesome FSharp.Data project here to perform a http request,\n// and the awesome Deedle library to read the data as a data frame\n#r \u0022nuget: FSharp.Data\u0022\n#r \u0022nuget: Deedle\u0022\n\nopen FSharp.Data\nopen Deedle\n\nlet dataDensityMapbox = \n    Http.RequestString \u0022https://raw.githubusercontent.com/plotly/datasets/master/earthquakes-23k.csv\u0022\n    |\u003E fun d -\u003E Frame.ReadCsvString(d,true,separators=\u0022,\u0022)\n\nlet lon = dataDensityMapbox.[\u0022Longitude\u0022] |\u003E Series.values\nlet lat= dataDensityMapbox.[\u0022Latitude\u0022] |\u003E Series.values\nlet magnitudes = dataDensityMapbox.[\u0022Magnitude\u0022] |\u003E Series.values\n\nopen Plotly.NET\nopen Plotly.NET.LayoutObjects\n\nlet densityMapbox = \n    Chart.DensityMapbox(\n        lon,\n        lat,\n        Z = magnitudes,\n        Radius=8.,\n        Colorscale=StyleParam.Colorscale.Viridis\n    )\n    |\u003E Chart.withMapbox(\n        Mapbox.init(\n            Style = StyleParam.MapboxStyle.StamenTerrain,\n            Center = (60.,30.)\n        )\n    )\n\n(*** condition: ipynb ***)\n#if IPYNB\ndensityMapbox\n#endif // IPYNB\n\n(***hide***)\ndensityMapbox |\u003E GenericChart.toChartHTML\n(***include-it-raw***)"},{"uri":"https://plotly.net/00_5_defaults.html","title":"Global default values","content":"(**\n---\ntitle: Global default values\ncategory: General\ncategoryindex: 1\nindex: 6\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 12.0.3\u0022\n#r \u0022nuget: DynamicObj\u0022\n#r \u0022../bin/Plotly.NET/netstandard2.0/Plotly.NET.dll\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# Global default values\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/Plotly.NET/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\nPlotly.NET provides mutable global default values in the \u0060Defaults\u0060 module.\n\nThese values are always used in Chart generation. The default values are:\n\n|Value name|Value|\n|---|---|\n| DefaultWidth | \u0060600\u0060 |\n| DefaultHeight | \u0060600\u0060 |\n| DefaultConfig | \u0060Config.init(Responsive = true)\u0060 |\n| DefaultDisplayOptions | \u0060DisplayOptions.init()\u0060 |\n| DefaultTemplate | \u0060ChartTemplates.plotly\u0060 |\n\n## Changing default values\n\nThe following code replaces the default template from the global defaults:\n*)\nopen Plotly.NET\n\nlet before = Chart.Point([1,2])\n\n(*** condition: ipynb ***)\n#if IPYNB\nbefore\n#endif // IPYNB\n\n(***hide***)\nbefore |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\nDefaults.DefaultTemplate \u003C- ChartTemplates.lightMirrored\n\nlet after = Chart.Point([1,2])\n\n(*** condition: ipynb ***)\n#if IPYNB\nafter\n#endif // IPYNB\n\n(***hide***)\nafter |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n\n(**\n## Ignoring global defaults\n\nAll Chart functions have a \u0060UseDefaults\u0060 argument, which when set to \u0060false\u0060 will ignore all global defaults:\n*)\n\n\nlet noDefaults = Chart.Point([1,2], UseDefaults = false)\n\n(*** condition: ipynb ***)\n#if IPYNB\nnoDefaults\n#endif // IPYNB\n\n(***hide***)\nnoDefaults |\u003E GenericChart.toChartHTML\n(***include-it-raw***)"},{"uri":"https://plotly.net/04_3_contour-plots.html","title":"Contour plots","content":"(**\n---\ntitle: Contour plots\ncategory: Distribution Charts\ncategoryindex: 5\nindex: 4\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 12.0.3\u0022\n#r \u0022nuget: DynamicObj\u0022\n#r \u0022../bin/Plotly.NET/netstandard2.0/Plotly.NET.dll\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# Contour plots\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/Plotly.NET/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create contour plot in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n\n*)\n\nopen System\nopen Plotly.NET \n\n// Generate linearly spaced vector\nlet linspace (min,max,n) = \n    if n \u003C= 2 then failwithf \u0022n needs to be larger then 2\u0022\n    let bw = float (max - min) / (float n - 1.)\n    [|min ..bw ..max|]\n\n// Create example data\nlet size = 100\nlet x = linspace(-2. * Math.PI, 2. * Math.PI, size)\nlet y = linspace(-2. * Math.PI, 2. * Math.PI, size)\n\nlet f x y = - (5. * x / (x**2. \u002B y**2. \u002B 1.) )\n\nlet z = \n    Array.init size (fun i -\u003E \n        Array.init size (fun j -\u003E \n            f x.[j] y.[i] \n        )\n    )\n\n(**\nA contour plot is a graphical technique for representing a 3-dimensional surface by plotting\nconstant z slices, called contours, on a 2-dimensional format. That is, given a value for z,\nlines are drawn for connecting the (x,y) coordinates where that z value occurs.\nThe contour plot is an alternative to a 3-D surface plot.\n\nThe contour plot is an alternative to a 3-D surface plot.\n\n*)\n\nlet contour1 =\n    z\n    |\u003E Chart.Contour\n    |\u003E Chart.withSize(600.,600.)\n\n(*** condition: ipynb ***)\n#if IPYNB\ncontour1\n#endif // IPYNB\n\n(***hide***)\ncontour1 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)"},{"uri":"https://plotly.net/02_8_Images.html","title":"Images","content":"(**\n---\ntitle: Images\ncategory: Simple Charts\ncategoryindex: 3\nindex: 9\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 12.0.3\u0022\n#r \u0022nuget: DynamicObj\u0022\n#r \u0022../bin/Plotly.NET/netstandard2.0/Plotly.NET.dll\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# Images\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/Plotly.NET/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create image charts in F#.\n\nThere are multiple ways of generating image charts:\n - From 3 Dimensional color collections, where the inner arrays contain 3 (color dimensions without alpha channel) or 4 (color dimensions and alpha channel) values. The color model can be set separately as shown below.\n - From a 2 dimensional collection Plotly.NETs \u0060ARGB\u0060 type that represents rgba values\n - From a base64 encoded image data source\n\n## Creating Image charts from raw color arrays\n*)\n\n// 3d collection containing color values\nopen Plotly.NET \n\nlet colors = [\n    [[0  ;0  ;255]; [255;255;0  ]; [0  ;0  ;255]]\n    [[255;0  ;0  ]; [255;0  ;255]; [255;0  ;255]]\n    [[0  ;255;0  ]; [0  ;255;255]; [255;0  ;0  ]]\n]\n\nlet imageRaw = \n    Chart.Image(Z=colors)\n    |\u003E Chart.withTitle \u0022Image chart from raw color component arrays\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\nimageRaw\n#endif // IPYNB\n\n(***hide***)\nimageRaw |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\nTo change the color model to HSL for example, add the \u0060ColorModel\u0060 argument:\n*)\n\nlet imageRawHSL = \n    Chart.Image(Z=colors, ColorModel=StyleParam.ColorModel.HSL)\n    |\u003E Chart.withTitle \u0022HSL color model\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\nimageRawHSL\n#endif // IPYNB\n\n(***hide***)\nimageRawHSL |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n## Creating Image charts from ARGB arrays\n\nNote that this way of creating image charts uses the RGBA color model.\n*)\n\nlet argbs = [\n    [ColorKeyword.AliceBlue     ; ColorKeyword.CornSilk ; ColorKeyword.LavenderBlush ] |\u003E List.map ARGB.fromKeyword\n    [ColorKeyword.DarkGray      ; ColorKeyword.Snow     ; ColorKeyword.MidnightBlue  ] |\u003E List.map ARGB.fromKeyword\n    [ColorKeyword.LightSteelBlue; ColorKeyword.DarkKhaki; ColorKeyword.LightAkyBlue  ] |\u003E List.map ARGB.fromKeyword\n]\n\nlet imageARGB = \n    Chart.Image(argbs)\n    |\u003E Chart.withTitle \u0022ARGB image chart\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\nimageARGB\n#endif // IPYNB\n\n(***hide***)\nimageARGB |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n## Creating Image charts from base64 encoded images\n*)\nopen System\nopen System.IO\n\nlet imageSource = $@\u0022{__SOURCE_DIRECTORY__}/img/logo.png\u0022\n\nlet base64String = \n    imageSource\n    |\u003E File.ReadAllBytes\n    |\u003E System.Convert.ToBase64String\n\nlet logoImage = \n    Chart.Image(\n        Source=($\u0022data:image/jpg;base64,{base64String}\u0022)\n    )\n    |\u003E Chart.withTitle \u0022This is Plotly.NET:\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\nlogoImage\n#endif // IPYNB\n\n(***hide***)\nlogoImage |\u003E GenericChart.toChartHTML\n(***include-it-raw***)"},{"uri":"https://plotly.net/00_1_image-export.html","title":"Static image export","content":"(**\n---\ntitle: Static image export\ncategory: General\ncategoryindex: 1\nindex: 2\n---\n*)\n\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 12.0.3\u0022\n#r \u0022nuget: DynamicObj\u0022\n#r \u0022nuget: PuppeteerSharp\u0022\n#r \u0022../bin/Plotly.NET/netstandard2.0/Plotly.NET.dll\u0022\n#r \u0022../bin/Plotly.NET.ImageExport/netstandard2.0/Plotly.NET.ImageExport.dll\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.ImageExport, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n\n(**\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/Plotly.NET/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n# Static image export\n\n### Table of contents\n\n- [Saving static images](#Saving-static-images)\n- [Generating URIs for static chart images](#Generating-URIs-for-static-chart-images)\n- [Including static images in dotnet interactive notebooks](#Including-static-images-in-dotnet-interactive-notebooks)\n\nAs Plotly.NET generates static html pages that contain charts rendered by plotly.js, static image export needs a lot more overhead under the hood \nthan you might expect. The underlying renderer needs to execute javascript, leading to the usage of headless browsers.\n\nThe package \u0060Plotly.NET.ImageExport\u0060 contains extensions for Plotly.NET to render static images. It is designed with extensibility in mind and\nit is very easy to add a new rendering engine. The current engines are provided:\n\n| Rendering engine | Type | Prerequisites |\n|-|-|-|\n| [PuppeteerSharp](https://github.com/hardkoded/puppeteer-sharp) | headless browser | [read more here](https://github.com/hardkoded/puppeteer-sharp#prerequisites) |\n\n## Saving static images\n\nBy referencing the \u0060Plotly.NET.ImageExport\u0060 package, you get access to:\n\n - jpg via \u0060Chart.SaveJPG\u0060\n - png via \u0060Chart.SavePNG\u0060\n - svg via \u0060Chart.SaveSVG\u0060\n\n(and Extensions for C# style fluent interfaces by opening the \u0060GenericChartExtensions\u0060 namespace)\n\nThe parameters for all three functions are exactly the same. \n*)\n\nopen Plotly.NET\nopen Plotly.NET.ImageExport\n\nlet exampleChart = \n    Chart.Histogram2DContour(\n        [1.;2.;2.;4.;5.],\n        [1.;2.;2.;4.;5.]\n    )\n\n(***do-not-eval***)\nexampleChart\n|\u003E Chart.saveJPG(\n    \u0022/your/path/without/extension/here\u0022,\n    Width=300,\n    Height=300\n)\n\n(*** condition: ipynb ***)\n#if IPYNB\nlet imgString = $\u0022\u0022\u0022\u003Cimg\n    src= \u0022{exampleChart|\u003E Chart.toBase64JPGString(Width=300,Height=300)}\u0022\n/\u003E\u0022\u0022\u0022\nDisplayExtensions.DisplayAs(imgString,\u0022text/html\u0022)\n#endif // IPYNB\n\n(***hide***)\n$\u0022\u0022\u0022\u003Cimg\n    src= \u0022{exampleChart|\u003E Chart.toBase64JPGString(Width=300,Height=300)}\u0022\n/\u003E\u0022\u0022\u0022\n(***include-it-raw***)\n\n(**\n## Generating URIs for static chart images\n\nBy referencing the \u0060Plotly.NET.ImageExport\u0060 package, you get access to:\n\n - jpg via \u0060Chart.toBase64JPGString\u0060\n - png via \u0060Chart.toBase64PNGString\u0060\n - svg via \u0060Chart.toSVGString\u0060\n\n(and Extensions for C# style fluent interfaces by opening the \u0060GenericChartExtensions\u0060 namespace)\n\n*)\n\nlet base64JPG =\n    exampleChart\n    |\u003E Chart.toBase64JPGString(\n        Width=300,\n        Height=300\n    )\n\n(**\nIt is very easy to construct a html tag that includes this image via a base64 uri. For SVGs, \nnot even that is necessary and just the SVG string can be used.\n*)\n\n(***do-not-eval***)\n$\u0022\u0022\u0022\u003Cimg\n    src= \u0022{base64JPG}\u0022\n/\u003E\u0022\u0022\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\nlet imgString = $\u0022\u0022\u0022\u003Cimg\n    src= \u0022{base64JPG}\u0022\n/\u003E\u0022\u0022\u0022\nDisplayExtensions.DisplayAs(imgString,\u0022text/html\u0022)\n#endif // IPYNB\n\n(***hide***)\n$\u0022\u0022\u0022\u003Cimg\n    src= \u0022{base64JPG}\u0022\n/\u003E\u0022\u0022\u0022\n\n(***include-it-raw***)\n\n(**\nSVGs can be included without the image tag:\n*)\n\nlet svgString =\n    exampleChart\n    |\u003E Chart.toSVGString(\n        Width=300,\n        Height=300\n    )\n\nsvgString.Substring(0,300)\n|\u003E printfn \u0022%s\u0022\n\n(***include-output***)\n\n(**\nIn fact, the images shown on this site are included just the same way.\n\n## Including static images in dotnet interactive notebooks\n\nTo include the images in dotnet interactive, convert them to html tags as above and include them via \ndotnet interactive\u0027s \u0060DisplayAs\u0060 function. The content type for PNG/JPG is \u0022text/html\u0022, and \u0022image/svg\u002Bxml\u0022 for SVG.\n*)\n\nlet base64PNGTag =\n    let base64 =\n        exampleChart\n        |\u003E Chart.toBase64PNGString(\n            Width=300,\n            Height=300\n        )\n    $\u0022\u0022\u0022\u003Cimg src= \u0022{base64JPG}\u0022/\u003E\u0022\u0022\u0022\n\nlet svgString2 =\n    exampleChart\n    |\u003E Chart.toSVGString(\n        Width=300,\n        Height=300\n    )\n\n// DisplayExtensions.DisplayAs(base64PNG,\u0022text/html\u0022)\n// DisplayExtensions.DisplayAs(svgString2,\u0022image/svg\u002Bxml\u0022)\n\n(*** condition: ipynb ***)\n#if IPYNB\nDisplayExtensions.DisplayAs(base64PNG,\u0022text/html\u0022)\nDisplayExtensions.DisplayAs(svgString,\u0022image/svg\u002Bxml\u0022)\n#endif // IPYNB"},{"uri":"https://plotly.net/10_0_ternary_line_scatter_plots.html","title":"Ternary line and scatter plots","content":"(**\n---\ntitle: Ternary line and scatter plots\ncategory: Ternary Plots\ncategoryindex: 11\nindex: 1\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 12.0.3\u0022\n#r \u0022nuget: DynamicObj\u0022\n#r \u0022../bin/Plotly.NET/netstandard2.0/Plotly.NET.dll\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# Ternary charts\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/Plotly.NET/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create ternary charts in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n\n*)\n\nopen Plotly.NET \n  \n// a coordinates\nlet a  = [ 1; 2; 3; 4; 5; 6; 7;]\n\n// b coordinates\nlet b  = a |\u003E List.rev\n\n//c\nlet c  = [ 2; 2; 2; 2; 2; 2; 2;]\n\n\n(**\nA Ternary plot is a barycentric plot on three variables which sum to a constant.\n\nIt graphically depicts the ratios of the three variables as positions in an equilateral triangle. \n\nIt is used in physical chemistry, petrology, mineralogy, metallurgy, and other physical sciences to show the compositions of systems composed of three species. \nIn population genetics, a triangle plot of genotype frequencies is called a de Finetti diagram. In game theory, it is often called a simplex plot.\n\nTernary plots are tools for analyzing compositional data in the three-dimensional case.\n\n## Ternary point charts\n\nuse \u0060Chart.PointTernary\u0060 to create a ternary plot that displays points on a ternary coordinate system:\n*)\n\nlet ternaryPoint = Chart.PointTernary(a,b,c)\n(*** condition: ipynb ***)\n#if IPYNB\nternaryPoint\n#endif // IPYNB\n\n(***hide***)\nternaryPoint |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n## Ternary line charts\n\nuse \u0060Chart.LineTernary\u0060 to create a ternary plot that displays a line connecting input the data on a ternary coordinate system:\n\nAs values on ternary plots sum to a constant, you can omit one dimension ofd the data by providing that sum.\n\nYou can also for example change the line style using \u0060Chart.withLineStyle\u0060\n*)\n\nlet lineTernary = \n    Chart.LineTernary(a,b,Sum = 10)\n    |\u003E Chart.withLineStyle(Color=Color.fromString \u0022purple\u0022,Dash=StyleParam.DrawingStyle.DashDot)\n\n(*** condition: ipynb ***)\n#if IPYNB\nlineTernary\n#endif // IPYNB\n\n(***hide***)\nlineTernary |\u003E GenericChart.toChartHTML\n(***include-it-raw***)"},{"uri":"https://plotly.net/04_1_box-plots.html","title":"BoxPlots","content":"(**\n---\ntitle: BoxPlots\ncategory: Distribution Charts\ncategoryindex: 5\nindex: 2\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 12.0.3\u0022\n#r \u0022nuget: DynamicObj\u0022\n#r \u0022../bin/Plotly.NET/netstandard2.0/Plotly.NET.dll\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# BoxPlots\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/Plotly.NET/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create boxplot charts in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n*)\n\nopen Plotly.NET \n\nlet y =  [2.; 1.5; 5.; 1.5; 3.; 2.5; 2.5; 1.5; 3.5; 1.]\nlet x = [\u0022bin1\u0022;\u0022bin2\u0022;\u0022bin1\u0022;\u0022bin2\u0022;\u0022bin1\u0022;\u0022bin2\u0022;\u0022bin1\u0022;\u0022bin1\u0022;\u0022bin2\u0022;\u0022bin1\u0022]\n\n(**\nA box plot or boxplot is a convenient way of graphically depicting groups of numerical data through their quartiles. \nBox plots may also have lines extending vertically from the boxes (whiskers) indicating variability outside the upper\nand lower quartiles, hence the terms box-and-whisker plot and box-and-whisker diagram. \nOutliers may be plotted as individual points.\n*)\n\nlet box1 =\n    Chart.BoxPlot(x,y,Jitter=0.1,BoxPoints=StyleParam.BoxPoints.All)\n\n(*** condition: ipynb ***)\n#if IPYNB\nbox1\n#endif // IPYNB\n\n(***hide***)\nbox1 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\nBy swapping x and y plus using \u0060StyleParam.Orientation.Horizontal\u0060 we can flip the chart horizontaly.\n*)\nlet box2 =\n    Chart.BoxPlot(y,x,Jitter=0.1,BoxPoints=StyleParam.BoxPoints.All,Orientation=StyleParam.Orientation.Horizontal)\n\n(*** condition: ipynb ***)\n#if IPYNB\nbox2\n#endif // IPYNB\n\n(***hide***)\nbox2 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\nYou can also produce a boxplot using the \u0060Chart.Combine\u0060 syntax.\n*)\n\nlet y\u0027 =  [2.; 1.5; 5.; 1.5; 2.; 2.5; 2.1; 2.5; 1.5; 1.;2.; 1.5; 5.; 1.5; 3.; 2.5; 2.5; 1.5; 3.5; 1.]\n\nlet box3 =\n    [\n        Chart.BoxPlot(\u0022y\u0022 ,y,Name=\u0022bin1\u0022,Jitter=0.1,BoxPoints=StyleParam.BoxPoints.All);\n        Chart.BoxPlot(\u0022y\u0027\u0022,y\u0027,Name=\u0022bin2\u0022,Jitter=0.1,BoxPoints=StyleParam.BoxPoints.All);\n    ]\n    |\u003E Chart.combine\n\n(*** condition: ipynb ***)\n#if IPYNB\nbox3\n#endif // IPYNB\n\n(***hide***)\nbox3 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n"},{"uri":"https://plotly.net/01_0_axis-styling.html","title":"Axis styling","content":"(**\n---\ntitle: Axis styling\ncategory: Chart Layout\ncategoryindex: 2\nindex: 1\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 12.0.3\u0022\n#r \u0022nuget: DynamicObj\u0022\n#r \u0022../bin/Plotly.NET/netstandard2.0/Plotly.NET.dll\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(**\n# Axis styling\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/Plotly.NET/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to style chart axes in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n*)\n\nopen Plotly.NET \n  \nlet x = [1.; 2.; 3.; 4.; 5.; 6.; 7.; 8.; 9.; 10.; ]\nlet y = [2.; 1.5; 5.; 1.5; 3.; 2.5; 2.5; 1.5; 3.5; 1.]\nlet y\u0027 = y |\u003E List.map (fun y -\u003E y * 2.) |\u003E List.rev\n(**\n## Single axis styling\n\nTo style a specific axis of a plot, use the respective \u0060Chart.with*_AxisStyle\u0060 function:\n\n*)\n\nlet plot1 =\n    Chart.Point(x,y)\n    |\u003E Chart.withXAxisStyle (\u0022X axis title\u0022, MinMax = (-1.,10.))\n    |\u003E Chart.withYAxisStyle (\u0022Y axis title\u0022, MinMax = (-1.,10.))\n\n(*** condition: ipynb ***)\n#if IPYNB\nplot1\n#endif // IPYNB\n\n(***hide***)\nplot1 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\nfor even more fine-grained control, initialize a new axis and replace the old one of the plot with \u0060\u0060\u0060\u0060.\nThe following example creates two mirrored axes with inside ticks, one of them with a log scale:\n*)\n\nopen Plotly.NET.LayoutObjects // this namespace contains all object abstractions for layout styling\n\nlet mirroredXAxis =\n    LinearAxis.init(\n        Title = Title.init(Text=\u0022Mirrored axis\u0022),\n        ShowLine = true,\n        Mirror = StyleParam.Mirror.AllTicks,\n        ShowGrid = false,\n        Ticks = StyleParam.TickOptions.Inside\n    )\n\nlet mirroredLogYAxis = \n    LinearAxis.init(\n        Title = Title.init(Text=\u0022Log axis\u0022),\n        AxisType = StyleParam.AxisType.Log,\n        ShowLine = true,\n        Mirror = StyleParam.Mirror.AllTicks,\n        ShowGrid = false,\n        Ticks = StyleParam.TickOptions.Inside\n    )\n\nlet plot2 =\n    Chart.Point(x,y)\n    |\u003E Chart.withXAxis mirroredXAxis\n    |\u003E Chart.withYAxis mirroredLogYAxis\n\n(*** condition: ipynb ***)\n#if IPYNB\nplot2\n#endif // IPYNB\n\n(***hide***)\nplot2 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n\n(**\n## Multiple axes\n\nAssign different axis anchors to subplots to map them to different axes.\n\n### Multiple axes on different sides of the chart\n\nThe following example first creates a multichart containing two plots with different axis anchors.\nSubsequently, multiple axes with the respective anchors are added to the plot. \nNote that the same can be done as above, defining axes beforehand.\n\n*)\n\nlet anchoredAt1 =\n    Chart.Line (x,y,Name=\u0022anchor 1\u0022)\n        |\u003E Chart.withAxisAnchor(Y=1)\n\nlet anchoredAt2 =\n     Chart.Line (x,y\u0027,Name=\u0022anchor 2\u0022)\n        |\u003E Chart.withAxisAnchor(Y=2)\n\nlet twoXAxes1 = \n    [\n       anchoredAt1\n       anchoredAt2\n    ]\n    |\u003E Chart.combine\n    |\u003E Chart.withYAxisStyle(\n        \u0022axis 1\u0022,\n        Side=StyleParam.Side.Left,\n        Id=StyleParam.SubPlotId.YAxis 1\n    )\n    |\u003E Chart.withYAxisStyle(\n        \u0022axis2\u0022,\n        Side=StyleParam.Side.Right,\n        Id=StyleParam.SubPlotId.YAxis 2,\n        Overlaying=StyleParam.LinearAxisId.Y 1\n    )\n        \n(*** condition: ipynb ***)\n#if IPYNB\ntwoXAxes1\n#endif // IPYNB\n\n(***hide***)\ntwoXAxes1 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n### Multiple axes on the same side of the chart\n\nAnalogous to above, but move the whole plot to the right by adjusting its domain, and then add a second axis to the left:\n\n*)\n\nlet twoXAxes2 =\n    [\n        anchoredAt1\n        anchoredAt2\n    ]\n    |\u003E Chart.combine\n    |\u003E Chart.withYAxisStyle(\n            \u0022first y-axis\u0022,\n            ShowLine=true\n            )\n    |\u003E Chart.withXAxisStyle(\n        \u0022x-axis\u0022,\n        Domain=(0.3, 1.0) // moves the first axis and the whole plot to the right\n    ) \n    |\u003E Chart.withYAxisStyle(\n        \u0022second y-axis\u0022,\n        Side=StyleParam.Side.Left,\n        Id=StyleParam.SubPlotId.YAxis 2,\n        Overlaying=StyleParam.LinearAxisId.Y 1,\n        Position=0.10, // position the axis beteen the leftmost edge and the firt axis at 0.3\n        //Anchor=StyleParam.AxisAnchorId.Free,\n        ShowLine=true\n    )\n\n(*** condition: ipynb ***)\n#if IPYNB\ntwoXAxes2\n#endif // IPYNB\n\n(***hide***)\ntwoXAxes2 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)"},{"uri":"https://plotly.net/02_1_bar-and-column-charts.html","title":"Bar and column charts","content":"(**\n---\ntitle: Bar and column charts\ncategory: Simple Charts\ncategoryindex: 3\nindex: 2\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 12.0.3\u0022\n#r \u0022nuget: DynamicObj\u0022\n#r \u0022../bin/Plotly.NET/netstandard2.0/Plotly.NET.dll\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# Bar and column charts\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/Plotly.NET/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create bar and a column charts in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n*)\n\nopen Plotly.NET \n  \nlet values = [20; 14; 23;]\nlet keys   = [\u0022Product A\u0022; \u0022Product B\u0022; \u0022Product C\u0022;]\n\n(**\nA bar chart or bar graph is a chart that presents grouped data with rectangular bars with \nlengths proportional to the values that they represent. The bars can be plotted vertically\nor horizontally. A vertical bar chart is called a column bar chart.\n\n### Column Charts\n*)\n\nlet column = Chart.Column(values,keys)\n\n(*** condition: ipynb ***)\n#if IPYNB\ncolumn\n#endif // IPYNB\n\n(***hide***)\ncolumn |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n### Bar Charts\n*)\n\nlet bar =\n    Chart.Bar(values,keys)\n\n(*** condition: ipynb ***)\n#if IPYNB\nbar\n#endif // IPYNB\n\n(***hide***)\nbar |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(** \n\n## Stacked bar chart or column charts\nThe following example shows how to create a stacked bar chart by combining bar charts created by combining multiple \u0060Chart.StackedBar\u0060 charts: \n\n### Stacked bar Charts\n*)\n\nlet stackedBar =\n    [\n        Chart.StackedBar(values,keys,Name=\u0022old\u0022);\n        Chart.StackedBar([8; 21; 13;],keys,Name=\u0022new\u0022)\n    ]\n    |\u003E Chart.combine\n\n(*** condition: ipynb ***)\n#if IPYNB\nstackedBar\n#endif // IPYNB\n\n(***hide***)\nstackedBar |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(*\n### Stacked bar Charts\n*)\n\nlet stackedColumn =\n    [\n        Chart.StackedColumn(values,keys,Name=\u0022old\u0022);\n        Chart.StackedColumn([8; 21; 13;],keys,Name=\u0022new\u0022)\n    ]\n    |\u003E Chart.combine\n\n(*** condition: ipynb ***)\n#if IPYNB\nstackedColumn\n#endif // IPYNB\n\n(***hide***)\nstackedColumn |\u003E GenericChart.toChartHTML\n(***include-it-raw***)"},{"uri":"https://plotly.net/07_0_candlestick.html","title":"Candlestick Charts","content":"(**\n---\ntitle: Candlestick Charts\ncategory: Finance Charts\ncategoryindex: 8\nindex: 1\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 12.0.3\u0022\n#r \u0022nuget: DynamicObj\u0022\n#r \u0022../bin/Plotly.NET/netstandard2.0/Plotly.NET.dll\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# Candlestick Charts\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/Plotly.NET/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create candlestick charts in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n*)\n\nopen Plotly.NET \nopen Plotly.NET.LayoutObjects\nopen Plotly.NET.TraceObjects\n\nlet candles =\n    [|(\u00222020-01-17T13:40:00\u0022, 0.68888, 0.68888, 0.68879, 0.6888);\n      (\u00222020-01-17T13:41:00\u0022, 0.68883, 0.68884, 0.68875, 0.68877);\n      (\u00222020-01-17T13:42:00\u0022, 0.68878, 0.68889, 0.68878, 0.68886);\n      (\u00222020-01-17T13:43:00\u0022, 0.68886, 0.68886, 0.68876, 0.68879);\n      (\u00222020-01-17T13:44:00\u0022, 0.68879, 0.68879, 0.68873, 0.68874);\n      (\u00222020-01-17T13:45:00\u0022, 0.68875, 0.68877, 0.68867, 0.68868);\n      (\u00222020-01-17T13:46:00\u0022, 0.68869, 0.68887, 0.68869, 0.68883);\n      (\u00222020-01-17T13:47:00\u0022, 0.68883, 0.68899, 0.68883, 0.68899);\n      (\u00222020-01-17T13:48:00\u0022, 0.68898, 0.689, 0.68885, 0.68889);\n      (\u00222020-01-17T13:49:00\u0022, 0.68889, 0.68893, 0.68881, 0.68893);\n      (\u00222020-01-17T13:50:00\u0022, 0.68891, 0.68896, 0.68886, 0.68891);\n    |]\n    |\u003E Array.map (fun (d,o,h,l,c)-\u003ESystem.DateTime.Parse d, StockData.Create(o,h,l,c))\n(**\nA candlestick chart is useful for plotting stock prices over time. A candle\nis a group of high, open, close and low values over a period of time, e.g. 1 minute, 5 minute, hour, day, etc..\nThe x-axis is usually dateime values and y is a sequence of candle structures.\n*)\n\nlet candles1 = Chart.Candlestick candles\n\n(*** condition: ipynb ***)\n#if IPYNB\ncandles1\n#endif // IPYNB\n\n(***hide***)\ncandles1 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\nIf you want to hide the rangeslider, use \u0060withXAxisRangeSlider\u0060 and hide it:\n*)\nlet rangeslider = RangeSlider.init(Visible=false)\n\nlet candles2 = \n    Chart.Candlestick candles\n    |\u003E Chart.withXAxisRangeSlider rangeslider\n\n(*** condition: ipynb ***)\n#if IPYNB\ncandles2\n#endif // IPYNB\n\n(***hide***)\ncandles2 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n"},{"uri":"https://plotly.net/02_2_area-plots.html","title":"Area charts","content":"(**\n---\ntitle: Area charts\ncategory: Simple Charts\ncategoryindex: 3\nindex: 3\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 12.0.3\u0022\n#r \u0022nuget: DynamicObj\u0022\n#r \u0022../bin/Plotly.NET/netstandard2.0/Plotly.NET.dll\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# Area charts\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/Plotly.NET/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create area charts, area charts with splines, and stackes area charts in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n\n*)\n\nopen Plotly.NET \n  \nlet x  = [1.; 2.; 3.; 4.; 5.; 6.; 7.; 8.; 9.; 10.; ]\nlet y  = [5.; 2.5; 5.; 7.5; 5.; 2.5; 7.5; 4.5; 5.5; 5.]\n\n(**\nAn area chart or area graph displays graphically quantitive data. It is based on the line chart.\nThe area between axis and line are commonly emphasized with colors, textures and hatchings.\n\n### Simple area chart\n*)\n\nlet area1 = Chart.Area(x,y)\n\n(*** condition: ipynb ***)\n#if IPYNB\narea1\n#endif // IPYNB\n\n(***hide***)\narea1 |\u003E GenericChart.toChartHTML\n(*** include-it-raw ***)\n\n(**\n### Area chart with a spline\n*)\n\nlet area2 =\n    Chart.SplineArea(x,y)\n\n(*** condition: ipynb ***)\n#if IPYNB\narea2\n#endif // IPYNB\n\n(***hide***)\narea2 |\u003E GenericChart.toChartHTML\n(*** include-it-raw ***)\n\n(**\n### Stacked Area chart\n*)\n\nlet stackedArea =\n    [\n        Chart.StackedArea(x,y)\n        Chart.StackedArea(x,y |\u003E Seq.rev)\n    ]\n    |\u003E Chart.combine\n\n(*** condition: ipynb ***)\n#if IPYNB\nstackedArea\n#endif // IPYNB\n\n(***hide***)\nstackedArea |\u003E GenericChart.toChartHTML\n(*** include-it-raw ***)"},{"uri":"https://plotly.net/04_2_violin-plots.html","title":"Violin plots","content":"(**\n---\ntitle: Violin plots\ncategory: Distribution Charts\ncategoryindex: 5\nindex: 3\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 12.0.3\u0022\n#r \u0022nuget: DynamicObj\u0022\n#r \u0022../bin/Plotly.NET/netstandard2.0/Plotly.NET.dll\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# Violin plots\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/Plotly.NET/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create violin plot charts in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n\n*)\n\nopen Plotly.NET \n  \nlet y =  [2.; 1.5; 5.; 1.5; 3.; 2.5; 2.5; 1.5; 3.5; 1.]\nlet x = [\u0022bin1\u0022;\u0022bin2\u0022;\u0022bin1\u0022;\u0022bin2\u0022;\u0022bin1\u0022;\u0022bin2\u0022;\u0022bin1\u0022;\u0022bin1\u0022;\u0022bin2\u0022;\u0022bin1\u0022]\n\n(**\nA violin plot is a method of plotting numeric data. It is similar to box plot with a rotated kernel density plot \non each side. The violin plot is similar to box plots, except that they also show the probability density of the \ndata at different values.\n*)\n\nlet violin1 =\n    Chart.Violin (\n        x,y,\n        Points=StyleParam.JitterPoints.All\n    )\n\n(*** condition: ipynb ***)\n#if IPYNB\nviolin1\n#endif // IPYNB\n\n(***hide***)\nviolin1 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\nBy swapping x and y plus using \u0060StyleParam.Orientation.Horizontal\u0060 we can flip the chart horizontaly.\n*)\nopen Plotly.NET.TraceObjects\n\nlet violin2 =\n    Chart.Violin(\n        y,x,\n        Jitter=0.1,\n        Points=StyleParam.JitterPoints.All,\n        Orientation=StyleParam.Orientation.Horizontal,\n        MeanLine=MeanLine.init(Visible=true)\n    )\n\n(*** condition: ipynb ***)\n#if IPYNB\nviolin2\n#endif // IPYNB\n\n(***hide***)\nviolin2 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\nYou can also produce a violin plot using the \u0060Chart.Combine\u0060 syntax.\n*)\n\nlet y\u0027 =  [2.; 1.5; 5.; 1.5; 2.; 2.5; 2.1; 2.5; 1.5; 1.;2.; 1.5; 5.; 1.5; 3.; 2.5; 2.5; 1.5; 3.5; 1.]\n\nlet violin3 =\n    [\n        Chart.Violin (\u0022y\u0022 ,y,Name=\u0022bin1\u0022,Jitter=0.1,Points=StyleParam.JitterPoints.All);\n        Chart.Violin (\u0022y\u0027\u0022,y\u0027,Name=\u0022bin2\u0022,Jitter=0.1,Points=StyleParam.JitterPoints.All);\n    ]\n    |\u003E Chart.combine\n\n(*** condition: ipynb ***)\n#if IPYNB\nviolin3\n#endif // IPYNB\n\n(***hide***)\nviolin3 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n"}]